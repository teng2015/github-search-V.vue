/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		1:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"app"}[chunkId]||chunkId) + ".js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(8);
	__webpack_require__(9);
	module.exports = __webpack_require__(86);


/***/ },

/***/ 8:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Vue) {/*!
	 * Vue.js v1.0.26
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	'use strict';

	function set(obj, key, val) {
	  if (hasOwn(obj, key)) {
	    obj[key] = val;
	    return;
	  }
	  if (obj._isVue) {
	    set(obj._data, key, val);
	    return;
	  }
	  var ob = obj.__ob__;
	  if (!ob) {
	    obj[key] = val;
	    return;
	  }
	  ob.convert(key, val);
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._proxy(key);
	      vm._digest();
	    }
	  }
	  return val;
	}

	/**
	 * Delete a property and trigger change if necessary.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 */

	function del(obj, key) {
	  if (!hasOwn(obj, key)) {
	    return;
	  }
	  delete obj[key];
	  var ob = obj.__ob__;
	  if (!ob) {
	    if (obj._isVue) {
	      delete obj._data[key];
	      obj._digest();
	    }
	    return;
	  }
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._unproxy(key);
	      vm._digest();
	    }
	  }
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	/**
	 * Check whether the object has the property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @return {Boolean}
	 */

	function hasOwn(obj, key) {
	  return hasOwnProperty.call(obj, key);
	}

	/**
	 * Check if an expression is a literal value.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */

	var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;

	function isLiteral(exp) {
	  return literalValueRE.test(exp);
	}

	/**
	 * Check if a string starts with $ or _
	 *
	 * @param {String} str
	 * @return {Boolean}
	 */

	function isReserved(str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F;
	}

	/**
	 * Guard text output, make sure undefined outputs
	 * empty string
	 *
	 * @param {*} value
	 * @return {String}
	 */

	function _toString(value) {
	  return value == null ? '' : value.toString();
	}

	/**
	 * Check and convert possible numeric strings to numbers
	 * before setting back to data
	 *
	 * @param {*} value
	 * @return {*|Number}
	 */

	function toNumber(value) {
	  if (typeof value !== 'string') {
	    return value;
	  } else {
	    var parsed = Number(value);
	    return isNaN(parsed) ? value : parsed;
	  }
	}

	/**
	 * Convert string boolean literals into real booleans.
	 *
	 * @param {*} value
	 * @return {*|Boolean}
	 */

	function toBoolean(value) {
	  return value === 'true' ? true : value === 'false' ? false : value;
	}

	/**
	 * Strip quotes from a string
	 *
	 * @param {String} str
	 * @return {String | false}
	 */

	function stripQuotes(str) {
	  var a = str.charCodeAt(0);
	  var b = str.charCodeAt(str.length - 1);
	  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
	}

	/**
	 * Camelize a hyphen-delmited string.
	 *
	 * @param {String} str
	 * @return {String}
	 */

	var camelizeRE = /-(\w)/g;

	function camelize(str) {
	  return str.replace(camelizeRE, toUpper);
	}

	function toUpper(_, c) {
	  return c ? c.toUpperCase() : '';
	}

	/**
	 * Hyphenate a camelCase string.
	 *
	 * @param {String} str
	 * @return {String}
	 */

	var hyphenateRE = /([a-z\d])([A-Z])/g;

	function hyphenate(str) {
	  return str.replace(hyphenateRE, '$1-$2').toLowerCase();
	}

	/**
	 * Converts hyphen/underscore/slash delimitered names into
	 * camelized classNames.
	 *
	 * e.g. my-component => MyComponent
	 *      some_else    => SomeElse
	 *      some/comp    => SomeComp
	 *
	 * @param {String} str
	 * @return {String}
	 */

	var classifyRE = /(?:^|[-_\/])(\w)/g;

	function classify(str) {
	  return str.replace(classifyRE, toUpper);
	}

	/**
	 * Simple bind, faster than native
	 *
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @return {Function}
	 */

	function bind(fn, ctx) {
	  return function (a) {
	    var l = arguments.length;
	    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
	  };
	}

	/**
	 * Convert an Array-like object to a real Array.
	 *
	 * @param {Array-like} list
	 * @param {Number} [start] - start index
	 * @return {Array}
	 */

	function toArray(list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret;
	}

	/**
	 * Mix properties into target object.
	 *
	 * @param {Object} to
	 * @param {Object} from
	 */

	function extend(to, from) {
	  var keys = Object.keys(from);
	  var i = keys.length;
	  while (i--) {
	    to[keys[i]] = from[keys[i]];
	  }
	  return to;
	}

	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */

	function isObject(obj) {
	  return obj !== null && typeof obj === 'object';
	}

	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */

	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';

	function isPlainObject(obj) {
	  return toString.call(obj) === OBJECT_STRING;
	}

	/**
	 * Array type check.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */

	var isArray = Array.isArray;

	/**
	 * Define a property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 * @param {Boolean} [enumerable]
	 */

	function def(obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}

	/**
	 * Debounce a function so it only gets called after the
	 * input stops arriving after the given wait period.
	 *
	 * @param {Function} func
	 * @param {Number} wait
	 * @return {Function} - the debounced function
	 */

	function _debounce(func, wait) {
	  var timeout, args, context, timestamp, result;
	  var later = function later() {
	    var last = Date.now() - timestamp;
	    if (last < wait && last >= 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    }
	  };
	  return function () {
	    context = this;
	    args = arguments;
	    timestamp = Date.now();
	    if (!timeout) {
	      timeout = setTimeout(later, wait);
	    }
	    return result;
	  };
	}

	/**
	 * Manual indexOf because it's slightly faster than
	 * native.
	 *
	 * @param {Array} arr
	 * @param {*} obj
	 */

	function indexOf(arr, obj) {
	  var i = arr.length;
	  while (i--) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	}

	/**
	 * Make a cancellable version of an async callback.
	 *
	 * @param {Function} fn
	 * @return {Function}
	 */

	function cancellable(fn) {
	  var cb = function cb() {
	    if (!cb.cancelled) {
	      return fn.apply(this, arguments);
	    }
	  };
	  cb.cancel = function () {
	    cb.cancelled = true;
	  };
	  return cb;
	}

	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 *
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 */

	function looseEqual(a, b) {
	  /* eslint-disable eqeqeq */
	  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
	  /* eslint-enable eqeqeq */
	}

	var hasProto = ('__proto__' in {});

	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';

	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

	// UA sniffing for working around browser-specific quirks
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && UA.indexOf('trident') > 0;
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIos = UA && /(iphone|ipad|ipod|ios)/i.test(UA);
	var iosVersionMatch = isIos && UA.match(/os ([\d_]+)/);
	var iosVersion = iosVersionMatch && iosVersionMatch[1].split('_');

	// detecting iOS UIWebView by indexedDB
	var hasMutationObserverBug = iosVersion && Number(iosVersion[0]) >= 9 && Number(iosVersion[1]) >= 3 && !window.indexedDB;

	var transitionProp = undefined;
	var transitionEndEvent = undefined;
	var animationProp = undefined;
	var animationEndEvent = undefined;

	// Transition property/event sniffing
	if (inBrowser && !isIE9) {
	  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
	  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
	  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
	  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
	  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
	  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
	}

	/**
	 * Defer a task to execute it asynchronously. Ideally this
	 * should be executed as a microtask, so we leverage
	 * MutationObserver if it's available, and fallback to
	 * setTimeout(0).
	 *
	 * @param {Function} cb
	 * @param {Object} ctx
	 */

	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc;
	  function nextTickHandler() {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks = [];
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }

	  /* istanbul ignore if */
	  if (typeof MutationObserver !== 'undefined' && !hasMutationObserverBug) {
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(counter);
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = counter;
	    };
	  } else {
	    // webpack attempts to inject a shim for setImmediate
	    // if it is used as a global, so we have to work around that to
	    // avoid bundling unnecessary code.
	    var context = inBrowser ? window : typeof global !== 'undefined' ? global : {};
	    timerFunc = context.setImmediate || setTimeout;
	  }
	  return function (cb, ctx) {
	    var func = ctx ? function () {
	      cb.call(ctx);
	    } : cb;
	    callbacks.push(func);
	    if (pending) return;
	    pending = true;
	    timerFunc(nextTickHandler, 0);
	  };
	})();

	var _Set = undefined;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && Set.toString().match(/native code/)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = function () {
	    this.set = Object.create(null);
	  };
	  _Set.prototype.has = function (key) {
	    return this.set[key] !== undefined;
	  };
	  _Set.prototype.add = function (key) {
	    this.set[key] = 1;
	  };
	  _Set.prototype.clear = function () {
	    this.set = Object.create(null);
	  };
	}

	function Cache(limit) {
	  this.size = 0;
	  this.limit = limit;
	  this.head = this.tail = undefined;
	  this._keymap = Object.create(null);
	}

	var p = Cache.prototype;

	/**
	 * Put <value> into the cache associated with <key>.
	 * Returns the entry which was removed to make room for
	 * the new entry. Otherwise undefined is returned.
	 * (i.e. if there was enough room already).
	 *
	 * @param {String} key
	 * @param {*} value
	 * @return {Entry|undefined}
	 */

	p.put = function (key, value) {
	  var removed;

	  var entry = this.get(key, true);
	  if (!entry) {
	    if (this.size === this.limit) {
	      removed = this.shift();
	    }
	    entry = {
	      key: key
	    };
	    this._keymap[key] = entry;
	    if (this.tail) {
	      this.tail.newer = entry;
	      entry.older = this.tail;
	    } else {
	      this.head = entry;
	    }
	    this.tail = entry;
	    this.size++;
	  }
	  entry.value = value;

	  return removed;
	};

	/**
	 * Purge the least recently used (oldest) entry from the
	 * cache. Returns the removed entry or undefined if the
	 * cache was empty.
	 */

	p.shift = function () {
	  var entry = this.head;
	  if (entry) {
	    this.head = this.head.newer;
	    this.head.older = undefined;
	    entry.newer = entry.older = undefined;
	    this._keymap[entry.key] = undefined;
	    this.size--;
	  }
	  return entry;
	};

	/**
	 * Get and register recent use of <key>. Returns the value
	 * associated with <key> or undefined if not in cache.
	 *
	 * @param {String} key
	 * @param {Boolean} returnEntry
	 * @return {Entry|*}
	 */

	p.get = function (key, returnEntry) {
	  var entry = this._keymap[key];
	  if (entry === undefined) return;
	  if (entry === this.tail) {
	    return returnEntry ? entry : entry.value;
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head) {
	      this.head = entry.newer;
	    }
	    entry.newer.older = entry.older; // C <-- E.
	  }
	  if (entry.older) {
	    entry.older.newer = entry.newer; // C. --> E
	  }
	  entry.newer = undefined; // D --x
	  entry.older = this.tail; // D. --> E
	  if (this.tail) {
	    this.tail.newer = entry; // E. <-- D
	  }
	  this.tail = entry;
	  return returnEntry ? entry : entry.value;
	};

	var cache$1 = new Cache(1000);
	var filterTokenRE = /[^\s'"]+|'[^']*'|"[^"]*"/g;
	var reservedArgRE = /^in$|^-?\d+/;

	/**
	 * Parser state
	 */

	var str;
	var dir;
	var c;
	var prev;
	var i;
	var l;
	var lastFilterIndex;
	var inSingle;
	var inDouble;
	var curly;
	var square;
	var paren;
	/**
	 * Push a filter to the current directive object
	 */

	function pushFilter() {
	  var exp = str.slice(lastFilterIndex, i).trim();
	  var filter;
	  if (exp) {
	    filter = {};
	    var tokens = exp.match(filterTokenRE);
	    filter.name = tokens[0];
	    if (tokens.length > 1) {
	      filter.args = tokens.slice(1).map(processFilterArg);
	    }
	  }
	  if (filter) {
	    (dir.filters = dir.filters || []).push(filter);
	  }
	  lastFilterIndex = i + 1;
	}

	/**
	 * Check if an argument is dynamic and strip quotes.
	 *
	 * @param {String} arg
	 * @return {Object}
	 */

	function processFilterArg(arg) {
	  if (reservedArgRE.test(arg)) {
	    return {
	      value: toNumber(arg),
	      dynamic: false
	    };
	  } else {
	    var stripped = stripQuotes(arg);
	    var dynamic = stripped === arg;
	    return {
	      value: dynamic ? arg : stripped,
	      dynamic: dynamic
	    };
	  }
	}

	/**
	 * Parse a directive value and extract the expression
	 * and its filters into a descriptor.
	 *
	 * Example:
	 *
	 * "a + 1 | uppercase" will yield:
	 * {
	 *   expression: 'a + 1',
	 *   filters: [
	 *     { name: 'uppercase', args: null }
	 *   ]
	 * }
	 *
	 * @param {String} s
	 * @return {Object}
	 */

	function parseDirective(s) {
	  var hit = cache$1.get(s);
	  if (hit) {
	    return hit;
	  }

	  // reset parser state
	  str = s;
	  inSingle = inDouble = false;
	  curly = square = paren = 0;
	  lastFilterIndex = 0;
	  dir = {};

	  for (i = 0, l = str.length; i < l; i++) {
	    prev = c;
	    c = str.charCodeAt(i);
	    if (inSingle) {
	      // check single quote
	      if (c === 0x27 && prev !== 0x5C) inSingle = !inSingle;
	    } else if (inDouble) {
	      // check double quote
	      if (c === 0x22 && prev !== 0x5C) inDouble = !inDouble;
	    } else if (c === 0x7C && // pipe
	    str.charCodeAt(i + 1) !== 0x7C && str.charCodeAt(i - 1) !== 0x7C) {
	      if (dir.expression == null) {
	        // first filter, end of expression
	        lastFilterIndex = i + 1;
	        dir.expression = str.slice(0, i).trim();
	      } else {
	        // already has filter
	        pushFilter();
	      }
	    } else {
	      switch (c) {
	        case 0x22:
	          inDouble = true;break; // "
	        case 0x27:
	          inSingle = true;break; // '
	        case 0x28:
	          paren++;break; // (
	        case 0x29:
	          paren--;break; // )
	        case 0x5B:
	          square++;break; // [
	        case 0x5D:
	          square--;break; // ]
	        case 0x7B:
	          curly++;break; // {
	        case 0x7D:
	          curly--;break; // }
	      }
	    }
	  }

	  if (dir.expression == null) {
	    dir.expression = str.slice(0, i).trim();
	  } else if (lastFilterIndex !== 0) {
	    pushFilter();
	  }

	  cache$1.put(s, dir);
	  return dir;
	}

	var directive = Object.freeze({
	  parseDirective: parseDirective
	});

	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	var cache = undefined;
	var tagRE = undefined;
	var htmlRE = undefined;
	/**
	 * Escape a string so it can be used in a RegExp
	 * constructor.
	 *
	 * @param {String} str
	 */

	function escapeRegex(str) {
	  return str.replace(regexEscapeRE, '\\$&');
	}

	function compileRegex() {
	  var open = escapeRegex(config.delimiters[0]);
	  var close = escapeRegex(config.delimiters[1]);
	  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
	  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
	  tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
	  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
	  // reset cache
	  cache = new Cache(1000);
	}

	/**
	 * Parse a template text string into an array of tokens.
	 *
	 * @param {String} text
	 * @return {Array<Object> | null}
	 *               - {String} type
	 *               - {String} value
	 *               - {Boolean} [html]
	 *               - {Boolean} [oneTime]
	 */

	function parseText(text) {
	  if (!cache) {
	    compileRegex();
	  }
	  var hit = cache.get(text);
	  if (hit) {
	    return hit;
	  }
	  if (!tagRE.test(text)) {
	    return null;
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index, html, value, first, oneTime;
	  /* eslint-disable no-cond-assign */
	  while (match = tagRE.exec(text)) {
	    /* eslint-enable no-cond-assign */
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push({
	        value: text.slice(lastIndex, index)
	      });
	    }
	    // tag token
	    html = htmlRE.test(match[0]);
	    value = html ? match[1] : match[2];
	    first = value.charCodeAt(0);
	    oneTime = first === 42; // *
	    value = oneTime ? value.slice(1) : value;
	    tokens.push({
	      tag: true,
	      value: value.trim(),
	      html: html,
	      oneTime: oneTime
	    });
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push({
	      value: text.slice(lastIndex)
	    });
	  }
	  cache.put(text, tokens);
	  return tokens;
	}

	/**
	 * Format a list of tokens into an expression.
	 * e.g. tokens parsed from 'a {{b}} c' can be serialized
	 * into one single expression as '"a " + b + " c"'.
	 *
	 * @param {Array} tokens
	 * @param {Vue} [vm]
	 * @return {String}
	 */

	function tokensToExp(tokens, vm) {
	  if (tokens.length > 1) {
	    return tokens.map(function (token) {
	      return formatToken(token, vm);
	    }).join('+');
	  } else {
	    return formatToken(tokens[0], vm, true);
	  }
	}

	/**
	 * Format a single token.
	 *
	 * @param {Object} token
	 * @param {Vue} [vm]
	 * @param {Boolean} [single]
	 * @return {String}
	 */

	function formatToken(token, vm, single) {
	  return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
	}

	/**
	 * For an attribute with multiple interpolation tags,
	 * e.g. attr="some-{{thing | filter}}", in order to combine
	 * the whole thing into a single watchable expression, we
	 * have to inline those filters. This function does exactly
	 * that. This is a bit hacky but it avoids heavy changes
	 * to directive parser and watcher mechanism.
	 *
	 * @param {String} exp
	 * @param {Boolean} single
	 * @return {String}
	 */

	var filterRE = /[^|]\|[^|]/;
	function inlineFilters(exp, single) {
	  if (!filterRE.test(exp)) {
	    return single ? exp : '(' + exp + ')';
	  } else {
	    var dir = parseDirective(exp);
	    if (!dir.filters) {
	      return '(' + exp + ')';
	    } else {
	      return 'this._applyFilters(' + dir.expression + // value
	      ',null,' + // oldValue (null for read)
	      JSON.stringify(dir.filters) + // filter descriptors
	      ',false)'; // write?
	    }
	  }
	}

	var text = Object.freeze({
	  compileRegex: compileRegex,
	  parseText: parseText,
	  tokensToExp: tokensToExp
	});

	var delimiters = ['{{', '}}'];
	var unsafeDelimiters = ['{{{', '}}}'];

	var config = Object.defineProperties({

	  /**
	   * Whether to print debug messages.
	   * Also enables stack trace for warnings.
	   *
	   * @type {Boolean}
	   */

	  debug: false,

	  /**
	   * Whether to suppress warnings.
	   *
	   * @type {Boolean}
	   */

	  silent: false,

	  /**
	   * Whether to use async rendering.
	   */

	  async: true,

	  /**
	   * Whether to warn against errors caught when evaluating
	   * expressions.
	   */

	  warnExpressionErrors: true,

	  /**
	   * Whether to allow devtools inspection.
	   * Disabled by default in production builds.
	   */

	  devtools: ("development") !== 'production',

	  /**
	   * Internal flag to indicate the delimiters have been
	   * changed.
	   *
	   * @type {Boolean}
	   */

	  _delimitersChanged: true,

	  /**
	   * List of asset types that a component can own.
	   *
	   * @type {Array}
	   */

	  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],

	  /**
	   * prop binding modes
	   */

	  _propBindingModes: {
	    ONE_WAY: 0,
	    TWO_WAY: 1,
	    ONE_TIME: 2
	  },

	  /**
	   * Max circular updates allowed in a batcher flush cycle.
	   */

	  _maxUpdateCount: 100

	}, {
	  delimiters: { /**
	                 * Interpolation delimiters. Changing these would trigger
	                 * the text parser to re-compile the regular expressions.
	                 *
	                 * @type {Array<String>}
	                 */

	    get: function get() {
	      return delimiters;
	    },
	    set: function set(val) {
	      delimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  },
	  unsafeDelimiters: {
	    get: function get() {
	      return unsafeDelimiters;
	    },
	    set: function set(val) {
	      unsafeDelimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  }
	});

	var warn = undefined;
	var formatComponentName = undefined;

	if (true) {
	  (function () {
	    var hasConsole = typeof console !== 'undefined';

	    warn = function (msg, vm) {
	      if (hasConsole && !config.silent) {
	        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
	      }
	    };

	    formatComponentName = function (vm) {
	      var name = vm._isVue ? vm.$options.name : vm.name;
	      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
	    };
	  })();
	}

	/**
	 * Append with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */

	function appendWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    target.appendChild(el);
	  }, vm, cb);
	}

	/**
	 * InsertBefore with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */

	function beforeWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    before(el, target);
	  }, vm, cb);
	}

	/**
	 * Remove with transition.
	 *
	 * @param {Element} el
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */

	function removeWithTransition(el, vm, cb) {
	  applyTransition(el, -1, function () {
	    remove(el);
	  }, vm, cb);
	}

	/**
	 * Apply transitions with an operation callback.
	 *
	 * @param {Element} el
	 * @param {Number} direction
	 *                  1: enter
	 *                 -1: leave
	 * @param {Function} op - the actual DOM operation
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */

	function applyTransition(el, direction, op, vm, cb) {
	  var transition = el.__v_trans;
	  if (!transition ||
	  // skip if there are no js hooks and CSS transition is
	  // not supported
	  !transition.hooks && !transitionEndEvent ||
	  // skip transitions for initial compile
	  !vm._isCompiled ||
	  // if the vm is being manipulated by a parent directive
	  // during the parent's compilation phase, skip the
	  // animation.
	  vm.$parent && !vm.$parent._isCompiled) {
	    op();
	    if (cb) cb();
	    return;
	  }
	  var action = direction > 0 ? 'enter' : 'leave';
	  transition[action](op, cb);
	}

	var transition = Object.freeze({
	  appendWithTransition: appendWithTransition,
	  beforeWithTransition: beforeWithTransition,
	  removeWithTransition: removeWithTransition,
	  applyTransition: applyTransition
	});

	/**
	 * Query an element selector if it's not an element already.
	 *
	 * @param {String|Element} el
	 * @return {Element}
	 */

	function query(el) {
	  if (typeof el === 'string') {
	    var selector = el;
	    el = document.querySelector(el);
	    if (!el) {
	      ("development") !== 'production' && warn('Cannot find element: ' + selector);
	    }
	  }
	  return el;
	}

	/**
	 * Check if a node is in the document.
	 * Note: document.documentElement.contains should work here
	 * but always returns false for comment nodes in phantomjs,
	 * making unit tests difficult. This is fixed by doing the
	 * contains() check on the node's parentNode instead of
	 * the node itself.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */

	function inDoc(node) {
	  if (!node) return false;
	  var doc = node.ownerDocument.documentElement;
	  var parent = node.parentNode;
	  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
	}

	/**
	 * Get and remove an attribute from a node.
	 *
	 * @param {Node} node
	 * @param {String} _attr
	 */

	function getAttr(node, _attr) {
	  var val = node.getAttribute(_attr);
	  if (val !== null) {
	    node.removeAttribute(_attr);
	  }
	  return val;
	}

	/**
	 * Get an attribute with colon or v-bind: prefix.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {String|null}
	 */

	function getBindAttr(node, name) {
	  var val = getAttr(node, ':' + name);
	  if (val === null) {
	    val = getAttr(node, 'v-bind:' + name);
	  }
	  return val;
	}

	/**
	 * Check the presence of a bind attribute.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {Boolean}
	 */

	function hasBindAttr(node, name) {
	  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
	}

	/**
	 * Insert el before target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */

	function before(el, target) {
	  target.parentNode.insertBefore(el, target);
	}

	/**
	 * Insert el after target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */

	function after(el, target) {
	  if (target.nextSibling) {
	    before(el, target.nextSibling);
	  } else {
	    target.parentNode.appendChild(el);
	  }
	}

	/**
	 * Remove el from DOM
	 *
	 * @param {Element} el
	 */

	function remove(el) {
	  el.parentNode.removeChild(el);
	}

	/**
	 * Prepend el to target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */

	function prepend(el, target) {
	  if (target.firstChild) {
	    before(el, target.firstChild);
	  } else {
	    target.appendChild(el);
	  }
	}

	/**
	 * Replace target with el
	 *
	 * @param {Element} target
	 * @param {Element} el
	 */

	function replace(target, el) {
	  var parent = target.parentNode;
	  if (parent) {
	    parent.replaceChild(el, target);
	  }
	}

	/**
	 * Add event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 * @param {Boolean} [useCapture]
	 */

	function on(el, event, cb, useCapture) {
	  el.addEventListener(event, cb, useCapture);
	}

	/**
	 * Remove event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 */

	function off(el, event, cb) {
	  el.removeEventListener(event, cb);
	}

	/**
	 * For IE9 compat: when both class and :class are present
	 * getAttribute('class') returns wrong value...
	 *
	 * @param {Element} el
	 * @return {String}
	 */

	function getClass(el) {
	  var classname = el.className;
	  if (typeof classname === 'object') {
	    classname = classname.baseVal || '';
	  }
	  return classname;
	}

	/**
	 * In IE9, setAttribute('class') will result in empty class
	 * if the element also has the :class attribute; However in
	 * PhantomJS, setting `className` does not work on SVG elements...
	 * So we have to do a conditional check here.
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */

	function setClass(el, cls) {
	  /* istanbul ignore if */
	  if (isIE9 && !/svg$/.test(el.namespaceURI)) {
	    el.className = cls;
	  } else {
	    el.setAttribute('class', cls);
	  }
	}

	/**
	 * Add class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */

	function addClass(el, cls) {
	  if (el.classList) {
	    el.classList.add(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      setClass(el, (cur + cls).trim());
	    }
	  }
	}

	/**
	 * Remove class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */

	function removeClass(el, cls) {
	  if (el.classList) {
	    el.classList.remove(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    setClass(el, cur.trim());
	  }
	  if (!el.className) {
	    el.removeAttribute('class');
	  }
	}

	/**
	 * Extract raw content inside an element into a temporary
	 * container div
	 *
	 * @param {Element} el
	 * @param {Boolean} asFragment
	 * @return {Element|DocumentFragment}
	 */

	function extractContent(el, asFragment) {
	  var child;
	  var rawContent;
	  /* istanbul ignore if */
	  if (isTemplate(el) && isFragment(el.content)) {
	    el = el.content;
	  }
	  if (el.hasChildNodes()) {
	    trimNode(el);
	    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
	    /* eslint-disable no-cond-assign */
	    while (child = el.firstChild) {
	      /* eslint-enable no-cond-assign */
	      rawContent.appendChild(child);
	    }
	  }
	  return rawContent;
	}

	/**
	 * Trim possible empty head/tail text and comment
	 * nodes inside a parent.
	 *
	 * @param {Node} node
	 */

	function trimNode(node) {
	  var child;
	  /* eslint-disable no-sequences */
	  while ((child = node.firstChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  while ((child = node.lastChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  /* eslint-enable no-sequences */
	}

	function isTrimmable(node) {
	  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
	}

	/**
	 * Check if an element is a template tag.
	 * Note if the template appears inside an SVG its tagName
	 * will be in lowercase.
	 *
	 * @param {Element} el
	 */

	function isTemplate(el) {
	  return el.tagName && el.tagName.toLowerCase() === 'template';
	}

	/**
	 * Create an "anchor" for performing dom insertion/removals.
	 * This is used in a number of scenarios:
	 * - fragment instance
	 * - v-html
	 * - v-if
	 * - v-for
	 * - component
	 *
	 * @param {String} content
	 * @param {Boolean} persist - IE trashes empty textNodes on
	 *                            cloneNode(true), so in certain
	 *                            cases the anchor needs to be
	 *                            non-empty to be persisted in
	 *                            templates.
	 * @return {Comment|Text}
	 */

	function createAnchor(content, persist) {
	  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
	  anchor.__v_anchor = true;
	  return anchor;
	}

	/**
	 * Find a component ref attribute that starts with $.
	 *
	 * @param {Element} node
	 * @return {String|undefined}
	 */

	var refRE = /^v-ref:/;

	function findRef(node) {
	  if (node.hasAttributes()) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var name = attrs[i].name;
	      if (refRE.test(name)) {
	        return camelize(name.replace(refRE, ''));
	      }
	    }
	  }
	}

	/**
	 * Map a function to a range of nodes .
	 *
	 * @param {Node} node
	 * @param {Node} end
	 * @param {Function} op
	 */

	function mapNodeRange(node, end, op) {
	  var next;
	  while (node !== end) {
	    next = node.nextSibling;
	    op(node);
	    node = next;
	  }
	  op(end);
	}

	/**
	 * Remove a range of nodes with transition, store
	 * the nodes in a fragment with correct ordering,
	 * and call callback when done.
	 *
	 * @param {Node} start
	 * @param {Node} end
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Function} cb
	 */

	function removeNodeRange(start, end, vm, frag, cb) {
	  var done = false;
	  var removed = 0;
	  var nodes = [];
	  mapNodeRange(start, end, function (node) {
	    if (node === end) done = true;
	    nodes.push(node);
	    removeWithTransition(node, vm, onRemoved);
	  });
	  function onRemoved() {
	    removed++;
	    if (done && removed >= nodes.length) {
	      for (var i = 0; i < nodes.length; i++) {
	        frag.appendChild(nodes[i]);
	      }
	      cb && cb();
	    }
	  }
	}

	/**
	 * Check if a node is a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */

	function isFragment(node) {
	  return node && node.nodeType === 11;
	}

	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 *
	 * @param {Element} el
	 * @return {String}
	 */

	function getOuterHTML(el) {
	  if (el.outerHTML) {
	    return el.outerHTML;
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML;
	  }
	}

	var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
	var reservedTagRE = /^(slot|partial|component)$/i;

	var isUnknownElement = undefined;
	if (true) {
	  isUnknownElement = function (el, tag) {
	    if (tag.indexOf('-') > -1) {
	      // http://stackoverflow.com/a/28210364/1070244
	      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
	    } else {
	      return (/HTMLUnknownElement/.test(el.toString()) &&
	        // Chrome returns unknown for several HTML5 elements.
	        // https://code.google.com/p/chromium/issues/detail?id=540526
	        // Firefox returns unknown for some "Interactive elements."
	        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
	      );
	    }
	  };
	}

	/**
	 * Check if an element is a component, if yes return its
	 * component id.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */

	function checkComponentAttr(el, options) {
	  var tag = el.tagName.toLowerCase();
	  var hasAttrs = el.hasAttributes();
	  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
	    if (resolveAsset(options, 'components', tag)) {
	      return { id: tag };
	    } else {
	      var is = hasAttrs && getIsBinding(el, options);
	      if (is) {
	        return is;
	      } else if (true) {
	        var expectedTag = options._componentNameMap && options._componentNameMap[tag];
	        if (expectedTag) {
	          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
	        } else if (isUnknownElement(el, tag)) {
	          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
	        }
	      }
	    }
	  } else if (hasAttrs) {
	    return getIsBinding(el, options);
	  }
	}

	/**
	 * Get "is" binding from an element.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */

	function getIsBinding(el, options) {
	  // dynamic syntax
	  var exp = el.getAttribute('is');
	  if (exp != null) {
	    if (resolveAsset(options, 'components', exp)) {
	      el.removeAttribute('is');
	      return { id: exp };
	    }
	  } else {
	    exp = getBindAttr(el, 'is');
	    if (exp != null) {
	      return { id: exp, dynamic: true };
	    }
	  }
	}

	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 *
	 * All strategy functions follow the same signature:
	 *
	 * @param {*} parentVal
	 * @param {*} childVal
	 * @param {Vue} [vm]
	 */

	var strats = config.optionMergeStrategies = Object.create(null);

	/**
	 * Helper that recursively merges two data objects together.
	 */

	function mergeData(to, from) {
	  var key, toVal, fromVal;
	  for (key in from) {
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isObject(toVal) && isObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to;
	}

	/**
	 * Data
	 */

	strats.data = function (parentVal, childVal, vm) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal;
	    }
	    if (typeof childVal !== 'function') {
	      ("development") !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	      return parentVal;
	    }
	    if (!parentVal) {
	      return childVal;
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn() {
	      return mergeData(childVal.call(this), parentVal.call(this));
	    };
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn() {
	      // instance merge
	      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
	      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData);
	      } else {
	        return defaultData;
	      }
	    };
	  }
	};

	/**
	 * El
	 */

	strats.el = function (parentVal, childVal, vm) {
	  if (!vm && childVal && typeof childVal !== 'function') {
	    ("development") !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	    return;
	  }
	  var ret = childVal || parentVal;
	  // invoke the element factory if this is instance merge
	  return vm && typeof ret === 'function' ? ret.call(vm) : ret;
	};

	/**
	 * Hooks and param attributes are merged as arrays.
	 */

	strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
	  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
	};

	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */

	function mergeAssets(parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal ? extend(res, guardArrayAssets(childVal)) : res;
	}

	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});

	/**
	 * Events & Watchers.
	 *
	 * Events & watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */

	strats.watch = strats.events = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent ? parent.concat(child) : [child];
	  }
	  return ret;
	};

	/**
	 * Other object hashes.
	 */

	strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret;
	};

	/**
	 * Default strategy.
	 */

	var defaultStrat = function defaultStrat(parentVal, childVal) {
	  return childVal === undefined ? parentVal : childVal;
	};

	/**
	 * Make sure component options get converted to actual
	 * constructors.
	 *
	 * @param {Object} options
	 */

	function guardComponents(options) {
	  if (options.components) {
	    var components = options.components = guardArrayAssets(options.components);
	    var ids = Object.keys(components);
	    var def;
	    if (true) {
	      var map = options._componentNameMap = {};
	    }
	    for (var i = 0, l = ids.length; i < l; i++) {
	      var key = ids[i];
	      if (commonTagRE.test(key) || reservedTagRE.test(key)) {
	        ("development") !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
	        continue;
	      }
	      // record a all lowercase <-> kebab-case mapping for
	      // possible custom element case error warning
	      if (true) {
	        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
	      }
	      def = components[key];
	      if (isPlainObject(def)) {
	        components[key] = Vue.extend(def);
	      }
	    }
	  }
	}

	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 *
	 * @param {Object} options
	 */

	function guardProps(options) {
	  var props = options.props;
	  var i, val;
	  if (isArray(props)) {
	    options.props = {};
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        options.props[val] = null;
	      } else if (val.name) {
	        options.props[val.name] = val;
	      }
	    }
	  } else if (isPlainObject(props)) {
	    var keys = Object.keys(props);
	    i = keys.length;
	    while (i--) {
	      val = props[keys[i]];
	      if (typeof val === 'function') {
	        props[keys[i]] = { type: val };
	      }
	    }
	  }
	}

	/**
	 * Guard an Array-format assets option and converted it
	 * into the key-value Object format.
	 *
	 * @param {Object|Array} assets
	 * @return {Object}
	 */

	function guardArrayAssets(assets) {
	  if (isArray(assets)) {
	    var res = {};
	    var i = assets.length;
	    var asset;
	    while (i--) {
	      asset = assets[i];
	      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
	      if (!id) {
	        ("development") !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
	      } else {
	        res[id] = asset;
	      }
	    }
	    return res;
	  }
	  return assets;
	}

	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 *
	 * @param {Object} parent
	 * @param {Object} child
	 * @param {Vue} [vm] - if vm is present, indicates this is
	 *                     an instantiation merge.
	 */

	function mergeOptions(parent, child, vm) {
	  guardComponents(child);
	  guardProps(child);
	  if (true) {
	    if (child.propsData && !vm) {
	      warn('propsData can only be used as an instantiation option.');
	    }
	  }
	  var options = {};
	  var key;
	  if (child['extends']) {
	    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
	      parent = mergeOptions(parent, mixinOptions, vm);
	    }
	  }
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField(key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options;
	}

	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 *
	 * @param {Object} options
	 * @param {String} type
	 * @param {String} id
	 * @param {Boolean} warnMissing
	 * @return {Object|Function}
	 */

	function resolveAsset(options, type, id, warnMissing) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return;
	  }
	  var assets = options[type];
	  var camelizedId;
	  var res = assets[id] ||
	  // camelCase ID
	  assets[camelizedId = camelize(id)] ||
	  // Pascal Case ID
	  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
	  if (("development") !== 'production' && warnMissing && !res) {
	    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
	  }
	  return res;
	}

	var uid$1 = 0;

	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 *
	 * @constructor
	 */
	function Dep() {
	  this.id = uid$1++;
	  this.subs = [];
	}

	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;

	/**
	 * Add a directive subscriber.
	 *
	 * @param {Directive} sub
	 */

	Dep.prototype.addSub = function (sub) {
	  this.subs.push(sub);
	};

	/**
	 * Remove a directive subscriber.
	 *
	 * @param {Directive} sub
	 */

	Dep.prototype.removeSub = function (sub) {
	  this.subs.$remove(sub);
	};

	/**
	 * Add self as a dependency to the target watcher.
	 */

	Dep.prototype.depend = function () {
	  Dep.target.addDep(this);
	};

	/**
	 * Notify all subscribers of a new value.
	 */

	Dep.prototype.notify = function () {
	  // stablize the subscriber list first
	  var subs = toArray(this.subs);
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};

	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto)

	/**
	 * Intercept mutating methods and emit events
	 */

	;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator() {
	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break;
	      case 'unshift':
	        inserted = args;
	        break;
	      case 'splice':
	        inserted = args.slice(2);
	        break;
	    }
	    if (inserted) ob.observeArray(inserted);
	    // notify change
	    ob.dep.notify();
	    return result;
	  });
	});

	/**
	 * Swap the element at the given index with a new value
	 * and emits corresponding event.
	 *
	 * @param {Number} index
	 * @param {*} val
	 * @return {*} - replaced element
	 */

	def(arrayProto, '$set', function $set(index, val) {
	  if (index >= this.length) {
	    this.length = Number(index) + 1;
	  }
	  return this.splice(index, 1, val)[0];
	});

	/**
	 * Convenience method to remove the element at given index or target element reference.
	 *
	 * @param {*} item
	 */

	def(arrayProto, '$remove', function $remove(item) {
	  /* istanbul ignore if */
	  if (!this.length) return;
	  var index = indexOf(this, item);
	  if (index > -1) {
	    return this.splice(index, 1);
	  }
	});

	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However in certain cases, e.g.
	 * v-for scope alias and props, we don't want to force conversion
	 * because the value may be a nested value under a frozen data structure.
	 *
	 * So whenever we want to set a reactive property without forcing
	 * conversion on the new value, we wrap that call inside this function.
	 */

	var shouldConvert = true;

	function withoutConversion(fn) {
	  shouldConvert = false;
	  fn();
	  shouldConvert = true;
	}

	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 *
	 * @param {Array|Object} value
	 * @constructor
	 */

	function Observer(value) {
	  this.value = value;
	  this.dep = new Dep();
	  def(value, '__ob__', this);
	  if (isArray(value)) {
	    var augment = hasProto ? protoAugment : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	}

	// Instance methods

	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 *
	 * @param {Object} obj
	 */

	Observer.prototype.walk = function (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    this.convert(keys[i], obj[keys[i]]);
	  }
	};

	/**
	 * Observe a list of Array items.
	 *
	 * @param {Array} items
	 */

	Observer.prototype.observeArray = function (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};

	/**
	 * Convert a property into getter/setter so we can emit
	 * the events when the property is accessed/changed.
	 *
	 * @param {String} key
	 * @param {*} val
	 */

	Observer.prototype.convert = function (key, val) {
	  defineReactive(this.value, key, val);
	};

	/**
	 * Add an owner vm, so that when $set/$delete mutations
	 * happen we can notify owner vms to proxy the keys and
	 * digest the watchers. This is only called when the object
	 * is observed as an instance's root $data.
	 *
	 * @param {Vue} vm
	 */

	Observer.prototype.addVm = function (vm) {
	  (this.vms || (this.vms = [])).push(vm);
	};

	/**
	 * Remove an owner vm. This is called when the object is
	 * swapped out as an instance's $data object.
	 *
	 * @param {Vue} vm
	 */

	Observer.prototype.removeVm = function (vm) {
	  this.vms.$remove(vm);
	};

	// helpers

	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 *
	 * @param {Object|Array} target
	 * @param {Object} src
	 */

	function protoAugment(target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}

	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 *
	 * @param {Object|Array} target
	 * @param {Object} proto
	 */

	function copyAugment(target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}

	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 *
	 * @param {*} value
	 * @param {Vue} [vm]
	 * @return {Observer|undefined}
	 * @static
	 */

	function observe(value, vm) {
	  if (!value || typeof value !== 'object') {
	    return;
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
	    ob = new Observer(value);
	  }
	  if (ob && vm) {
	    ob.addVm(vm);
	  }
	  return ob;
	}

	/**
	 * Define a reactive property on an Object.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 */

	function defineReactive(obj, key, val) {
	  var dep = new Dep();

	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return;
	  }

	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;

	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter() {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (isArray(value)) {
	          for (var e, i = 0, l = value.length; i < l; i++) {
	            e = value[i];
	            e && e.__ob__ && e.__ob__.dep.depend();
	          }
	        }
	      }
	      return value;
	    },
	    set: function reactiveSetter(newVal) {
	      var value = getter ? getter.call(obj) : val;
	      if (newVal === value) {
	        return;
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}



	var util = Object.freeze({
		defineReactive: defineReactive,
		set: set,
		del: del,
		hasOwn: hasOwn,
		isLiteral: isLiteral,
		isReserved: isReserved,
		_toString: _toString,
		toNumber: toNumber,
		toBoolean: toBoolean,
		stripQuotes: stripQuotes,
		camelize: camelize,
		hyphenate: hyphenate,
		classify: classify,
		bind: bind,
		toArray: toArray,
		extend: extend,
		isObject: isObject,
		isPlainObject: isPlainObject,
		def: def,
		debounce: _debounce,
		indexOf: indexOf,
		cancellable: cancellable,
		looseEqual: looseEqual,
		isArray: isArray,
		hasProto: hasProto,
		inBrowser: inBrowser,
		devtools: devtools,
		isIE: isIE,
		isIE9: isIE9,
		isAndroid: isAndroid,
		isIos: isIos,
		iosVersionMatch: iosVersionMatch,
		iosVersion: iosVersion,
		hasMutationObserverBug: hasMutationObserverBug,
		get transitionProp () { return transitionProp; },
		get transitionEndEvent () { return transitionEndEvent; },
		get animationProp () { return animationProp; },
		get animationEndEvent () { return animationEndEvent; },
		nextTick: nextTick,
		get _Set () { return _Set; },
		query: query,
		inDoc: inDoc,
		getAttr: getAttr,
		getBindAttr: getBindAttr,
		hasBindAttr: hasBindAttr,
		before: before,
		after: after,
		remove: remove,
		prepend: prepend,
		replace: replace,
		on: on,
		off: off,
		setClass: setClass,
		addClass: addClass,
		removeClass: removeClass,
		extractContent: extractContent,
		trimNode: trimNode,
		isTemplate: isTemplate,
		createAnchor: createAnchor,
		findRef: findRef,
		mapNodeRange: mapNodeRange,
		removeNodeRange: removeNodeRange,
		isFragment: isFragment,
		getOuterHTML: getOuterHTML,
		mergeOptions: mergeOptions,
		resolveAsset: resolveAsset,
		checkComponentAttr: checkComponentAttr,
		commonTagRE: commonTagRE,
		reservedTagRE: reservedTagRE,
		get warn () { return warn; }
	});

	var uid = 0;

	function initMixin (Vue) {
	  /**
	   * The main init sequence. This is called for every
	   * instance, including ones that are created from extended
	   * constructors.
	   *
	   * @param {Object} options - this options object should be
	   *                           the result of merging class
	   *                           options and the options passed
	   *                           in to the constructor.
	   */

	  Vue.prototype._init = function (options) {
	    options = options || {};

	    this.$el = null;
	    this.$parent = options.parent;
	    this.$root = this.$parent ? this.$parent.$root : this;
	    this.$children = [];
	    this.$refs = {}; // child vm references
	    this.$els = {}; // element references
	    this._watchers = []; // all watchers as an array
	    this._directives = []; // all directives

	    // a uid
	    this._uid = uid++;

	    // a flag to avoid this being observed
	    this._isVue = true;

	    // events bookkeeping
	    this._events = {}; // registered callbacks
	    this._eventsCount = {}; // for $broadcast optimization

	    // fragment instance properties
	    this._isFragment = false;
	    this._fragment = // @type {DocumentFragment}
	    this._fragmentStart = // @type {Text|Comment}
	    this._fragmentEnd = null; // @type {Text|Comment}

	    // lifecycle state
	    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
	    this._unlinkFn = null;

	    // context:
	    // if this is a transcluded component, context
	    // will be the common parent vm of this instance
	    // and its host.
	    this._context = options._context || this.$parent;

	    // scope:
	    // if this is inside an inline v-for, the scope
	    // will be the intermediate scope created for this
	    // repeat fragment. this is used for linking props
	    // and container directives.
	    this._scope = options._scope;

	    // fragment:
	    // if this instance is compiled inside a Fragment, it
	    // needs to reigster itself as a child of that fragment
	    // for attach/detach to work properly.
	    this._frag = options._frag;
	    if (this._frag) {
	      this._frag.children.push(this);
	    }

	    // push self into parent / transclusion host
	    if (this.$parent) {
	      this.$parent.$children.push(this);
	    }

	    // merge options.
	    options = this.$options = mergeOptions(this.constructor.options, options, this);

	    // set ref
	    this._updateRef();

	    // initialize data as empty object.
	    // it will be filled up in _initData().
	    this._data = {};

	    // call init hook
	    this._callHook('init');

	    // initialize data observation and scope inheritance.
	    this._initState();

	    // setup event system and option events.
	    this._initEvents();

	    // call created hook
	    this._callHook('created');

	    // if `el` option is passed, start compilation.
	    if (options.el) {
	      this.$mount(options.el);
	    }
	  };
	}

	var pathCache = new Cache(1000);

	// actions
	var APPEND = 0;
	var PUSH = 1;
	var INC_SUB_PATH_DEPTH = 2;
	var PUSH_SUB_PATH = 3;

	// states
	var BEFORE_PATH = 0;
	var IN_PATH = 1;
	var BEFORE_IDENT = 2;
	var IN_IDENT = 3;
	var IN_SUB_PATH = 4;
	var IN_SINGLE_QUOTE = 5;
	var IN_DOUBLE_QUOTE = 6;
	var AFTER_PATH = 7;
	var ERROR = 8;

	var pathStateMachine = [];

	pathStateMachine[BEFORE_PATH] = {
	  'ws': [BEFORE_PATH],
	  'ident': [IN_IDENT, APPEND],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};

	pathStateMachine[IN_PATH] = {
	  'ws': [IN_PATH],
	  '.': [BEFORE_IDENT],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};

	pathStateMachine[BEFORE_IDENT] = {
	  'ws': [BEFORE_IDENT],
	  'ident': [IN_IDENT, APPEND]
	};

	pathStateMachine[IN_IDENT] = {
	  'ident': [IN_IDENT, APPEND],
	  '0': [IN_IDENT, APPEND],
	  'number': [IN_IDENT, APPEND],
	  'ws': [IN_PATH, PUSH],
	  '.': [BEFORE_IDENT, PUSH],
	  '[': [IN_SUB_PATH, PUSH],
	  'eof': [AFTER_PATH, PUSH]
	};

	pathStateMachine[IN_SUB_PATH] = {
	  "'": [IN_SINGLE_QUOTE, APPEND],
	  '"': [IN_DOUBLE_QUOTE, APPEND],
	  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
	  ']': [IN_PATH, PUSH_SUB_PATH],
	  'eof': ERROR,
	  'else': [IN_SUB_PATH, APPEND]
	};

	pathStateMachine[IN_SINGLE_QUOTE] = {
	  "'": [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_SINGLE_QUOTE, APPEND]
	};

	pathStateMachine[IN_DOUBLE_QUOTE] = {
	  '"': [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_DOUBLE_QUOTE, APPEND]
	};

	/**
	 * Determine the type of a character in a keypath.
	 *
	 * @param {Char} ch
	 * @return {String} type
	 */

	function getPathCharType(ch) {
	  if (ch === undefined) {
	    return 'eof';
	  }

	  var code = ch.charCodeAt(0);

	  switch (code) {
	    case 0x5B: // [
	    case 0x5D: // ]
	    case 0x2E: // .
	    case 0x22: // "
	    case 0x27: // '
	    case 0x30:
	      // 0
	      return ch;

	    case 0x5F: // _
	    case 0x24:
	      // $
	      return 'ident';

	    case 0x20: // Space
	    case 0x09: // Tab
	    case 0x0A: // Newline
	    case 0x0D: // Return
	    case 0xA0: // No-break space
	    case 0xFEFF: // Byte Order Mark
	    case 0x2028: // Line Separator
	    case 0x2029:
	      // Paragraph Separator
	      return 'ws';
	  }

	  // a-z, A-Z
	  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
	    return 'ident';
	  }

	  // 1-9
	  if (code >= 0x31 && code <= 0x39) {
	    return 'number';
	  }

	  return 'else';
	}

	/**
	 * Format a subPath, return its plain form if it is
	 * a literal string or number. Otherwise prepend the
	 * dynamic indicator (*).
	 *
	 * @param {String} path
	 * @return {String}
	 */

	function formatSubPath(path) {
	  var trimmed = path.trim();
	  // invalid leading 0
	  if (path.charAt(0) === '0' && isNaN(path)) {
	    return false;
	  }
	  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
	}

	/**
	 * Parse a string path into an array of segments
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */

	function parse(path) {
	  var keys = [];
	  var index = -1;
	  var mode = BEFORE_PATH;
	  var subPathDepth = 0;
	  var c, newChar, key, type, transition, action, typeMap;

	  var actions = [];

	  actions[PUSH] = function () {
	    if (key !== undefined) {
	      keys.push(key);
	      key = undefined;
	    }
	  };

	  actions[APPEND] = function () {
	    if (key === undefined) {
	      key = newChar;
	    } else {
	      key += newChar;
	    }
	  };

	  actions[INC_SUB_PATH_DEPTH] = function () {
	    actions[APPEND]();
	    subPathDepth++;
	  };

	  actions[PUSH_SUB_PATH] = function () {
	    if (subPathDepth > 0) {
	      subPathDepth--;
	      mode = IN_SUB_PATH;
	      actions[APPEND]();
	    } else {
	      subPathDepth = 0;
	      key = formatSubPath(key);
	      if (key === false) {
	        return false;
	      } else {
	        actions[PUSH]();
	      }
	    }
	  };

	  function maybeUnescapeQuote() {
	    var nextChar = path[index + 1];
	    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
	      index++;
	      newChar = '\\' + nextChar;
	      actions[APPEND]();
	      return true;
	    }
	  }

	  while (mode != null) {
	    index++;
	    c = path[index];

	    if (c === '\\' && maybeUnescapeQuote()) {
	      continue;
	    }

	    type = getPathCharType(c);
	    typeMap = pathStateMachine[mode];
	    transition = typeMap[type] || typeMap['else'] || ERROR;

	    if (transition === ERROR) {
	      return; // parse error
	    }

	    mode = transition[0];
	    action = actions[transition[1]];
	    if (action) {
	      newChar = transition[2];
	      newChar = newChar === undefined ? c : newChar;
	      if (action() === false) {
	        return;
	      }
	    }

	    if (mode === AFTER_PATH) {
	      keys.raw = path;
	      return keys;
	    }
	  }
	}

	/**
	 * External parse that check for a cache hit first
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */

	function parsePath(path) {
	  var hit = pathCache.get(path);
	  if (!hit) {
	    hit = parse(path);
	    if (hit) {
	      pathCache.put(path, hit);
	    }
	  }
	  return hit;
	}

	/**
	 * Get from an object from a path string
	 *
	 * @param {Object} obj
	 * @param {String} path
	 */

	function getPath(obj, path) {
	  return parseExpression(path).get(obj);
	}

	/**
	 * Warn against setting non-existent root path on a vm.
	 */

	var warnNonExistent;
	if (true) {
	  warnNonExistent = function (path, vm) {
	    warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
	  };
	}

	/**
	 * Set on an object from a path
	 *
	 * @param {Object} obj
	 * @param {String | Array} path
	 * @param {*} val
	 */

	function setPath(obj, path, val) {
	  var original = obj;
	  if (typeof path === 'string') {
	    path = parse(path);
	  }
	  if (!path || !isObject(obj)) {
	    return false;
	  }
	  var last, key;
	  for (var i = 0, l = path.length; i < l; i++) {
	    last = obj;
	    key = path[i];
	    if (key.charAt(0) === '*') {
	      key = parseExpression(key.slice(1)).get.call(original, original);
	    }
	    if (i < l - 1) {
	      obj = obj[key];
	      if (!isObject(obj)) {
	        obj = {};
	        if (("development") !== 'production' && last._isVue) {
	          warnNonExistent(path, last);
	        }
	        set(last, key, obj);
	      }
	    } else {
	      if (isArray(obj)) {
	        obj.$set(key, val);
	      } else if (key in obj) {
	        obj[key] = val;
	      } else {
	        if (("development") !== 'production' && obj._isVue) {
	          warnNonExistent(path, obj);
	        }
	        set(obj, key, val);
	      }
	    }
	  }
	  return true;
	}

	var path = Object.freeze({
	  parsePath: parsePath,
	  getPath: getPath,
	  setPath: setPath
	});

	var expressionCache = new Cache(1000);

	var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
	var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');

	// keywords that don't make sense inside expressions
	var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
	var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');

	var wsRE = /\s/g;
	var newlineRE = /\n/g;
	var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
	var restoreRE = /"(\d+)"/g;
	var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
	var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
	var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;

	function noop() {}

	/**
	 * Save / Rewrite / Restore
	 *
	 * When rewriting paths found in an expression, it is
	 * possible for the same letter sequences to be found in
	 * strings and Object literal property keys. Therefore we
	 * remove and store these parts in a temporary array, and
	 * restore them after the path rewrite.
	 */

	var saved = [];

	/**
	 * Save replacer
	 *
	 * The save regex can match two possible cases:
	 * 1. An opening object literal
	 * 2. A string
	 * If matched as a plain string, we need to escape its
	 * newlines, since the string needs to be preserved when
	 * generating the function body.
	 *
	 * @param {String} str
	 * @param {String} isString - str if matched as a string
	 * @return {String} - placeholder with index
	 */

	function save(str, isString) {
	  var i = saved.length;
	  saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
	  return '"' + i + '"';
	}

	/**
	 * Path rewrite replacer
	 *
	 * @param {String} raw
	 * @return {String}
	 */

	function rewrite(raw) {
	  var c = raw.charAt(0);
	  var path = raw.slice(1);
	  if (allowedKeywordsRE.test(path)) {
	    return raw;
	  } else {
	    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
	    return c + 'scope.' + path;
	  }
	}

	/**
	 * Restore replacer
	 *
	 * @param {String} str
	 * @param {String} i - matched save index
	 * @return {String}
	 */

	function restore(str, i) {
	  return saved[i];
	}

	/**
	 * Rewrite an expression, prefixing all path accessors with
	 * `scope.` and generate getter/setter functions.
	 *
	 * @param {String} exp
	 * @return {Function}
	 */

	function compileGetter(exp) {
	  if (improperKeywordsRE.test(exp)) {
	    ("development") !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
	  }
	  // reset state
	  saved.length = 0;
	  // save strings and object literal keys
	  var body = exp.replace(saveRE, save).replace(wsRE, '');
	  // rewrite all paths
	  // pad 1 space here because the regex matches 1 extra char
	  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
	  return makeGetterFn(body);
	}

	/**
	 * Build a getter function. Requires eval.
	 *
	 * We isolate the try/catch so it doesn't affect the
	 * optimization of the parse function when it is not called.
	 *
	 * @param {String} body
	 * @return {Function|undefined}
	 */

	function makeGetterFn(body) {
	  try {
	    /* eslint-disable no-new-func */
	    return new Function('scope', 'return ' + body + ';');
	    /* eslint-enable no-new-func */
	  } catch (e) {
	    if (true) {
	      /* istanbul ignore if */
	      if (e.toString().match(/unsafe-eval|CSP/)) {
	        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
	      } else {
	        warn('Invalid expression. ' + 'Generated function body: ' + body);
	      }
	    }
	    return noop;
	  }
	}

	/**
	 * Compile a setter function for the expression.
	 *
	 * @param {String} exp
	 * @return {Function|undefined}
	 */

	function compileSetter(exp) {
	  var path = parsePath(exp);
	  if (path) {
	    return function (scope, val) {
	      setPath(scope, path, val);
	    };
	  } else {
	    ("development") !== 'production' && warn('Invalid setter expression: ' + exp);
	  }
	}

	/**
	 * Parse an expression into re-written getter/setters.
	 *
	 * @param {String} exp
	 * @param {Boolean} needSet
	 * @return {Function}
	 */

	function parseExpression(exp, needSet) {
	  exp = exp.trim();
	  // try cache
	  var hit = expressionCache.get(exp);
	  if (hit) {
	    if (needSet && !hit.set) {
	      hit.set = compileSetter(hit.exp);
	    }
	    return hit;
	  }
	  var res = { exp: exp };
	  res.get = isSimplePath(exp) && exp.indexOf('[') < 0
	  // optimized super simple getter
	  ? makeGetterFn('scope.' + exp)
	  // dynamic getter
	  : compileGetter(exp);
	  if (needSet) {
	    res.set = compileSetter(exp);
	  }
	  expressionCache.put(exp, res);
	  return res;
	}

	/**
	 * Check if an expression is a simple path.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */

	function isSimplePath(exp) {
	  return pathTestRE.test(exp) &&
	  // don't treat literal values as paths
	  !literalValueRE$1.test(exp) &&
	  // Math constants e.g. Math.PI, Math.E etc.
	  exp.slice(0, 5) !== 'Math.';
	}

	var expression = Object.freeze({
	  parseExpression: parseExpression,
	  isSimplePath: isSimplePath
	});

	// we have two separate queues: one for directive updates
	// and one for user watcher registered via $watch().
	// we want to guarantee directive updates to be called
	// before user watchers so that when user watchers are
	// triggered, the DOM would have already been in updated
	// state.

	var queue = [];
	var userQueue = [];
	var has = {};
	var circular = {};
	var waiting = false;

	/**
	 * Reset the batcher's state.
	 */

	function resetBatcherState() {
	  queue.length = 0;
	  userQueue.length = 0;
	  has = {};
	  circular = {};
	  waiting = false;
	}

	/**
	 * Flush both queues and run the watchers.
	 */

	function flushBatcherQueue() {
	  var _again = true;

	  _function: while (_again) {
	    _again = false;

	    runBatcherQueue(queue);
	    runBatcherQueue(userQueue);
	    // user watchers triggered more watchers,
	    // keep flushing until it depletes
	    if (queue.length) {
	      _again = true;
	      continue _function;
	    }
	    // dev tool hook
	    /* istanbul ignore if */
	    if (devtools && config.devtools) {
	      devtools.emit('flush');
	    }
	    resetBatcherState();
	  }
	}

	/**
	 * Run the watchers in a single queue.
	 *
	 * @param {Array} queue
	 */

	function runBatcherQueue(queue) {
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (var i = 0; i < queue.length; i++) {
	    var watcher = queue[i];
	    var id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (("development") !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
	        break;
	      }
	    }
	  }
	  queue.length = 0;
	}

	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 *
	 * @param {Watcher} watcher
	 *   properties:
	 *   - {Number} id
	 *   - {Function} run
	 */

	function pushWatcher(watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    // push watcher into appropriate queue
	    var q = watcher.user ? userQueue : queue;
	    has[id] = q.length;
	    q.push(watcher);
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushBatcherQueue);
	    }
	  }
	}

	var uid$2 = 0;

	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 *
	 * @param {Vue} vm
	 * @param {String|Function} expOrFn
	 * @param {Function} cb
	 * @param {Object} options
	 *                 - {Array} filters
	 *                 - {Boolean} twoWay
	 *                 - {Boolean} deep
	 *                 - {Boolean} user
	 *                 - {Boolean} sync
	 *                 - {Boolean} lazy
	 *                 - {Function} [preProcess]
	 *                 - {Function} [postProcess]
	 * @constructor
	 */
	function Watcher(vm, expOrFn, cb, options) {
	  // mix in options
	  if (options) {
	    extend(this, options);
	  }
	  var isFn = typeof expOrFn === 'function';
	  this.vm = vm;
	  vm._watchers.push(this);
	  this.expression = expOrFn;
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.prevError = null; // for async error stacks
	  // parse expression for getter/setter
	  if (isFn) {
	    this.getter = expOrFn;
	    this.setter = undefined;
	  } else {
	    var res = parseExpression(expOrFn, this.twoWay);
	    this.getter = res.get;
	    this.setter = res.set;
	  }
	  this.value = this.lazy ? undefined : this.get();
	  // state for avoiding false triggers for deep and Array
	  // watchers during vm._digest()
	  this.queued = this.shallow = false;
	}

	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */

	Watcher.prototype.get = function () {
	  this.beforeGet();
	  var scope = this.scope || this.vm;
	  var value;
	  try {
	    value = this.getter.call(scope, scope);
	  } catch (e) {
	    if (("development") !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  if (this.preProcess) {
	    value = this.preProcess(value);
	  }
	  if (this.filters) {
	    value = scope._applyFilters(value, null, this.filters, false);
	  }
	  if (this.postProcess) {
	    value = this.postProcess(value);
	  }
	  this.afterGet();
	  return value;
	};

	/**
	 * Set the corresponding value with the setter.
	 *
	 * @param {*} value
	 */

	Watcher.prototype.set = function (value) {
	  var scope = this.scope || this.vm;
	  if (this.filters) {
	    value = scope._applyFilters(value, this.value, this.filters, true);
	  }
	  try {
	    this.setter.call(scope, scope, value);
	  } catch (e) {
	    if (("development") !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // two-way sync for v-for alias
	  var forContext = scope.$forContext;
	  if (forContext && forContext.alias === this.expression) {
	    if (forContext.filters) {
	      ("development") !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
	      return;
	    }
	    forContext._withLock(function () {
	      if (scope.$key) {
	        // original is an object
	        forContext.rawValue[scope.$key] = value;
	      } else {
	        forContext.rawValue.$set(scope.$index, value);
	      }
	    });
	  }
	};

	/**
	 * Prepare for dependency collection.
	 */

	Watcher.prototype.beforeGet = function () {
	  Dep.target = this;
	};

	/**
	 * Add a dependency to this directive.
	 *
	 * @param {Dep} dep
	 */

	Watcher.prototype.addDep = function (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};

	/**
	 * Clean up for dependency collection.
	 */

	Watcher.prototype.afterGet = function () {
	  Dep.target = null;
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this.deps[i];
	    if (!this.newDepIds.has(dep.id)) {
	      dep.removeSub(this);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};

	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 *
	 * @param {Boolean} shallow
	 */

	Watcher.prototype.update = function (shallow) {
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync || !config.async) {
	    this.run();
	  } else {
	    // if queued, only overwrite shallow with non-shallow,
	    // but not the other way around.
	    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
	    this.queued = true;
	    // record before-push error stack in debug mode
	    /* istanbul ignore if */
	    if (("development") !== 'production' && config.debug) {
	      this.prevError = new Error('[vue] async stack trace');
	    }
	    pushWatcher(this);
	  }
	};

	/**
	 * Batcher job interface.
	 * Will be called by the batcher.
	 */

	Watcher.prototype.run = function () {
	  if (this.active) {
	    var value = this.get();
	    if (value !== this.value ||
	    // Deep watchers and watchers on Object/Arrays should fire even
	    // when the value is the same, because the value may
	    // have mutated; but only do so if this is a
	    // non-shallow update (caused by a vm digest).
	    (isObject(value) || this.deep) && !this.shallow) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      // in debug + async mode, when a watcher callbacks
	      // throws, we also throw the saved before-push error
	      // so the full cross-tick stack trace is available.
	      var prevError = this.prevError;
	      /* istanbul ignore if */
	      if (("development") !== 'production' && config.debug && prevError) {
	        this.prevError = null;
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          nextTick(function () {
	            throw prevError;
	          }, 0);
	          throw e;
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	    this.queued = this.shallow = false;
	  }
	};

	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */

	Watcher.prototype.evaluate = function () {
	  // avoid overwriting another watcher that is being
	  // collected.
	  var current = Dep.target;
	  this.value = this.get();
	  this.dirty = false;
	  Dep.target = current;
	};

	/**
	 * Depend on all deps collected by this watcher.
	 */

	Watcher.prototype.depend = function () {
	  var i = this.deps.length;
	  while (i--) {
	    this.deps[i].depend();
	  }
	};

	/**
	 * Remove self from all dependencies' subcriber list.
	 */

	Watcher.prototype.teardown = function () {
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed or is performing a v-for
	    // re-render (the watcher list is then filtered by v-for).
	    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
	      this.vm._watchers.$remove(this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this.deps[i].removeSub(this);
	    }
	    this.active = false;
	    this.vm = this.cb = this.value = null;
	  }
	};

	/**
	 * Recrusively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 *
	 * @param {*} val
	 */

	var seenObjects = new _Set();
	function traverse(val, seen) {
	  var i = undefined,
	      keys = undefined;
	  if (!seen) {
	    seen = seenObjects;
	    seen.clear();
	  }
	  var isA = isArray(val);
	  var isO = isObject(val);
	  if ((isA || isO) && Object.isExtensible(val)) {
	    if (val.__ob__) {
	      var depId = val.__ob__.dep.id;
	      if (seen.has(depId)) {
	        return;
	      } else {
	        seen.add(depId);
	      }
	    }
	    if (isA) {
	      i = val.length;
	      while (i--) traverse(val[i], seen);
	    } else if (isO) {
	      keys = Object.keys(val);
	      i = keys.length;
	      while (i--) traverse(val[keys[i]], seen);
	    }
	  }
	}

	var text$1 = {

	  bind: function bind() {
	    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
	  },

	  update: function update(value) {
	    this.el[this.attr] = _toString(value);
	  }
	};

	var templateCache = new Cache(1000);
	var idSelectorCache = new Cache(1000);

	var map = {
	  efault: [0, '', ''],
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
	};

	map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];

	map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];

	map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];

	/**
	 * Check if a node is a supported template node with a
	 * DocumentFragment content.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */

	function isRealTemplate(node) {
	  return isTemplate(node) && isFragment(node.content);
	}

	var tagRE$1 = /<([\w:-]+)/;
	var entityRE = /&#?\w+?;/;
	var commentRE = /<!--/;

	/**
	 * Convert a string template to a DocumentFragment.
	 * Determines correct wrapping by tag types. Wrapping
	 * strategy found in jQuery & component/domify.
	 *
	 * @param {String} templateString
	 * @param {Boolean} raw
	 * @return {DocumentFragment}
	 */

	function stringToFragment(templateString, raw) {
	  // try a cache hit first
	  var cacheKey = raw ? templateString : templateString.trim();
	  var hit = templateCache.get(cacheKey);
	  if (hit) {
	    return hit;
	  }

	  var frag = document.createDocumentFragment();
	  var tagMatch = templateString.match(tagRE$1);
	  var entityMatch = entityRE.test(templateString);
	  var commentMatch = commentRE.test(templateString);

	  if (!tagMatch && !entityMatch && !commentMatch) {
	    // text only, return a single text node.
	    frag.appendChild(document.createTextNode(templateString));
	  } else {
	    var tag = tagMatch && tagMatch[1];
	    var wrap = map[tag] || map.efault;
	    var depth = wrap[0];
	    var prefix = wrap[1];
	    var suffix = wrap[2];
	    var node = document.createElement('div');

	    node.innerHTML = prefix + templateString + suffix;
	    while (depth--) {
	      node = node.lastChild;
	    }

	    var child;
	    /* eslint-disable no-cond-assign */
	    while (child = node.firstChild) {
	      /* eslint-enable no-cond-assign */
	      frag.appendChild(child);
	    }
	  }
	  if (!raw) {
	    trimNode(frag);
	  }
	  templateCache.put(cacheKey, frag);
	  return frag;
	}

	/**
	 * Convert a template node to a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {DocumentFragment}
	 */

	function nodeToFragment(node) {
	  // if its a template tag and the browser supports it,
	  // its content is already a document fragment. However, iOS Safari has
	  // bug when using directly cloned template content with touch
	  // events and can cause crashes when the nodes are removed from DOM, so we
	  // have to treat template elements as string templates. (#2805)
	  /* istanbul ignore if */
	  if (isRealTemplate(node)) {
	    return stringToFragment(node.innerHTML);
	  }
	  // script template
	  if (node.tagName === 'SCRIPT') {
	    return stringToFragment(node.textContent);
	  }
	  // normal node, clone it to avoid mutating the original
	  var clonedNode = cloneNode(node);
	  var frag = document.createDocumentFragment();
	  var child;
	  /* eslint-disable no-cond-assign */
	  while (child = clonedNode.firstChild) {
	    /* eslint-enable no-cond-assign */
	    frag.appendChild(child);
	  }
	  trimNode(frag);
	  return frag;
	}

	// Test for the presence of the Safari template cloning bug
	// https://bugs.webkit.org/showug.cgi?id=137755
	var hasBrokenTemplate = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var a = document.createElement('div');
	    a.innerHTML = '<template>1</template>';
	    return !a.cloneNode(true).firstChild.innerHTML;
	  } else {
	    return false;
	  }
	})();

	// Test for IE10/11 textarea placeholder clone bug
	var hasTextareaCloneBug = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var t = document.createElement('textarea');
	    t.placeholder = 't';
	    return t.cloneNode(true).value === 't';
	  } else {
	    return false;
	  }
	})();

	/**
	 * 1. Deal with Safari cloning nested <template> bug by
	 *    manually cloning all template instances.
	 * 2. Deal with IE10/11 textarea placeholder bug by setting
	 *    the correct value after cloning.
	 *
	 * @param {Element|DocumentFragment} node
	 * @return {Element|DocumentFragment}
	 */

	function cloneNode(node) {
	  /* istanbul ignore if */
	  if (!node.querySelectorAll) {
	    return node.cloneNode();
	  }
	  var res = node.cloneNode(true);
	  var i, original, cloned;
	  /* istanbul ignore if */
	  if (hasBrokenTemplate) {
	    var tempClone = res;
	    if (isRealTemplate(node)) {
	      node = node.content;
	      tempClone = res.content;
	    }
	    original = node.querySelectorAll('template');
	    if (original.length) {
	      cloned = tempClone.querySelectorAll('template');
	      i = cloned.length;
	      while (i--) {
	        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
	      }
	    }
	  }
	  /* istanbul ignore if */
	  if (hasTextareaCloneBug) {
	    if (node.tagName === 'TEXTAREA') {
	      res.value = node.value;
	    } else {
	      original = node.querySelectorAll('textarea');
	      if (original.length) {
	        cloned = res.querySelectorAll('textarea');
	        i = cloned.length;
	        while (i--) {
	          cloned[i].value = original[i].value;
	        }
	      }
	    }
	  }
	  return res;
	}

	/**
	 * Process the template option and normalizes it into a
	 * a DocumentFragment that can be used as a partial or a
	 * instance template.
	 *
	 * @param {*} template
	 *        Possible values include:
	 *        - DocumentFragment object
	 *        - Node object of type Template
	 *        - id selector: '#some-template-id'
	 *        - template string: '<div><span>{{msg}}</span></div>'
	 * @param {Boolean} shouldClone
	 * @param {Boolean} raw
	 *        inline HTML interpolation. Do not check for id
	 *        selector and keep whitespace in the string.
	 * @return {DocumentFragment|undefined}
	 */

	function parseTemplate(template, shouldClone, raw) {
	  var node, frag;

	  // if the template is already a document fragment,
	  // do nothing
	  if (isFragment(template)) {
	    trimNode(template);
	    return shouldClone ? cloneNode(template) : template;
	  }

	  if (typeof template === 'string') {
	    // id selector
	    if (!raw && template.charAt(0) === '#') {
	      // id selector can be cached too
	      frag = idSelectorCache.get(template);
	      if (!frag) {
	        node = document.getElementById(template.slice(1));
	        if (node) {
	          frag = nodeToFragment(node);
	          // save selector to cache
	          idSelectorCache.put(template, frag);
	        }
	      }
	    } else {
	      // normal string template
	      frag = stringToFragment(template, raw);
	    }
	  } else if (template.nodeType) {
	    // a direct node
	    frag = nodeToFragment(template);
	  }

	  return frag && shouldClone ? cloneNode(frag) : frag;
	}

	var template = Object.freeze({
	  cloneNode: cloneNode,
	  parseTemplate: parseTemplate
	});

	var html = {

	  bind: function bind() {
	    // a comment node means this is a binding for
	    // {{{ inline unescaped html }}}
	    if (this.el.nodeType === 8) {
	      // hold nodes
	      this.nodes = [];
	      // replace the placeholder with proper anchor
	      this.anchor = createAnchor('v-html');
	      replace(this.el, this.anchor);
	    }
	  },

	  update: function update(value) {
	    value = _toString(value);
	    if (this.nodes) {
	      this.swap(value);
	    } else {
	      this.el.innerHTML = value;
	    }
	  },

	  swap: function swap(value) {
	    // remove old nodes
	    var i = this.nodes.length;
	    while (i--) {
	      remove(this.nodes[i]);
	    }
	    // convert new value to a fragment
	    // do not attempt to retrieve from id selector
	    var frag = parseTemplate(value, true, true);
	    // save a reference to these nodes so we can remove later
	    this.nodes = toArray(frag.childNodes);
	    before(frag, this.anchor);
	  }
	};

	/**
	 * Abstraction for a partially-compiled fragment.
	 * Can optionally compile content with a child scope.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Vue} [host]
	 * @param {Object} [scope]
	 * @param {Fragment} [parentFrag]
	 */
	function Fragment(linker, vm, frag, host, scope, parentFrag) {
	  this.children = [];
	  this.childFrags = [];
	  this.vm = vm;
	  this.scope = scope;
	  this.inserted = false;
	  this.parentFrag = parentFrag;
	  if (parentFrag) {
	    parentFrag.childFrags.push(this);
	  }
	  this.unlink = linker(vm, frag, host, scope, this);
	  var single = this.single = frag.childNodes.length === 1 &&
	  // do not go single mode if the only node is an anchor
	  !frag.childNodes[0].__v_anchor;
	  if (single) {
	    this.node = frag.childNodes[0];
	    this.before = singleBefore;
	    this.remove = singleRemove;
	  } else {
	    this.node = createAnchor('fragment-start');
	    this.end = createAnchor('fragment-end');
	    this.frag = frag;
	    prepend(this.node, frag);
	    frag.appendChild(this.end);
	    this.before = multiBefore;
	    this.remove = multiRemove;
	  }
	  this.node.__v_frag = this;
	}

	/**
	 * Call attach/detach for all components contained within
	 * this fragment. Also do so recursively for all child
	 * fragments.
	 *
	 * @param {Function} hook
	 */

	Fragment.prototype.callHook = function (hook) {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    this.childFrags[i].callHook(hook);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    hook(this.children[i]);
	  }
	};

	/**
	 * Insert fragment before target, single node version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */

	function singleBefore(target, withTransition) {
	  this.inserted = true;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  method(this.node, target, this.vm);
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}

	/**
	 * Remove fragment, single node version
	 */

	function singleRemove() {
	  this.inserted = false;
	  var shouldCallRemove = inDoc(this.node);
	  var self = this;
	  this.beforeRemove();
	  removeWithTransition(this.node, this.vm, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}

	/**
	 * Insert fragment before target, multi-nodes version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */

	function multiBefore(target, withTransition) {
	  this.inserted = true;
	  var vm = this.vm;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  mapNodeRange(this.node, this.end, function (node) {
	    method(node, target, vm);
	  });
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}

	/**
	 * Remove fragment, multi-nodes version
	 */

	function multiRemove() {
	  this.inserted = false;
	  var self = this;
	  var shouldCallRemove = inDoc(this.node);
	  this.beforeRemove();
	  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}

	/**
	 * Prepare the fragment for removal.
	 */

	Fragment.prototype.beforeRemove = function () {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    // call the same method recursively on child
	    // fragments, depth-first
	    this.childFrags[i].beforeRemove(false);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    // Call destroy for all contained instances,
	    // with remove:false and defer:true.
	    // Defer is necessary because we need to
	    // keep the children to call detach hooks
	    // on them.
	    this.children[i].$destroy(false, true);
	  }
	  var dirs = this.unlink.dirs;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    // disable the watchers on all the directives
	    // so that the rendered content stays the same
	    // during removal.
	    dirs[i]._watcher && dirs[i]._watcher.teardown();
	  }
	};

	/**
	 * Destroy the fragment.
	 */

	Fragment.prototype.destroy = function () {
	  if (this.parentFrag) {
	    this.parentFrag.childFrags.$remove(this);
	  }
	  this.node.__v_frag = null;
	  this.unlink();
	};

	/**
	 * Call attach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */

	function attach(child) {
	  if (!child._isAttached && inDoc(child.$el)) {
	    child._callHook('attached');
	  }
	}

	/**
	 * Call detach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */

	function detach(child) {
	  if (child._isAttached && !inDoc(child.$el)) {
	    child._callHook('detached');
	  }
	}

	var linkerCache = new Cache(5000);

	/**
	 * A factory that can be used to create instances of a
	 * fragment. Caches the compiled linker if possible.
	 *
	 * @param {Vue} vm
	 * @param {Element|String} el
	 */
	function FragmentFactory(vm, el) {
	  this.vm = vm;
	  var template;
	  var isString = typeof el === 'string';
	  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
	    template = parseTemplate(el, true);
	  } else {
	    template = document.createDocumentFragment();
	    template.appendChild(el);
	  }
	  this.template = template;
	  // linker can be cached, but only for components
	  var linker;
	  var cid = vm.constructor.cid;
	  if (cid > 0) {
	    var cacheId = cid + (isString ? el : getOuterHTML(el));
	    linker = linkerCache.get(cacheId);
	    if (!linker) {
	      linker = compile(template, vm.$options, true);
	      linkerCache.put(cacheId, linker);
	    }
	  } else {
	    linker = compile(template, vm.$options, true);
	  }
	  this.linker = linker;
	}

	/**
	 * Create a fragment instance with given host and scope.
	 *
	 * @param {Vue} host
	 * @param {Object} scope
	 * @param {Fragment} parentFrag
	 */

	FragmentFactory.prototype.create = function (host, scope, parentFrag) {
	  var frag = cloneNode(this.template);
	  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
	};

	var ON = 700;
	var MODEL = 800;
	var BIND = 850;
	var TRANSITION = 1100;
	var EL = 1500;
	var COMPONENT = 1500;
	var PARTIAL = 1750;
	var IF = 2100;
	var FOR = 2200;
	var SLOT = 2300;

	var uid$3 = 0;

	var vFor = {

	  priority: FOR,
	  terminal: true,

	  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],

	  bind: function bind() {
	    // support "item in/of items" syntax
	    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
	    if (inMatch) {
	      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
	      if (itMatch) {
	        this.iterator = itMatch[1].trim();
	        this.alias = itMatch[2].trim();
	      } else {
	        this.alias = inMatch[1].trim();
	      }
	      this.expression = inMatch[2];
	    }

	    if (!this.alias) {
	      ("development") !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
	      return;
	    }

	    // uid as a cache identifier
	    this.id = '__v-for__' + ++uid$3;

	    // check if this is an option list,
	    // so that we know if we need to update the <select>'s
	    // v-model when the option list has changed.
	    // because v-model has a lower priority than v-for,
	    // the v-model is not bound here yet, so we have to
	    // retrive it in the actual updateModel() function.
	    var tag = this.el.tagName;
	    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';

	    // setup anchor nodes
	    this.start = createAnchor('v-for-start');
	    this.end = createAnchor('v-for-end');
	    replace(this.el, this.end);
	    before(this.start, this.end);

	    // cache
	    this.cache = Object.create(null);

	    // fragment factory
	    this.factory = new FragmentFactory(this.vm, this.el);
	  },

	  update: function update(data) {
	    this.diff(data);
	    this.updateRef();
	    this.updateModel();
	  },

	  /**
	   * Diff, based on new data and old data, determine the
	   * minimum amount of DOM manipulations needed to make the
	   * DOM reflect the new data Array.
	   *
	   * The algorithm diffs the new data Array by storing a
	   * hidden reference to an owner vm instance on previously
	   * seen data. This allows us to achieve O(n) which is
	   * better than a levenshtein distance based algorithm,
	   * which is O(m * n).
	   *
	   * @param {Array} data
	   */

	  diff: function diff(data) {
	    // check if the Array was converted from an Object
	    var item = data[0];
	    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');

	    var trackByKey = this.params.trackBy;
	    var oldFrags = this.frags;
	    var frags = this.frags = new Array(data.length);
	    var alias = this.alias;
	    var iterator = this.iterator;
	    var start = this.start;
	    var end = this.end;
	    var inDocument = inDoc(start);
	    var init = !oldFrags;
	    var i, l, frag, key, value, primitive;

	    // First pass, go through the new Array and fill up
	    // the new frags array. If a piece of data has a cached
	    // instance for it, we reuse it. Otherwise build a new
	    // instance.
	    for (i = 0, l = data.length; i < l; i++) {
	      item = data[i];
	      key = convertedFromObject ? item.$key : null;
	      value = convertedFromObject ? item.$value : item;
	      primitive = !isObject(value);
	      frag = !init && this.getCachedFrag(value, i, key);
	      if (frag) {
	        // reusable fragment
	        frag.reused = true;
	        // update $index
	        frag.scope.$index = i;
	        // update $key
	        if (key) {
	          frag.scope.$key = key;
	        }
	        // update iterator
	        if (iterator) {
	          frag.scope[iterator] = key !== null ? key : i;
	        }
	        // update data for track-by, object repeat &
	        // primitive values.
	        if (trackByKey || convertedFromObject || primitive) {
	          withoutConversion(function () {
	            frag.scope[alias] = value;
	          });
	        }
	      } else {
	        // new isntance
	        frag = this.create(value, alias, i, key);
	        frag.fresh = !init;
	      }
	      frags[i] = frag;
	      if (init) {
	        frag.before(end);
	      }
	    }

	    // we're done for the initial render.
	    if (init) {
	      return;
	    }

	    // Second pass, go through the old fragments and
	    // destroy those who are not reused (and remove them
	    // from cache)
	    var removalIndex = 0;
	    var totalRemoved = oldFrags.length - frags.length;
	    // when removing a large number of fragments, watcher removal
	    // turns out to be a perf bottleneck, so we batch the watcher
	    // removals into a single filter call!
	    this.vm._vForRemoving = true;
	    for (i = 0, l = oldFrags.length; i < l; i++) {
	      frag = oldFrags[i];
	      if (!frag.reused) {
	        this.deleteCachedFrag(frag);
	        this.remove(frag, removalIndex++, totalRemoved, inDocument);
	      }
	    }
	    this.vm._vForRemoving = false;
	    if (removalIndex) {
	      this.vm._watchers = this.vm._watchers.filter(function (w) {
	        return w.active;
	      });
	    }

	    // Final pass, move/insert new fragments into the
	    // right place.
	    var targetPrev, prevEl, currentPrev;
	    var insertionIndex = 0;
	    for (i = 0, l = frags.length; i < l; i++) {
	      frag = frags[i];
	      // this is the frag that we should be after
	      targetPrev = frags[i - 1];
	      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
	      if (frag.reused && !frag.staggerCb) {
	        currentPrev = findPrevFrag(frag, start, this.id);
	        if (currentPrev !== targetPrev && (!currentPrev ||
	        // optimization for moving a single item.
	        // thanks to suggestions by @livoras in #1807
	        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
	          this.move(frag, prevEl);
	        }
	      } else {
	        // new instance, or still in stagger.
	        // insert with updated stagger index.
	        this.insert(frag, insertionIndex++, prevEl, inDocument);
	      }
	      frag.reused = frag.fresh = false;
	    }
	  },

	  /**
	   * Create a new fragment instance.
	   *
	   * @param {*} value
	   * @param {String} alias
	   * @param {Number} index
	   * @param {String} [key]
	   * @return {Fragment}
	   */

	  create: function create(value, alias, index, key) {
	    var host = this._host;
	    // create iteration scope
	    var parentScope = this._scope || this.vm;
	    var scope = Object.create(parentScope);
	    // ref holder for the scope
	    scope.$refs = Object.create(parentScope.$refs);
	    scope.$els = Object.create(parentScope.$els);
	    // make sure point $parent to parent scope
	    scope.$parent = parentScope;
	    // for two-way binding on alias
	    scope.$forContext = this;
	    // define scope properties
	    // important: define the scope alias without forced conversion
	    // so that frozen data structures remain non-reactive.
	    withoutConversion(function () {
	      defineReactive(scope, alias, value);
	    });
	    defineReactive(scope, '$index', index);
	    if (key) {
	      defineReactive(scope, '$key', key);
	    } else if (scope.$key) {
	      // avoid accidental fallback
	      def(scope, '$key', null);
	    }
	    if (this.iterator) {
	      defineReactive(scope, this.iterator, key !== null ? key : index);
	    }
	    var frag = this.factory.create(host, scope, this._frag);
	    frag.forId = this.id;
	    this.cacheFrag(value, frag, index, key);
	    return frag;
	  },

	  /**
	   * Update the v-ref on owner vm.
	   */

	  updateRef: function updateRef() {
	    var ref = this.descriptor.ref;
	    if (!ref) return;
	    var hash = (this._scope || this.vm).$refs;
	    var refs;
	    if (!this.fromObject) {
	      refs = this.frags.map(findVmFromFrag);
	    } else {
	      refs = {};
	      this.frags.forEach(function (frag) {
	        refs[frag.scope.$key] = findVmFromFrag(frag);
	      });
	    }
	    hash[ref] = refs;
	  },

	  /**
	   * For option lists, update the containing v-model on
	   * parent <select>.
	   */

	  updateModel: function updateModel() {
	    if (this.isOption) {
	      var parent = this.start.parentNode;
	      var model = parent && parent.__v_model;
	      if (model) {
	        model.forceUpdate();
	      }
	    }
	  },

	  /**
	   * Insert a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Node} prevEl
	   * @param {Boolean} inDocument
	   */

	  insert: function insert(frag, index, prevEl, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	    }
	    var staggerAmount = this.getStagger(frag, index, null, 'enter');
	    if (inDocument && staggerAmount) {
	      // create an anchor and insert it synchronously,
	      // so that we can resolve the correct order without
	      // worrying about some elements not inserted yet
	      var anchor = frag.staggerAnchor;
	      if (!anchor) {
	        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
	        anchor.__v_frag = frag;
	      }
	      after(anchor, prevEl);
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.before(anchor);
	        remove(anchor);
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      var target = prevEl.nextSibling;
	      /* istanbul ignore if */
	      if (!target) {
	        // reset end anchor position in case the position was messed up
	        // by an external drag-n-drop library.
	        after(this.end, prevEl);
	        target = this.end;
	      }
	      frag.before(target);
	    }
	  },

	  /**
	   * Remove a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {Boolean} inDocument
	   */

	  remove: function remove(frag, index, total, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	      // it's not possible for the same frag to be removed
	      // twice, so if we have a pending stagger callback,
	      // it means this frag is queued for enter but removed
	      // before its transition started. Since it is already
	      // destroyed, we can just leave it in detached state.
	      return;
	    }
	    var staggerAmount = this.getStagger(frag, index, total, 'leave');
	    if (inDocument && staggerAmount) {
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.remove();
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      frag.remove();
	    }
	  },

	  /**
	   * Move a fragment to a new position.
	   * Force no transition.
	   *
	   * @param {Fragment} frag
	   * @param {Node} prevEl
	   */

	  move: function move(frag, prevEl) {
	    // fix a common issue with Sortable:
	    // if prevEl doesn't have nextSibling, this means it's
	    // been dragged after the end anchor. Just re-position
	    // the end anchor to the end of the container.
	    /* istanbul ignore if */
	    if (!prevEl.nextSibling) {
	      this.end.parentNode.appendChild(this.end);
	    }
	    frag.before(prevEl.nextSibling, false);
	  },

	  /**
	   * Cache a fragment using track-by or the object key.
	   *
	   * @param {*} value
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {String} [key]
	   */

	  cacheFrag: function cacheFrag(value, frag, index, key) {
	    var trackByKey = this.params.trackBy;
	    var cache = this.cache;
	    var primitive = !isObject(value);
	    var id;
	    if (key || trackByKey || primitive) {
	      id = getTrackByKey(index, key, value, trackByKey);
	      if (!cache[id]) {
	        cache[id] = frag;
	      } else if (trackByKey !== '$index') {
	        ("development") !== 'production' && this.warnDuplicate(value);
	      }
	    } else {
	      id = this.id;
	      if (hasOwn(value, id)) {
	        if (value[id] === null) {
	          value[id] = frag;
	        } else {
	          ("development") !== 'production' && this.warnDuplicate(value);
	        }
	      } else if (Object.isExtensible(value)) {
	        def(value, id, frag);
	      } else if (true) {
	        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
	      }
	    }
	    frag.raw = value;
	  },

	  /**
	   * Get a cached fragment from the value/index/key
	   *
	   * @param {*} value
	   * @param {Number} index
	   * @param {String} key
	   * @return {Fragment}
	   */

	  getCachedFrag: function getCachedFrag(value, index, key) {
	    var trackByKey = this.params.trackBy;
	    var primitive = !isObject(value);
	    var frag;
	    if (key || trackByKey || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      frag = this.cache[id];
	    } else {
	      frag = value[this.id];
	    }
	    if (frag && (frag.reused || frag.fresh)) {
	      ("development") !== 'production' && this.warnDuplicate(value);
	    }
	    return frag;
	  },

	  /**
	   * Delete a fragment from cache.
	   *
	   * @param {Fragment} frag
	   */

	  deleteCachedFrag: function deleteCachedFrag(frag) {
	    var value = frag.raw;
	    var trackByKey = this.params.trackBy;
	    var scope = frag.scope;
	    var index = scope.$index;
	    // fix #948: avoid accidentally fall through to
	    // a parent repeater which happens to have $key.
	    var key = hasOwn(scope, '$key') && scope.$key;
	    var primitive = !isObject(value);
	    if (trackByKey || key || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      this.cache[id] = null;
	    } else {
	      value[this.id] = null;
	      frag.raw = null;
	    }
	  },

	  /**
	   * Get the stagger amount for an insertion/removal.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {String} type
	   */

	  getStagger: function getStagger(frag, index, total, type) {
	    type = type + 'Stagger';
	    var trans = frag.node.__v_trans;
	    var hooks = trans && trans.hooks;
	    var hook = hooks && (hooks[type] || hooks.stagger);
	    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
	  },

	  /**
	   * Pre-process the value before piping it through the
	   * filters. This is passed to and called by the watcher.
	   */

	  _preProcess: function _preProcess(value) {
	    // regardless of type, store the un-filtered raw value.
	    this.rawValue = value;
	    return value;
	  },

	  /**
	   * Post-process the value after it has been piped through
	   * the filters. This is passed to and called by the watcher.
	   *
	   * It is necessary for this to be called during the
	   * watcher's dependency collection phase because we want
	   * the v-for to update when the source Object is mutated.
	   */

	  _postProcess: function _postProcess(value) {
	    if (isArray(value)) {
	      return value;
	    } else if (isPlainObject(value)) {
	      // convert plain object to array.
	      var keys = Object.keys(value);
	      var i = keys.length;
	      var res = new Array(i);
	      var key;
	      while (i--) {
	        key = keys[i];
	        res[i] = {
	          $key: key,
	          $value: value[key]
	        };
	      }
	      return res;
	    } else {
	      if (typeof value === 'number' && !isNaN(value)) {
	        value = range(value);
	      }
	      return value || [];
	    }
	  },

	  unbind: function unbind() {
	    if (this.descriptor.ref) {
	      (this._scope || this.vm).$refs[this.descriptor.ref] = null;
	    }
	    if (this.frags) {
	      var i = this.frags.length;
	      var frag;
	      while (i--) {
	        frag = this.frags[i];
	        this.deleteCachedFrag(frag);
	        frag.destroy();
	      }
	    }
	  }
	};

	/**
	 * Helper to find the previous element that is a fragment
	 * anchor. This is necessary because a destroyed frag's
	 * element could still be lingering in the DOM before its
	 * leaving transition finishes, but its inserted flag
	 * should have been set to false so we can skip them.
	 *
	 * If this is a block repeat, we want to make sure we only
	 * return frag that is bound to this v-for. (see #929)
	 *
	 * @param {Fragment} frag
	 * @param {Comment|Text} anchor
	 * @param {String} id
	 * @return {Fragment}
	 */

	function findPrevFrag(frag, anchor, id) {
	  var el = frag.node.previousSibling;
	  /* istanbul ignore if */
	  if (!el) return;
	  frag = el.__v_frag;
	  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
	    el = el.previousSibling;
	    /* istanbul ignore if */
	    if (!el) return;
	    frag = el.__v_frag;
	  }
	  return frag;
	}

	/**
	 * Find a vm from a fragment.
	 *
	 * @param {Fragment} frag
	 * @return {Vue|undefined}
	 */

	function findVmFromFrag(frag) {
	  var node = frag.node;
	  // handle multi-node frag
	  if (frag.end) {
	    while (!node.__vue__ && node !== frag.end && node.nextSibling) {
	      node = node.nextSibling;
	    }
	  }
	  return node.__vue__;
	}

	/**
	 * Create a range array from given number.
	 *
	 * @param {Number} n
	 * @return {Array}
	 */

	function range(n) {
	  var i = -1;
	  var ret = new Array(Math.floor(n));
	  while (++i < n) {
	    ret[i] = i;
	  }
	  return ret;
	}

	/**
	 * Get the track by key for an item.
	 *
	 * @param {Number} index
	 * @param {String} key
	 * @param {*} value
	 * @param {String} [trackByKey]
	 */

	function getTrackByKey(index, key, value, trackByKey) {
	  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
	}

	if (true) {
	  vFor.warnDuplicate = function (value) {
	    warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
	  };
	}

	var vIf = {

	  priority: IF,
	  terminal: true,

	  bind: function bind() {
	    var el = this.el;
	    if (!el.__vue__) {
	      // check else block
	      var next = el.nextElementSibling;
	      if (next && getAttr(next, 'v-else') !== null) {
	        remove(next);
	        this.elseEl = next;
	      }
	      // check main block
	      this.anchor = createAnchor('v-if');
	      replace(el, this.anchor);
	    } else {
	      ("development") !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
	      this.invalid = true;
	    }
	  },

	  update: function update(value) {
	    if (this.invalid) return;
	    if (value) {
	      if (!this.frag) {
	        this.insert();
	      }
	    } else {
	      this.remove();
	    }
	  },

	  insert: function insert() {
	    if (this.elseFrag) {
	      this.elseFrag.remove();
	      this.elseFrag = null;
	    }
	    // lazy init factory
	    if (!this.factory) {
	      this.factory = new FragmentFactory(this.vm, this.el);
	    }
	    this.frag = this.factory.create(this._host, this._scope, this._frag);
	    this.frag.before(this.anchor);
	  },

	  remove: function remove() {
	    if (this.frag) {
	      this.frag.remove();
	      this.frag = null;
	    }
	    if (this.elseEl && !this.elseFrag) {
	      if (!this.elseFactory) {
	        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
	      }
	      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
	      this.elseFrag.before(this.anchor);
	    }
	  },

	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	    if (this.elseFrag) {
	      this.elseFrag.destroy();
	    }
	  }
	};

	var show = {

	  bind: function bind() {
	    // check else block
	    var next = this.el.nextElementSibling;
	    if (next && getAttr(next, 'v-else') !== null) {
	      this.elseEl = next;
	    }
	  },

	  update: function update(value) {
	    this.apply(this.el, value);
	    if (this.elseEl) {
	      this.apply(this.elseEl, !value);
	    }
	  },

	  apply: function apply(el, value) {
	    if (inDoc(el)) {
	      applyTransition(el, value ? 1 : -1, toggle, this.vm);
	    } else {
	      toggle();
	    }
	    function toggle() {
	      el.style.display = value ? '' : 'none';
	    }
	  }
	};

	var text$2 = {

	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	    var isRange = el.type === 'range';
	    var lazy = this.params.lazy;
	    var number = this.params.number;
	    var debounce = this.params.debounce;

	    // handle composition events.
	    //   http://blog.evanyou.me/2014/01/03/composition-event/
	    // skip this for Android because it handles composition
	    // events quite differently. Android doesn't trigger
	    // composition events for language input methods e.g.
	    // Chinese, but instead triggers them for spelling
	    // suggestions... (see Discussion/#162)
	    var composing = false;
	    if (!isAndroid && !isRange) {
	      this.on('compositionstart', function () {
	        composing = true;
	      });
	      this.on('compositionend', function () {
	        composing = false;
	        // in IE11 the "compositionend" event fires AFTER
	        // the "input" event, so the input handler is blocked
	        // at the end... have to call it here.
	        //
	        // #1327: in lazy mode this is unecessary.
	        if (!lazy) {
	          self.listener();
	        }
	      });
	    }

	    // prevent messing with the input when user is typing,
	    // and force update on blur.
	    this.focused = false;
	    if (!isRange && !lazy) {
	      this.on('focus', function () {
	        self.focused = true;
	      });
	      this.on('blur', function () {
	        self.focused = false;
	        // do not sync value after fragment removal (#2017)
	        if (!self._frag || self._frag.inserted) {
	          self.rawListener();
	        }
	      });
	    }

	    // Now attach the main listener
	    this.listener = this.rawListener = function () {
	      if (composing || !self._bound) {
	        return;
	      }
	      var val = number || isRange ? toNumber(el.value) : el.value;
	      self.set(val);
	      // force update on next tick to avoid lock & same value
	      // also only update when user is not typing
	      nextTick(function () {
	        if (self._bound && !self.focused) {
	          self.update(self._watcher.value);
	        }
	      });
	    };

	    // apply debounce
	    if (debounce) {
	      this.listener = _debounce(this.listener, debounce);
	    }

	    // Support jQuery events, since jQuery.trigger() doesn't
	    // trigger native events in some cases and some plugins
	    // rely on $.trigger()
	    //
	    // We want to make sure if a listener is attached using
	    // jQuery, it is also removed with jQuery, that's why
	    // we do the check for each directive instance and
	    // store that check result on itself. This also allows
	    // easier test coverage control by unsetting the global
	    // jQuery variable in tests.
	    this.hasjQuery = typeof jQuery === 'function';
	    if (this.hasjQuery) {
	      var method = jQuery.fn.on ? 'on' : 'bind';
	      jQuery(el)[method]('change', this.rawListener);
	      if (!lazy) {
	        jQuery(el)[method]('input', this.listener);
	      }
	    } else {
	      this.on('change', this.rawListener);
	      if (!lazy) {
	        this.on('input', this.listener);
	      }
	    }

	    // IE9 doesn't fire input event on backspace/del/cut
	    if (!lazy && isIE9) {
	      this.on('cut', function () {
	        nextTick(self.listener);
	      });
	      this.on('keyup', function (e) {
	        if (e.keyCode === 46 || e.keyCode === 8) {
	          self.listener();
	        }
	      });
	    }

	    // set initial value if present
	    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
	      this.afterBind = this.listener;
	    }
	  },

	  update: function update(value) {
	    // #3029 only update when the value changes. This prevent
	    // browsers from overwriting values like selectionStart
	    value = _toString(value);
	    if (value !== this.el.value) this.el.value = value;
	  },

	  unbind: function unbind() {
	    var el = this.el;
	    if (this.hasjQuery) {
	      var method = jQuery.fn.off ? 'off' : 'unbind';
	      jQuery(el)[method]('change', this.listener);
	      jQuery(el)[method]('input', this.listener);
	    }
	  }
	};

	var radio = {

	  bind: function bind() {
	    var self = this;
	    var el = this.el;

	    this.getValue = function () {
	      // value overwrite via v-bind:value
	      if (el.hasOwnProperty('_value')) {
	        return el._value;
	      }
	      var val = el.value;
	      if (self.params.number) {
	        val = toNumber(val);
	      }
	      return val;
	    };

	    this.listener = function () {
	      self.set(self.getValue());
	    };
	    this.on('change', this.listener);

	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },

	  update: function update(value) {
	    this.el.checked = looseEqual(value, this.getValue());
	  }
	};

	var select = {

	  bind: function bind() {
	    var _this = this;

	    var self = this;
	    var el = this.el;

	    // method to force update DOM using latest value.
	    this.forceUpdate = function () {
	      if (self._watcher) {
	        self.update(self._watcher.get());
	      }
	    };

	    // check if this is a multiple select
	    var multiple = this.multiple = el.hasAttribute('multiple');

	    // attach listener
	    this.listener = function () {
	      var value = getValue(el, multiple);
	      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
	      self.set(value);
	    };
	    this.on('change', this.listener);

	    // if has initial value, set afterBind
	    var initValue = getValue(el, multiple, true);
	    if (multiple && initValue.length || !multiple && initValue !== null) {
	      this.afterBind = this.listener;
	    }

	    // All major browsers except Firefox resets
	    // selectedIndex with value -1 to 0 when the element
	    // is appended to a new parent, therefore we have to
	    // force a DOM update whenever that happens...
	    this.vm.$on('hook:attached', function () {
	      nextTick(_this.forceUpdate);
	    });
	    if (!inDoc(el)) {
	      nextTick(this.forceUpdate);
	    }
	  },

	  update: function update(value) {
	    var el = this.el;
	    el.selectedIndex = -1;
	    var multi = this.multiple && isArray(value);
	    var options = el.options;
	    var i = options.length;
	    var op, val;
	    while (i--) {
	      op = options[i];
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      /* eslint-disable eqeqeq */
	      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
	      /* eslint-enable eqeqeq */
	    }
	  },

	  unbind: function unbind() {
	    /* istanbul ignore next */
	    this.vm.$off('hook:attached', this.forceUpdate);
	  }
	};

	/**
	 * Get select value
	 *
	 * @param {SelectElement} el
	 * @param {Boolean} multi
	 * @param {Boolean} init
	 * @return {Array|*}
	 */

	function getValue(el, multi, init) {
	  var res = multi ? [] : null;
	  var op, val, selected;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    op = el.options[i];
	    selected = init ? op.hasAttribute('selected') : op.selected;
	    if (selected) {
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      if (multi) {
	        res.push(val);
	      } else {
	        return val;
	      }
	    }
	  }
	  return res;
	}

	/**
	 * Native Array.indexOf uses strict equal, but in this
	 * case we need to match string/numbers with custom equal.
	 *
	 * @param {Array} arr
	 * @param {*} val
	 */

	function indexOf$1(arr, val) {
	  var i = arr.length;
	  while (i--) {
	    if (looseEqual(arr[i], val)) {
	      return i;
	    }
	  }
	  return -1;
	}

	var checkbox = {

	  bind: function bind() {
	    var self = this;
	    var el = this.el;

	    this.getValue = function () {
	      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
	    };

	    function getBooleanValue() {
	      var val = el.checked;
	      if (val && el.hasOwnProperty('_trueValue')) {
	        return el._trueValue;
	      }
	      if (!val && el.hasOwnProperty('_falseValue')) {
	        return el._falseValue;
	      }
	      return val;
	    }

	    this.listener = function () {
	      var model = self._watcher.value;
	      if (isArray(model)) {
	        var val = self.getValue();
	        if (el.checked) {
	          if (indexOf(model, val) < 0) {
	            model.push(val);
	          }
	        } else {
	          model.$remove(val);
	        }
	      } else {
	        self.set(getBooleanValue());
	      }
	    };

	    this.on('change', this.listener);
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },

	  update: function update(value) {
	    var el = this.el;
	    if (isArray(value)) {
	      el.checked = indexOf(value, this.getValue()) > -1;
	    } else {
	      if (el.hasOwnProperty('_trueValue')) {
	        el.checked = looseEqual(value, el._trueValue);
	      } else {
	        el.checked = !!value;
	      }
	    }
	  }
	};

	var handlers = {
	  text: text$2,
	  radio: radio,
	  select: select,
	  checkbox: checkbox
	};

	var model = {

	  priority: MODEL,
	  twoWay: true,
	  handlers: handlers,
	  params: ['lazy', 'number', 'debounce'],

	  /**
	   * Possible elements:
	   *   <select>
	   *   <textarea>
	   *   <input type="*">
	   *     - text
	   *     - checkbox
	   *     - radio
	   *     - number
	   */

	  bind: function bind() {
	    // friendly warning...
	    this.checkFilters();
	    if (this.hasRead && !this.hasWrite) {
	      ("development") !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
	    }
	    var el = this.el;
	    var tag = el.tagName;
	    var handler;
	    if (tag === 'INPUT') {
	      handler = handlers[el.type] || handlers.text;
	    } else if (tag === 'SELECT') {
	      handler = handlers.select;
	    } else if (tag === 'TEXTAREA') {
	      handler = handlers.text;
	    } else {
	      ("development") !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
	      return;
	    }
	    el.__v_model = this;
	    handler.bind.call(this);
	    this.update = handler.update;
	    this._unbind = handler.unbind;
	  },

	  /**
	   * Check read/write filter stats.
	   */

	  checkFilters: function checkFilters() {
	    var filters = this.filters;
	    if (!filters) return;
	    var i = filters.length;
	    while (i--) {
	      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
	      if (typeof filter === 'function' || filter.read) {
	        this.hasRead = true;
	      }
	      if (filter.write) {
	        this.hasWrite = true;
	      }
	    }
	  },

	  unbind: function unbind() {
	    this.el.__v_model = null;
	    this._unbind && this._unbind();
	  }
	};

	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  'delete': [8, 46],
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40
	};

	function keyFilter(handler, keys) {
	  var codes = keys.map(function (key) {
	    var charCode = key.charCodeAt(0);
	    if (charCode > 47 && charCode < 58) {
	      return parseInt(key, 10);
	    }
	    if (key.length === 1) {
	      charCode = key.toUpperCase().charCodeAt(0);
	      if (charCode > 64 && charCode < 91) {
	        return charCode;
	      }
	    }
	    return keyCodes[key];
	  });
	  codes = [].concat.apply([], codes);
	  return function keyHandler(e) {
	    if (codes.indexOf(e.keyCode) > -1) {
	      return handler.call(this, e);
	    }
	  };
	}

	function stopFilter(handler) {
	  return function stopHandler(e) {
	    e.stopPropagation();
	    return handler.call(this, e);
	  };
	}

	function preventFilter(handler) {
	  return function preventHandler(e) {
	    e.preventDefault();
	    return handler.call(this, e);
	  };
	}

	function selfFilter(handler) {
	  return function selfHandler(e) {
	    if (e.target === e.currentTarget) {
	      return handler.call(this, e);
	    }
	  };
	}

	var on$1 = {

	  priority: ON,
	  acceptStatement: true,
	  keyCodes: keyCodes,

	  bind: function bind() {
	    // deal with iframes
	    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
	      var self = this;
	      this.iframeBind = function () {
	        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
	      };
	      this.on('load', this.iframeBind);
	    }
	  },

	  update: function update(handler) {
	    // stub a noop for v-on with no value,
	    // e.g. @mousedown.prevent
	    if (!this.descriptor.raw) {
	      handler = function () {};
	    }

	    if (typeof handler !== 'function') {
	      ("development") !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
	      return;
	    }

	    // apply modifiers
	    if (this.modifiers.stop) {
	      handler = stopFilter(handler);
	    }
	    if (this.modifiers.prevent) {
	      handler = preventFilter(handler);
	    }
	    if (this.modifiers.self) {
	      handler = selfFilter(handler);
	    }
	    // key filter
	    var keys = Object.keys(this.modifiers).filter(function (key) {
	      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
	    });
	    if (keys.length) {
	      handler = keyFilter(handler, keys);
	    }

	    this.reset();
	    this.handler = handler;

	    if (this.iframeBind) {
	      this.iframeBind();
	    } else {
	      on(this.el, this.arg, this.handler, this.modifiers.capture);
	    }
	  },

	  reset: function reset() {
	    var el = this.iframeBind ? this.el.contentWindow : this.el;
	    if (this.handler) {
	      off(el, this.arg, this.handler);
	    }
	  },

	  unbind: function unbind() {
	    this.reset();
	  }
	};

	var prefixes = ['-webkit-', '-moz-', '-ms-'];
	var camelPrefixes = ['Webkit', 'Moz', 'ms'];
	var importantRE = /!important;?$/;
	var propCache = Object.create(null);

	var testEl = null;

	var style = {

	  deep: true,

	  update: function update(value) {
	    if (typeof value === 'string') {
	      this.el.style.cssText = value;
	    } else if (isArray(value)) {
	      this.handleObject(value.reduce(extend, {}));
	    } else {
	      this.handleObject(value || {});
	    }
	  },

	  handleObject: function handleObject(value) {
	    // cache object styles so that only changed props
	    // are actually updated.
	    var cache = this.cache || (this.cache = {});
	    var name, val;
	    for (name in cache) {
	      if (!(name in value)) {
	        this.handleSingle(name, null);
	        delete cache[name];
	      }
	    }
	    for (name in value) {
	      val = value[name];
	      if (val !== cache[name]) {
	        cache[name] = val;
	        this.handleSingle(name, val);
	      }
	    }
	  },

	  handleSingle: function handleSingle(prop, value) {
	    prop = normalize(prop);
	    if (!prop) return; // unsupported prop
	    // cast possible numbers/booleans into strings
	    if (value != null) value += '';
	    if (value) {
	      var isImportant = importantRE.test(value) ? 'important' : '';
	      if (isImportant) {
	        /* istanbul ignore if */
	        if (true) {
	          warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
	        }
	        value = value.replace(importantRE, '').trim();
	        this.el.style.setProperty(prop.kebab, value, isImportant);
	      } else {
	        this.el.style[prop.camel] = value;
	      }
	    } else {
	      this.el.style[prop.camel] = '';
	    }
	  }

	};

	/**
	 * Normalize a CSS property name.
	 * - cache result
	 * - auto prefix
	 * - camelCase -> dash-case
	 *
	 * @param {String} prop
	 * @return {String}
	 */

	function normalize(prop) {
	  if (propCache[prop]) {
	    return propCache[prop];
	  }
	  var res = prefix(prop);
	  propCache[prop] = propCache[res] = res;
	  return res;
	}

	/**
	 * Auto detect the appropriate prefix for a CSS property.
	 * https://gist.github.com/paulirish/523692
	 *
	 * @param {String} prop
	 * @return {String}
	 */

	function prefix(prop) {
	  prop = hyphenate(prop);
	  var camel = camelize(prop);
	  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
	  if (!testEl) {
	    testEl = document.createElement('div');
	  }
	  var i = prefixes.length;
	  var prefixed;
	  if (camel !== 'filter' && camel in testEl.style) {
	    return {
	      kebab: prop,
	      camel: camel
	    };
	  }
	  while (i--) {
	    prefixed = camelPrefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return {
	        kebab: prefixes[i] + prop,
	        camel: prefixed
	      };
	    }
	  }
	}

	// xlink
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	var xlinkRE = /^xlink:/;

	// check for attributes that prohibit interpolations
	var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
	// these attributes should also set their corresponding properties
	// because they only affect the initial state of the element
	var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
	// these attributes expect enumrated values of "true" or "false"
	// but are not boolean attributes
	var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;

	// these attributes should set a hidden property for
	// binding v-model to object values
	var modelProps = {
	  value: '_value',
	  'true-value': '_trueValue',
	  'false-value': '_falseValue'
	};

	var bind$1 = {

	  priority: BIND,

	  bind: function bind() {
	    var attr = this.arg;
	    var tag = this.el.tagName;
	    // should be deep watch on object mode
	    if (!attr) {
	      this.deep = true;
	    }
	    // handle interpolation bindings
	    var descriptor = this.descriptor;
	    var tokens = descriptor.interp;
	    if (tokens) {
	      // handle interpolations with one-time tokens
	      if (descriptor.hasOneTime) {
	        this.expression = tokensToExp(tokens, this._scope || this.vm);
	      }

	      // only allow binding on native attributes
	      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
	        ("development") !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
	        this.el.removeAttribute(attr);
	        this.invalid = true;
	      }

	      /* istanbul ignore if */
	      if (true) {
	        var raw = attr + '="' + descriptor.raw + '": ';
	        // warn src
	        if (attr === 'src') {
	          warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
	        }

	        // warn style
	        if (attr === 'style') {
	          warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
	        }
	      }
	    }
	  },

	  update: function update(value) {
	    if (this.invalid) {
	      return;
	    }
	    var attr = this.arg;
	    if (this.arg) {
	      this.handleSingle(attr, value);
	    } else {
	      this.handleObject(value || {});
	    }
	  },

	  // share object handler with v-bind:class
	  handleObject: style.handleObject,

	  handleSingle: function handleSingle(attr, value) {
	    var el = this.el;
	    var interp = this.descriptor.interp;
	    if (this.modifiers.camel) {
	      attr = camelize(attr);
	    }
	    if (!interp && attrWithPropsRE.test(attr) && attr in el) {
	      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
	      ? '' : value : value;

	      if (el[attr] !== attrValue) {
	        el[attr] = attrValue;
	      }
	    }
	    // set model props
	    var modelProp = modelProps[attr];
	    if (!interp && modelProp) {
	      el[modelProp] = value;
	      // update v-model if present
	      var model = el.__v_model;
	      if (model) {
	        model.listener();
	      }
	    }
	    // do not set value attribute for textarea
	    if (attr === 'value' && el.tagName === 'TEXTAREA') {
	      el.removeAttribute(attr);
	      return;
	    }
	    // update attribute
	    if (enumeratedAttrRE.test(attr)) {
	      el.setAttribute(attr, value ? 'true' : 'false');
	    } else if (value != null && value !== false) {
	      if (attr === 'class') {
	        // handle edge case #1960:
	        // class interpolation should not overwrite Vue transition class
	        if (el.__v_trans) {
	          value += ' ' + el.__v_trans.id + '-transition';
	        }
	        setClass(el, value);
	      } else if (xlinkRE.test(attr)) {
	        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
	      } else {
	        el.setAttribute(attr, value === true ? '' : value);
	      }
	    } else {
	      el.removeAttribute(attr);
	    }
	  }
	};

	var el = {

	  priority: EL,

	  bind: function bind() {
	    /* istanbul ignore if */
	    if (!this.arg) {
	      return;
	    }
	    var id = this.id = camelize(this.arg);
	    var refs = (this._scope || this.vm).$els;
	    if (hasOwn(refs, id)) {
	      refs[id] = this.el;
	    } else {
	      defineReactive(refs, id, this.el);
	    }
	  },

	  unbind: function unbind() {
	    var refs = (this._scope || this.vm).$els;
	    if (refs[this.id] === this.el) {
	      refs[this.id] = null;
	    }
	  }
	};

	var ref = {
	  bind: function bind() {
	    ("development") !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
	  }
	};

	var cloak = {
	  bind: function bind() {
	    var el = this.el;
	    this.vm.$once('pre-hook:compiled', function () {
	      el.removeAttribute('v-cloak');
	    });
	  }
	};

	// must export plain object
	var directives = {
	  text: text$1,
	  html: html,
	  'for': vFor,
	  'if': vIf,
	  show: show,
	  model: model,
	  on: on$1,
	  bind: bind$1,
	  el: el,
	  ref: ref,
	  cloak: cloak
	};

	var vClass = {

	  deep: true,

	  update: function update(value) {
	    if (!value) {
	      this.cleanup();
	    } else if (typeof value === 'string') {
	      this.setClass(value.trim().split(/\s+/));
	    } else {
	      this.setClass(normalize$1(value));
	    }
	  },

	  setClass: function setClass(value) {
	    this.cleanup(value);
	    for (var i = 0, l = value.length; i < l; i++) {
	      var val = value[i];
	      if (val) {
	        apply(this.el, val, addClass);
	      }
	    }
	    this.prevKeys = value;
	  },

	  cleanup: function cleanup(value) {
	    var prevKeys = this.prevKeys;
	    if (!prevKeys) return;
	    var i = prevKeys.length;
	    while (i--) {
	      var key = prevKeys[i];
	      if (!value || value.indexOf(key) < 0) {
	        apply(this.el, key, removeClass);
	      }
	    }
	  }
	};

	/**
	 * Normalize objects and arrays (potentially containing objects)
	 * into array of strings.
	 *
	 * @param {Object|Array<String|Object>} value
	 * @return {Array<String>}
	 */

	function normalize$1(value) {
	  var res = [];
	  if (isArray(value)) {
	    for (var i = 0, l = value.length; i < l; i++) {
	      var _key = value[i];
	      if (_key) {
	        if (typeof _key === 'string') {
	          res.push(_key);
	        } else {
	          for (var k in _key) {
	            if (_key[k]) res.push(k);
	          }
	        }
	      }
	    }
	  } else if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) res.push(key);
	    }
	  }
	  return res;
	}

	/**
	 * Add or remove a class/classes on an element
	 *
	 * @param {Element} el
	 * @param {String} key The class name. This may or may not
	 *                     contain a space character, in such a
	 *                     case we'll deal with multiple class
	 *                     names at once.
	 * @param {Function} fn
	 */

	function apply(el, key, fn) {
	  key = key.trim();
	  if (key.indexOf(' ') === -1) {
	    fn(el, key);
	    return;
	  }
	  // The key contains one or more space characters.
	  // Since a class name doesn't accept such characters, we
	  // treat it as multiple classes.
	  var keys = key.split(/\s+/);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    fn(el, keys[i]);
	  }
	}

	var component = {

	  priority: COMPONENT,

	  params: ['keep-alive', 'transition-mode', 'inline-template'],

	  /**
	   * Setup. Two possible usages:
	   *
	   * - static:
	   *   <comp> or <div v-component="comp">
	   *
	   * - dynamic:
	   *   <component :is="view">
	   */

	  bind: function bind() {
	    if (!this.el.__vue__) {
	      // keep-alive cache
	      this.keepAlive = this.params.keepAlive;
	      if (this.keepAlive) {
	        this.cache = {};
	      }
	      // check inline-template
	      if (this.params.inlineTemplate) {
	        // extract inline template as a DocumentFragment
	        this.inlineTemplate = extractContent(this.el, true);
	      }
	      // component resolution related state
	      this.pendingComponentCb = this.Component = null;
	      // transition related state
	      this.pendingRemovals = 0;
	      this.pendingRemovalCb = null;
	      // create a ref anchor
	      this.anchor = createAnchor('v-component');
	      replace(this.el, this.anchor);
	      // remove is attribute.
	      // this is removed during compilation, but because compilation is
	      // cached, when the component is used elsewhere this attribute
	      // will remain at link time.
	      this.el.removeAttribute('is');
	      this.el.removeAttribute(':is');
	      // remove ref, same as above
	      if (this.descriptor.ref) {
	        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
	      }
	      // if static, build right now.
	      if (this.literal) {
	        this.setComponent(this.expression);
	      }
	    } else {
	      ("development") !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
	    }
	  },

	  /**
	   * Public update, called by the watcher in the dynamic
	   * literal scenario, e.g. <component :is="view">
	   */

	  update: function update(value) {
	    if (!this.literal) {
	      this.setComponent(value);
	    }
	  },

	  /**
	   * Switch dynamic components. May resolve the component
	   * asynchronously, and perform transition based on
	   * specified transition mode. Accepts a few additional
	   * arguments specifically for vue-router.
	   *
	   * The callback is called when the full transition is
	   * finished.
	   *
	   * @param {String} value
	   * @param {Function} [cb]
	   */

	  setComponent: function setComponent(value, cb) {
	    this.invalidatePending();
	    if (!value) {
	      // just remove current
	      this.unbuild(true);
	      this.remove(this.childVM, cb);
	      this.childVM = null;
	    } else {
	      var self = this;
	      this.resolveComponent(value, function () {
	        self.mountComponent(cb);
	      });
	    }
	  },

	  /**
	   * Resolve the component constructor to use when creating
	   * the child vm.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */

	  resolveComponent: function resolveComponent(value, cb) {
	    var self = this;
	    this.pendingComponentCb = cancellable(function (Component) {
	      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
	      self.Component = Component;
	      cb();
	    });
	    this.vm._resolveComponent(value, this.pendingComponentCb);
	  },

	  /**
	   * Create a new instance using the current constructor and
	   * replace the existing instance. This method doesn't care
	   * whether the new component and the old one are actually
	   * the same.
	   *
	   * @param {Function} [cb]
	   */

	  mountComponent: function mountComponent(cb) {
	    // actual mount
	    this.unbuild(true);
	    var self = this;
	    var activateHooks = this.Component.options.activate;
	    var cached = this.getCached();
	    var newComponent = this.build();
	    if (activateHooks && !cached) {
	      this.waitingFor = newComponent;
	      callActivateHooks(activateHooks, newComponent, function () {
	        if (self.waitingFor !== newComponent) {
	          return;
	        }
	        self.waitingFor = null;
	        self.transition(newComponent, cb);
	      });
	    } else {
	      // update ref for kept-alive component
	      if (cached) {
	        newComponent._updateRef();
	      }
	      this.transition(newComponent, cb);
	    }
	  },

	  /**
	   * When the component changes or unbinds before an async
	   * constructor is resolved, we need to invalidate its
	   * pending callback.
	   */

	  invalidatePending: function invalidatePending() {
	    if (this.pendingComponentCb) {
	      this.pendingComponentCb.cancel();
	      this.pendingComponentCb = null;
	    }
	  },

	  /**
	   * Instantiate/insert a new child vm.
	   * If keep alive and has cached instance, insert that
	   * instance; otherwise build a new one and cache it.
	   *
	   * @param {Object} [extraOptions]
	   * @return {Vue} - the created instance
	   */

	  build: function build(extraOptions) {
	    var cached = this.getCached();
	    if (cached) {
	      return cached;
	    }
	    if (this.Component) {
	      // default options
	      var options = {
	        name: this.ComponentName,
	        el: cloneNode(this.el),
	        template: this.inlineTemplate,
	        // make sure to add the child with correct parent
	        // if this is a transcluded component, its parent
	        // should be the transclusion host.
	        parent: this._host || this.vm,
	        // if no inline-template, then the compiled
	        // linker can be cached for better performance.
	        _linkerCachable: !this.inlineTemplate,
	        _ref: this.descriptor.ref,
	        _asComponent: true,
	        _isRouterView: this._isRouterView,
	        // if this is a transcluded component, context
	        // will be the common parent vm of this instance
	        // and its host.
	        _context: this.vm,
	        // if this is inside an inline v-for, the scope
	        // will be the intermediate scope created for this
	        // repeat fragment. this is used for linking props
	        // and container directives.
	        _scope: this._scope,
	        // pass in the owner fragment of this component.
	        // this is necessary so that the fragment can keep
	        // track of its contained components in order to
	        // call attach/detach hooks for them.
	        _frag: this._frag
	      };
	      // extra options
	      // in 1.0.0 this is used by vue-router only
	      /* istanbul ignore if */
	      if (extraOptions) {
	        extend(options, extraOptions);
	      }
	      var child = new this.Component(options);
	      if (this.keepAlive) {
	        this.cache[this.Component.cid] = child;
	      }
	      /* istanbul ignore if */
	      if (("development") !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
	        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
	      }
	      return child;
	    }
	  },

	  /**
	   * Try to get a cached instance of the current component.
	   *
	   * @return {Vue|undefined}
	   */

	  getCached: function getCached() {
	    return this.keepAlive && this.cache[this.Component.cid];
	  },

	  /**
	   * Teardown the current child, but defers cleanup so
	   * that we can separate the destroy and removal steps.
	   *
	   * @param {Boolean} defer
	   */

	  unbuild: function unbuild(defer) {
	    if (this.waitingFor) {
	      if (!this.keepAlive) {
	        this.waitingFor.$destroy();
	      }
	      this.waitingFor = null;
	    }
	    var child = this.childVM;
	    if (!child || this.keepAlive) {
	      if (child) {
	        // remove ref
	        child._inactive = true;
	        child._updateRef(true);
	      }
	      return;
	    }
	    // the sole purpose of `deferCleanup` is so that we can
	    // "deactivate" the vm right now and perform DOM removal
	    // later.
	    child.$destroy(false, defer);
	  },

	  /**
	   * Remove current destroyed child and manually do
	   * the cleanup after removal.
	   *
	   * @param {Function} cb
	   */

	  remove: function remove(child, cb) {
	    var keepAlive = this.keepAlive;
	    if (child) {
	      // we may have a component switch when a previous
	      // component is still being transitioned out.
	      // we want to trigger only one lastest insertion cb
	      // when the existing transition finishes. (#1119)
	      this.pendingRemovals++;
	      this.pendingRemovalCb = cb;
	      var self = this;
	      child.$remove(function () {
	        self.pendingRemovals--;
	        if (!keepAlive) child._cleanup();
	        if (!self.pendingRemovals && self.pendingRemovalCb) {
	          self.pendingRemovalCb();
	          self.pendingRemovalCb = null;
	        }
	      });
	    } else if (cb) {
	      cb();
	    }
	  },

	  /**
	   * Actually swap the components, depending on the
	   * transition mode. Defaults to simultaneous.
	   *
	   * @param {Vue} target
	   * @param {Function} [cb]
	   */

	  transition: function transition(target, cb) {
	    var self = this;
	    var current = this.childVM;
	    // for devtool inspection
	    if (current) current._inactive = true;
	    target._inactive = false;
	    this.childVM = target;
	    switch (self.params.transitionMode) {
	      case 'in-out':
	        target.$before(self.anchor, function () {
	          self.remove(current, cb);
	        });
	        break;
	      case 'out-in':
	        self.remove(current, function () {
	          target.$before(self.anchor, cb);
	        });
	        break;
	      default:
	        self.remove(current);
	        target.$before(self.anchor, cb);
	    }
	  },

	  /**
	   * Unbind.
	   */

	  unbind: function unbind() {
	    this.invalidatePending();
	    // Do not defer cleanup when unbinding
	    this.unbuild();
	    // destroy all keep-alive cached instances
	    if (this.cache) {
	      for (var key in this.cache) {
	        this.cache[key].$destroy();
	      }
	      this.cache = null;
	    }
	  }
	};

	/**
	 * Call activate hooks in order (asynchronous)
	 *
	 * @param {Array} hooks
	 * @param {Vue} vm
	 * @param {Function} cb
	 */

	function callActivateHooks(hooks, vm, cb) {
	  var total = hooks.length;
	  var called = 0;
	  hooks[0].call(vm, next);
	  function next() {
	    if (++called >= total) {
	      cb();
	    } else {
	      hooks[called].call(vm, next);
	    }
	  }
	}

	var propBindingModes = config._propBindingModes;
	var empty = {};

	// regexes
	var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
	var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;

	/**
	 * Compile props on a root element and return
	 * a props link function.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Array} propOptions
	 * @param {Vue} vm
	 * @return {Function} propsLinkFn
	 */

	function compileProps(el, propOptions, vm) {
	  var props = [];
	  var names = Object.keys(propOptions);
	  var i = names.length;
	  var options, name, attr, value, path, parsed, prop;
	  while (i--) {
	    name = names[i];
	    options = propOptions[name] || empty;

	    if (("development") !== 'production' && name === '$data') {
	      warn('Do not use $data as prop.', vm);
	      continue;
	    }

	    // props could contain dashes, which will be
	    // interpreted as minus calculations by the parser
	    // so we need to camelize the path here
	    path = camelize(name);
	    if (!identRE$1.test(path)) {
	      ("development") !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
	      continue;
	    }

	    prop = {
	      name: name,
	      path: path,
	      options: options,
	      mode: propBindingModes.ONE_WAY,
	      raw: null
	    };

	    attr = hyphenate(name);
	    // first check dynamic version
	    if ((value = getBindAttr(el, attr)) === null) {
	      if ((value = getBindAttr(el, attr + '.sync')) !== null) {
	        prop.mode = propBindingModes.TWO_WAY;
	      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
	        prop.mode = propBindingModes.ONE_TIME;
	      }
	    }
	    if (value !== null) {
	      // has dynamic binding!
	      prop.raw = value;
	      parsed = parseDirective(value);
	      value = parsed.expression;
	      prop.filters = parsed.filters;
	      // check binding type
	      if (isLiteral(value) && !parsed.filters) {
	        // for expressions containing literal numbers and
	        // booleans, there's no need to setup a prop binding,
	        // so we can optimize them as a one-time set.
	        prop.optimizedLiteral = true;
	      } else {
	        prop.dynamic = true;
	        // check non-settable path for two-way bindings
	        if (("development") !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
	          prop.mode = propBindingModes.ONE_WAY;
	          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
	        }
	      }
	      prop.parentPath = value;

	      // warn required two-way
	      if (("development") !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
	        warn('Prop "' + name + '" expects a two-way binding type.', vm);
	      }
	    } else if ((value = getAttr(el, attr)) !== null) {
	      // has literal binding!
	      prop.raw = value;
	    } else if (true) {
	      // check possible camelCase prop usage
	      var lowerCaseName = path.toLowerCase();
	      value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
	      if (value) {
	        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
	      } else if (options.required) {
	        // warn missing required
	        warn('Missing required prop: ' + name, vm);
	      }
	    }
	    // push prop
	    props.push(prop);
	  }
	  return makePropsLinkFn(props);
	}

	/**
	 * Build a function that applies props to a vm.
	 *
	 * @param {Array} props
	 * @return {Function} propsLinkFn
	 */

	function makePropsLinkFn(props) {
	  return function propsLinkFn(vm, scope) {
	    // store resolved props info
	    vm._props = {};
	    var inlineProps = vm.$options.propsData;
	    var i = props.length;
	    var prop, path, options, value, raw;
	    while (i--) {
	      prop = props[i];
	      raw = prop.raw;
	      path = prop.path;
	      options = prop.options;
	      vm._props[path] = prop;
	      if (inlineProps && hasOwn(inlineProps, path)) {
	        initProp(vm, prop, inlineProps[path]);
	      }if (raw === null) {
	        // initialize absent prop
	        initProp(vm, prop, undefined);
	      } else if (prop.dynamic) {
	        // dynamic prop
	        if (prop.mode === propBindingModes.ONE_TIME) {
	          // one time binding
	          value = (scope || vm._context || vm).$get(prop.parentPath);
	          initProp(vm, prop, value);
	        } else {
	          if (vm._context) {
	            // dynamic binding
	            vm._bindDir({
	              name: 'prop',
	              def: propDef,
	              prop: prop
	            }, null, null, scope); // el, host, scope
	          } else {
	              // root instance
	              initProp(vm, prop, vm.$get(prop.parentPath));
	            }
	        }
	      } else if (prop.optimizedLiteral) {
	        // optimized literal, cast it and just set once
	        var stripped = stripQuotes(raw);
	        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
	        initProp(vm, prop, value);
	      } else {
	        // string literal, but we need to cater for
	        // Boolean props with no value, or with same
	        // literal value (e.g. disabled="disabled")
	        // see https://github.com/vuejs/vue-loader/issues/182
	        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
	        initProp(vm, prop, value);
	      }
	    }
	  };
	}

	/**
	 * Process a prop with a rawValue, applying necessary coersions,
	 * default values & assertions and call the given callback with
	 * processed value.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} rawValue
	 * @param {Function} fn
	 */

	function processPropValue(vm, prop, rawValue, fn) {
	  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
	  var value = rawValue;
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop);
	  }
	  value = coerceProp(prop, value, vm);
	  var coerced = value !== rawValue;
	  if (!assertProp(prop, value, vm)) {
	    value = undefined;
	  }
	  if (isSimple && !coerced) {
	    withoutConversion(function () {
	      fn(value);
	    });
	  } else {
	    fn(value);
	  }
	}

	/**
	 * Set a prop's initial value on a vm and its data object.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */

	function initProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    defineReactive(vm, prop.path, value);
	  });
	}

	/**
	 * Update a prop's value on a vm.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */

	function updateProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    vm[prop.path] = value;
	  });
	}

	/**
	 * Get the default value of a prop.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @return {*}
	 */

	function getPropDefaultValue(vm, prop) {
	  // no default, return undefined
	  var options = prop.options;
	  if (!hasOwn(options, 'default')) {
	    // absent boolean value defaults to false
	    return options.type === Boolean ? false : undefined;
	  }
	  var def = options['default'];
	  // warn against non-factory defaults for Object & Array
	  if (isObject(def)) {
	    ("development") !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
	  }
	  // call factory function for non-Function types
	  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
	}

	/**
	 * Assert whether a prop is valid.
	 *
	 * @param {Object} prop
	 * @param {*} value
	 * @param {Vue} vm
	 */

	function assertProp(prop, value, vm) {
	  if (!prop.options.required && ( // non-required
	  prop.raw === null || // abscent
	  value == null) // null or undefined
	  ) {
	      return true;
	    }
	  var options = prop.options;
	  var type = options.type;
	  var valid = !type;
	  var expectedTypes = [];
	  if (type) {
	    if (!isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType);
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    if (true) {
	      warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
	    }
	    return false;
	  }
	  var validator = options.validator;
	  if (validator) {
	    if (!validator(value)) {
	      ("development") !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
	      return false;
	    }
	  }
	  return true;
	}

	/**
	 * Force parsing value with coerce option.
	 *
	 * @param {*} value
	 * @param {Object} options
	 * @return {*}
	 */

	function coerceProp(prop, value, vm) {
	  var coerce = prop.options.coerce;
	  if (!coerce) {
	    return value;
	  }
	  if (typeof coerce === 'function') {
	    return coerce(value);
	  } else {
	    ("development") !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
	    return value;
	  }
	}

	/**
	 * Assert the type of a value
	 *
	 * @param {*} value
	 * @param {Function} type
	 * @return {Object}
	 */

	function assertType(value, type) {
	  var valid;
	  var expectedType;
	  if (type === String) {
	    expectedType = 'string';
	    valid = typeof value === expectedType;
	  } else if (type === Number) {
	    expectedType = 'number';
	    valid = typeof value === expectedType;
	  } else if (type === Boolean) {
	    expectedType = 'boolean';
	    valid = typeof value === expectedType;
	  } else if (type === Function) {
	    expectedType = 'function';
	    valid = typeof value === expectedType;
	  } else if (type === Object) {
	    expectedType = 'object';
	    valid = isPlainObject(value);
	  } else if (type === Array) {
	    expectedType = 'array';
	    valid = isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  };
	}

	/**
	 * Format type for output
	 *
	 * @param {String} type
	 * @return {String}
	 */

	function formatType(type) {
	  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
	}

	/**
	 * Format value
	 *
	 * @param {*} value
	 * @return {String}
	 */

	function formatValue(val) {
	  return Object.prototype.toString.call(val).slice(8, -1);
	}

	var bindingModes = config._propBindingModes;

	var propDef = {

	  bind: function bind() {
	    var child = this.vm;
	    var parent = child._context;
	    // passed in from compiler directly
	    var prop = this.descriptor.prop;
	    var childKey = prop.path;
	    var parentKey = prop.parentPath;
	    var twoWay = prop.mode === bindingModes.TWO_WAY;

	    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
	      updateProp(child, prop, val);
	    }, {
	      twoWay: twoWay,
	      filters: prop.filters,
	      // important: props need to be observed on the
	      // v-for scope if present
	      scope: this._scope
	    });

	    // set the child initial value.
	    initProp(child, prop, parentWatcher.value);

	    // setup two-way binding
	    if (twoWay) {
	      // important: defer the child watcher creation until
	      // the created hook (after data observation)
	      var self = this;
	      child.$once('pre-hook:created', function () {
	        self.childWatcher = new Watcher(child, childKey, function (val) {
	          parentWatcher.set(val);
	        }, {
	          // ensure sync upward before parent sync down.
	          // this is necessary in cases e.g. the child
	          // mutates a prop array, then replaces it. (#1683)
	          sync: true
	        });
	      });
	    }
	  },

	  unbind: function unbind() {
	    this.parentWatcher.teardown();
	    if (this.childWatcher) {
	      this.childWatcher.teardown();
	    }
	  }
	};

	var queue$1 = [];
	var queued = false;

	/**
	 * Push a job into the queue.
	 *
	 * @param {Function} job
	 */

	function pushJob(job) {
	  queue$1.push(job);
	  if (!queued) {
	    queued = true;
	    nextTick(flush);
	  }
	}

	/**
	 * Flush the queue, and do one forced reflow before
	 * triggering transitions.
	 */

	function flush() {
	  // Force layout
	  var f = document.documentElement.offsetHeight;
	  for (var i = 0; i < queue$1.length; i++) {
	    queue$1[i]();
	  }
	  queue$1 = [];
	  queued = false;
	  // dummy return, so js linters don't complain about
	  // unused variable f
	  return f;
	}

	var TYPE_TRANSITION = 'transition';
	var TYPE_ANIMATION = 'animation';
	var transDurationProp = transitionProp + 'Duration';
	var animDurationProp = animationProp + 'Duration';

	/**
	 * If a just-entered element is applied the
	 * leave class while its enter transition hasn't started yet,
	 * and the transitioned property has the same value for both
	 * enter/leave, then the leave transition will be skipped and
	 * the transitionend event never fires. This function ensures
	 * its callback to be called after a transition has started
	 * by waiting for double raf.
	 *
	 * It falls back to setTimeout on devices that support CSS
	 * transitions but not raf (e.g. Android 4.2 browser) - since
	 * these environments are usually slow, we are giving it a
	 * relatively large timeout.
	 */

	var raf = inBrowser && window.requestAnimationFrame;
	var waitForTransitionStart = raf
	/* istanbul ignore next */
	? function (fn) {
	  raf(function () {
	    raf(fn);
	  });
	} : function (fn) {
	  setTimeout(fn, 50);
	};

	/**
	 * A Transition object that encapsulates the state and logic
	 * of the transition.
	 *
	 * @param {Element} el
	 * @param {String} id
	 * @param {Object} hooks
	 * @param {Vue} vm
	 */
	function Transition(el, id, hooks, vm) {
	  this.id = id;
	  this.el = el;
	  this.enterClass = hooks && hooks.enterClass || id + '-enter';
	  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
	  this.hooks = hooks;
	  this.vm = vm;
	  // async state
	  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
	  this.justEntered = false;
	  this.entered = this.left = false;
	  this.typeCache = {};
	  // check css transition type
	  this.type = hooks && hooks.type;
	  /* istanbul ignore if */
	  if (true) {
	    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
	      warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
	    }
	  }
	  // bind
	  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
	    self[m] = bind(self[m], self);
	  });
	}

	var p$1 = Transition.prototype;

	/**
	 * Start an entering transition.
	 *
	 * 1. enter transition triggered
	 * 2. call beforeEnter hook
	 * 3. add enter class
	 * 4. insert/show element
	 * 5. call enter hook (with possible explicit js callback)
	 * 6. reflow
	 * 7. based on transition type:
	 *    - transition:
	 *        remove class now, wait for transitionend,
	 *        then done if there's no explicit js callback.
	 *    - animation:
	 *        wait for animationend, remove class,
	 *        then done if there's no explicit js callback.
	 *    - no css transition:
	 *        done now if there's no explicit js callback.
	 * 8. wait for either done or js callback, then call
	 *    afterEnter hook.
	 *
	 * @param {Function} op - insert/show the element
	 * @param {Function} [cb]
	 */

	p$1.enter = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeEnter');
	  this.cb = cb;
	  addClass(this.el, this.enterClass);
	  op();
	  this.entered = false;
	  this.callHookWithCb('enter');
	  if (this.entered) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.enterCancelled;
	  pushJob(this.enterNextTick);
	};

	/**
	 * The "nextTick" phase of an entering transition, which is
	 * to be pushed into a queue and executed after a reflow so
	 * that removing the class can trigger a CSS transition.
	 */

	p$1.enterNextTick = function () {
	  var _this = this;

	  // prevent transition skipping
	  this.justEntered = true;
	  waitForTransitionStart(function () {
	    _this.justEntered = false;
	  });
	  var enterDone = this.enterDone;
	  var type = this.getCssTransitionType(this.enterClass);
	  if (!this.pendingJsCb) {
	    if (type === TYPE_TRANSITION) {
	      // trigger transition by removing enter class now
	      removeClass(this.el, this.enterClass);
	      this.setupCssCb(transitionEndEvent, enterDone);
	    } else if (type === TYPE_ANIMATION) {
	      this.setupCssCb(animationEndEvent, enterDone);
	    } else {
	      enterDone();
	    }
	  } else if (type === TYPE_TRANSITION) {
	    removeClass(this.el, this.enterClass);
	  }
	};

	/**
	 * The "cleanup" phase of an entering transition.
	 */

	p$1.enterDone = function () {
	  this.entered = true;
	  this.cancel = this.pendingJsCb = null;
	  removeClass(this.el, this.enterClass);
	  this.callHook('afterEnter');
	  if (this.cb) this.cb();
	};

	/**
	 * Start a leaving transition.
	 *
	 * 1. leave transition triggered.
	 * 2. call beforeLeave hook
	 * 3. add leave class (trigger css transition)
	 * 4. call leave hook (with possible explicit js callback)
	 * 5. reflow if no explicit js callback is provided
	 * 6. based on transition type:
	 *    - transition or animation:
	 *        wait for end event, remove class, then done if
	 *        there's no explicit js callback.
	 *    - no css transition:
	 *        done if there's no explicit js callback.
	 * 7. wait for either done or js callback, then call
	 *    afterLeave hook.
	 *
	 * @param {Function} op - remove/hide the element
	 * @param {Function} [cb]
	 */

	p$1.leave = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeLeave');
	  this.op = op;
	  this.cb = cb;
	  addClass(this.el, this.leaveClass);
	  this.left = false;
	  this.callHookWithCb('leave');
	  if (this.left) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.leaveCancelled;
	  // only need to handle leaveDone if
	  // 1. the transition is already done (synchronously called
	  //    by the user, which causes this.op set to null)
	  // 2. there's no explicit js callback
	  if (this.op && !this.pendingJsCb) {
	    // if a CSS transition leaves immediately after enter,
	    // the transitionend event never fires. therefore we
	    // detect such cases and end the leave immediately.
	    if (this.justEntered) {
	      this.leaveDone();
	    } else {
	      pushJob(this.leaveNextTick);
	    }
	  }
	};

	/**
	 * The "nextTick" phase of a leaving transition.
	 */

	p$1.leaveNextTick = function () {
	  var type = this.getCssTransitionType(this.leaveClass);
	  if (type) {
	    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
	    this.setupCssCb(event, this.leaveDone);
	  } else {
	    this.leaveDone();
	  }
	};

	/**
	 * The "cleanup" phase of a leaving transition.
	 */

	p$1.leaveDone = function () {
	  this.left = true;
	  this.cancel = this.pendingJsCb = null;
	  this.op();
	  removeClass(this.el, this.leaveClass);
	  this.callHook('afterLeave');
	  if (this.cb) this.cb();
	  this.op = null;
	};

	/**
	 * Cancel any pending callbacks from a previously running
	 * but not finished transition.
	 */

	p$1.cancelPending = function () {
	  this.op = this.cb = null;
	  var hasPending = false;
	  if (this.pendingCssCb) {
	    hasPending = true;
	    off(this.el, this.pendingCssEvent, this.pendingCssCb);
	    this.pendingCssEvent = this.pendingCssCb = null;
	  }
	  if (this.pendingJsCb) {
	    hasPending = true;
	    this.pendingJsCb.cancel();
	    this.pendingJsCb = null;
	  }
	  if (hasPending) {
	    removeClass(this.el, this.enterClass);
	    removeClass(this.el, this.leaveClass);
	  }
	  if (this.cancel) {
	    this.cancel.call(this.vm, this.el);
	    this.cancel = null;
	  }
	};

	/**
	 * Call a user-provided synchronous hook function.
	 *
	 * @param {String} type
	 */

	p$1.callHook = function (type) {
	  if (this.hooks && this.hooks[type]) {
	    this.hooks[type].call(this.vm, this.el);
	  }
	};

	/**
	 * Call a user-provided, potentially-async hook function.
	 * We check for the length of arguments to see if the hook
	 * expects a `done` callback. If true, the transition's end
	 * will be determined by when the user calls that callback;
	 * otherwise, the end is determined by the CSS transition or
	 * animation.
	 *
	 * @param {String} type
	 */

	p$1.callHookWithCb = function (type) {
	  var hook = this.hooks && this.hooks[type];
	  if (hook) {
	    if (hook.length > 1) {
	      this.pendingJsCb = cancellable(this[type + 'Done']);
	    }
	    hook.call(this.vm, this.el, this.pendingJsCb);
	  }
	};

	/**
	 * Get an element's transition type based on the
	 * calculated styles.
	 *
	 * @param {String} className
	 * @return {Number}
	 */

	p$1.getCssTransitionType = function (className) {
	  /* istanbul ignore if */
	  if (!transitionEndEvent ||
	  // skip CSS transitions if page is not visible -
	  // this solves the issue of transitionend events not
	  // firing until the page is visible again.
	  // pageVisibility API is supported in IE10+, same as
	  // CSS transitions.
	  document.hidden ||
	  // explicit js-only transition
	  this.hooks && this.hooks.css === false ||
	  // element is hidden
	  isHidden(this.el)) {
	    return;
	  }
	  var type = this.type || this.typeCache[className];
	  if (type) return type;
	  var inlineStyles = this.el.style;
	  var computedStyles = window.getComputedStyle(this.el);
	  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
	  if (transDuration && transDuration !== '0s') {
	    type = TYPE_TRANSITION;
	  } else {
	    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
	    if (animDuration && animDuration !== '0s') {
	      type = TYPE_ANIMATION;
	    }
	  }
	  if (type) {
	    this.typeCache[className] = type;
	  }
	  return type;
	};

	/**
	 * Setup a CSS transitionend/animationend callback.
	 *
	 * @param {String} event
	 * @param {Function} cb
	 */

	p$1.setupCssCb = function (event, cb) {
	  this.pendingCssEvent = event;
	  var self = this;
	  var el = this.el;
	  var onEnd = this.pendingCssCb = function (e) {
	    if (e.target === el) {
	      off(el, event, onEnd);
	      self.pendingCssEvent = self.pendingCssCb = null;
	      if (!self.pendingJsCb && cb) {
	        cb();
	      }
	    }
	  };
	  on(el, event, onEnd);
	};

	/**
	 * Check if an element is hidden - in that case we can just
	 * skip the transition alltogether.
	 *
	 * @param {Element} el
	 * @return {Boolean}
	 */

	function isHidden(el) {
	  if (/svg$/.test(el.namespaceURI)) {
	    // SVG elements do not have offset(Width|Height)
	    // so we need to check the client rect
	    var rect = el.getBoundingClientRect();
	    return !(rect.width || rect.height);
	  } else {
	    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
	  }
	}

	var transition$1 = {

	  priority: TRANSITION,

	  update: function update(id, oldId) {
	    var el = this.el;
	    // resolve on owner vm
	    var hooks = resolveAsset(this.vm.$options, 'transitions', id);
	    id = id || 'v';
	    oldId = oldId || 'v';
	    el.__v_trans = new Transition(el, id, hooks, this.vm);
	    removeClass(el, oldId + '-transition');
	    addClass(el, id + '-transition');
	  }
	};

	var internalDirectives = {
	  style: style,
	  'class': vClass,
	  component: component,
	  prop: propDef,
	  transition: transition$1
	};

	// special binding prefixes
	var bindRE = /^v-bind:|^:/;
	var onRE = /^v-on:|^@/;
	var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
	var modifierRE = /\.[^\.]+/g;
	var transitionRE = /^(v-bind:|:)?transition$/;

	// default directive priority
	var DEFAULT_PRIORITY = 1000;
	var DEFAULT_TERMINAL_PRIORITY = 2000;

	/**
	 * Compile a template and return a reusable composite link
	 * function, which recursively contains more link functions
	 * inside. This top level compile function would normally
	 * be called on instance root nodes, but can also be used
	 * for partial compilation if the partial argument is true.
	 *
	 * The returned composite link function, when called, will
	 * return an unlink function that tearsdown all directives
	 * created during the linking phase.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Object} options
	 * @param {Boolean} partial
	 * @return {Function}
	 */

	function compile(el, options, partial) {
	  // link function for the node itself.
	  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
	  // link function for the childNodes
	  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;

	  /**
	   * A composite linker function to be called on a already
	   * compiled piece of DOM, which instantiates all directive
	   * instances.
	   *
	   * @param {Vue} vm
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host] - host vm of transcluded content
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - link context fragment
	   * @return {Function|undefined}
	   */

	  return function compositeLinkFn(vm, el, host, scope, frag) {
	    // cache childNodes before linking parent, fix #657
	    var childNodes = toArray(el.childNodes);
	    // link
	    var dirs = linkAndCapture(function compositeLinkCapturer() {
	      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
	      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
	    }, vm);
	    return makeUnlinkFn(vm, dirs);
	  };
	}

	/**
	 * Apply a linker to a vm/element pair and capture the
	 * directives created during the process.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 */

	function linkAndCapture(linker, vm) {
	  /* istanbul ignore if */
	  if (false) {
	    // reset directives before every capture in production
	    // mode, so that when unlinking we don't need to splice
	    // them out (which turns out to be a perf hit).
	    // they are kept in development mode because they are
	    // useful for Vue's own tests.
	    vm._directives = [];
	  }
	  var originalDirCount = vm._directives.length;
	  linker();
	  var dirs = vm._directives.slice(originalDirCount);
	  dirs.sort(directiveComparator);
	  for (var i = 0, l = dirs.length; i < l; i++) {
	    dirs[i]._bind();
	  }
	  return dirs;
	}

	/**
	 * Directive priority sort comparator
	 *
	 * @param {Object} a
	 * @param {Object} b
	 */

	function directiveComparator(a, b) {
	  a = a.descriptor.def.priority || DEFAULT_PRIORITY;
	  b = b.descriptor.def.priority || DEFAULT_PRIORITY;
	  return a > b ? -1 : a === b ? 0 : 1;
	}

	/**
	 * Linker functions return an unlink function that
	 * tearsdown all directives instances generated during
	 * the process.
	 *
	 * We create unlink functions with only the necessary
	 * information to avoid retaining additional closures.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Vue} [context]
	 * @param {Array} [contextDirs]
	 * @return {Function}
	 */

	function makeUnlinkFn(vm, dirs, context, contextDirs) {
	  function unlink(destroying) {
	    teardownDirs(vm, dirs, destroying);
	    if (context && contextDirs) {
	      teardownDirs(context, contextDirs);
	    }
	  }
	  // expose linked directives
	  unlink.dirs = dirs;
	  return unlink;
	}

	/**
	 * Teardown partial linked directives.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Boolean} destroying
	 */

	function teardownDirs(vm, dirs, destroying) {
	  var i = dirs.length;
	  while (i--) {
	    dirs[i]._teardown();
	    if (("development") !== 'production' && !destroying) {
	      vm._directives.$remove(dirs[i]);
	    }
	  }
	}

	/**
	 * Compile link props on an instance.
	 *
	 * @param {Vue} vm
	 * @param {Element} el
	 * @param {Object} props
	 * @param {Object} [scope]
	 * @return {Function}
	 */

	function compileAndLinkProps(vm, el, props, scope) {
	  var propsLinkFn = compileProps(el, props, vm);
	  var propDirs = linkAndCapture(function () {
	    propsLinkFn(vm, scope);
	  }, vm);
	  return makeUnlinkFn(vm, propDirs);
	}

	/**
	 * Compile the root element of an instance.
	 *
	 * 1. attrs on context container (context scope)
	 * 2. attrs on the component template root node, if
	 *    replace:true (child scope)
	 *
	 * If this is a fragment instance, we only need to compile 1.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @param {Object} contextOptions
	 * @return {Function}
	 */

	function compileRoot(el, options, contextOptions) {
	  var containerAttrs = options._containerAttrs;
	  var replacerAttrs = options._replacerAttrs;
	  var contextLinkFn, replacerLinkFn;

	  // only need to compile other attributes for
	  // non-fragment instances
	  if (el.nodeType !== 11) {
	    // for components, container and replacer need to be
	    // compiled separately and linked in different scopes.
	    if (options._asComponent) {
	      // 2. container attributes
	      if (containerAttrs && contextOptions) {
	        contextLinkFn = compileDirectives(containerAttrs, contextOptions);
	      }
	      if (replacerAttrs) {
	        // 3. replacer attributes
	        replacerLinkFn = compileDirectives(replacerAttrs, options);
	      }
	    } else {
	      // non-component, just compile as a normal element.
	      replacerLinkFn = compileDirectives(el.attributes, options);
	    }
	  } else if (("development") !== 'production' && containerAttrs) {
	    // warn container directives for fragment instances
	    var names = containerAttrs.filter(function (attr) {
	      // allow vue-loader/vueify scoped css attributes
	      return attr.name.indexOf('_v-') < 0 &&
	      // allow event listeners
	      !onRE.test(attr.name) &&
	      // allow slots
	      attr.name !== 'slot';
	    }).map(function (attr) {
	      return '"' + attr.name + '"';
	    });
	    if (names.length) {
	      var plural = names.length > 1;
	      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + options.el.tagName.toLowerCase() + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
	    }
	  }

	  options._containerAttrs = options._replacerAttrs = null;
	  return function rootLinkFn(vm, el, scope) {
	    // link context scope dirs
	    var context = vm._context;
	    var contextDirs;
	    if (context && contextLinkFn) {
	      contextDirs = linkAndCapture(function () {
	        contextLinkFn(context, el, null, scope);
	      }, context);
	    }

	    // link self
	    var selfDirs = linkAndCapture(function () {
	      if (replacerLinkFn) replacerLinkFn(vm, el);
	    }, vm);

	    // return the unlink function that tearsdown context
	    // container directives.
	    return makeUnlinkFn(vm, selfDirs, context, contextDirs);
	  };
	}

	/**
	 * Compile a node and return a nodeLinkFn based on the
	 * node type.
	 *
	 * @param {Node} node
	 * @param {Object} options
	 * @return {Function|null}
	 */

	function compileNode(node, options) {
	  var type = node.nodeType;
	  if (type === 1 && !isScript(node)) {
	    return compileElement(node, options);
	  } else if (type === 3 && node.data.trim()) {
	    return compileTextNode(node, options);
	  } else {
	    return null;
	  }
	}

	/**
	 * Compile an element and return a nodeLinkFn.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|null}
	 */

	function compileElement(el, options) {
	  // preprocess textareas.
	  // textarea treats its text content as the initial value.
	  // just bind it as an attr directive for value.
	  if (el.tagName === 'TEXTAREA') {
	    var tokens = parseText(el.value);
	    if (tokens) {
	      el.setAttribute(':value', tokensToExp(tokens));
	      el.value = '';
	    }
	  }
	  var linkFn;
	  var hasAttrs = el.hasAttributes();
	  var attrs = hasAttrs && toArray(el.attributes);
	  // check terminal directives (for & if)
	  if (hasAttrs) {
	    linkFn = checkTerminalDirectives(el, attrs, options);
	  }
	  // check element directives
	  if (!linkFn) {
	    linkFn = checkElementDirectives(el, options);
	  }
	  // check component
	  if (!linkFn) {
	    linkFn = checkComponent(el, options);
	  }
	  // normal directives
	  if (!linkFn && hasAttrs) {
	    linkFn = compileDirectives(attrs, options);
	  }
	  return linkFn;
	}

	/**
	 * Compile a textNode and return a nodeLinkFn.
	 *
	 * @param {TextNode} node
	 * @param {Object} options
	 * @return {Function|null} textNodeLinkFn
	 */

	function compileTextNode(node, options) {
	  // skip marked text nodes
	  if (node._skip) {
	    return removeText;
	  }

	  var tokens = parseText(node.wholeText);
	  if (!tokens) {
	    return null;
	  }

	  // mark adjacent text nodes as skipped,
	  // because we are using node.wholeText to compile
	  // all adjacent text nodes together. This fixes
	  // issues in IE where sometimes it splits up a single
	  // text node into multiple ones.
	  var next = node.nextSibling;
	  while (next && next.nodeType === 3) {
	    next._skip = true;
	    next = next.nextSibling;
	  }

	  var frag = document.createDocumentFragment();
	  var el, token;
	  for (var i = 0, l = tokens.length; i < l; i++) {
	    token = tokens[i];
	    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
	    frag.appendChild(el);
	  }
	  return makeTextNodeLinkFn(tokens, frag, options);
	}

	/**
	 * Linker for an skipped text node.
	 *
	 * @param {Vue} vm
	 * @param {Text} node
	 */

	function removeText(vm, node) {
	  remove(node);
	}

	/**
	 * Process a single text token.
	 *
	 * @param {Object} token
	 * @param {Object} options
	 * @return {Node}
	 */

	function processTextToken(token, options) {
	  var el;
	  if (token.oneTime) {
	    el = document.createTextNode(token.value);
	  } else {
	    if (token.html) {
	      el = document.createComment('v-html');
	      setTokenType('html');
	    } else {
	      // IE will clean up empty textNodes during
	      // frag.cloneNode(true), so we have to give it
	      // something here...
	      el = document.createTextNode(' ');
	      setTokenType('text');
	    }
	  }
	  function setTokenType(type) {
	    if (token.descriptor) return;
	    var parsed = parseDirective(token.value);
	    token.descriptor = {
	      name: type,
	      def: directives[type],
	      expression: parsed.expression,
	      filters: parsed.filters
	    };
	  }
	  return el;
	}

	/**
	 * Build a function that processes a textNode.
	 *
	 * @param {Array<Object>} tokens
	 * @param {DocumentFragment} frag
	 */

	function makeTextNodeLinkFn(tokens, frag) {
	  return function textNodeLinkFn(vm, el, host, scope) {
	    var fragClone = frag.cloneNode(true);
	    var childNodes = toArray(fragClone.childNodes);
	    var token, value, node;
	    for (var i = 0, l = tokens.length; i < l; i++) {
	      token = tokens[i];
	      value = token.value;
	      if (token.tag) {
	        node = childNodes[i];
	        if (token.oneTime) {
	          value = (scope || vm).$eval(value);
	          if (token.html) {
	            replace(node, parseTemplate(value, true));
	          } else {
	            node.data = _toString(value);
	          }
	        } else {
	          vm._bindDir(token.descriptor, node, host, scope);
	        }
	      }
	    }
	    replace(el, fragClone);
	  };
	}

	/**
	 * Compile a node list and return a childLinkFn.
	 *
	 * @param {NodeList} nodeList
	 * @param {Object} options
	 * @return {Function|undefined}
	 */

	function compileNodeList(nodeList, options) {
	  var linkFns = [];
	  var nodeLinkFn, childLinkFn, node;
	  for (var i = 0, l = nodeList.length; i < l; i++) {
	    node = nodeList[i];
	    nodeLinkFn = compileNode(node, options);
	    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
	    linkFns.push(nodeLinkFn, childLinkFn);
	  }
	  return linkFns.length ? makeChildLinkFn(linkFns) : null;
	}

	/**
	 * Make a child link function for a node's childNodes.
	 *
	 * @param {Array<Function>} linkFns
	 * @return {Function} childLinkFn
	 */

	function makeChildLinkFn(linkFns) {
	  return function childLinkFn(vm, nodes, host, scope, frag) {
	    var node, nodeLinkFn, childrenLinkFn;
	    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
	      node = nodes[n];
	      nodeLinkFn = linkFns[i++];
	      childrenLinkFn = linkFns[i++];
	      // cache childNodes before linking parent, fix #657
	      var childNodes = toArray(node.childNodes);
	      if (nodeLinkFn) {
	        nodeLinkFn(vm, node, host, scope, frag);
	      }
	      if (childrenLinkFn) {
	        childrenLinkFn(vm, childNodes, host, scope, frag);
	      }
	    }
	  };
	}

	/**
	 * Check for element directives (custom elements that should
	 * be resovled as terminal directives).
	 *
	 * @param {Element} el
	 * @param {Object} options
	 */

	function checkElementDirectives(el, options) {
	  var tag = el.tagName.toLowerCase();
	  if (commonTagRE.test(tag)) {
	    return;
	  }
	  var def = resolveAsset(options, 'elementDirectives', tag);
	  if (def) {
	    return makeTerminalNodeLinkFn(el, tag, '', options, def);
	  }
	}

	/**
	 * Check if an element is a component. If yes, return
	 * a component link function.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|undefined}
	 */

	function checkComponent(el, options) {
	  var component = checkComponentAttr(el, options);
	  if (component) {
	    var ref = findRef(el);
	    var descriptor = {
	      name: 'component',
	      ref: ref,
	      expression: component.id,
	      def: internalDirectives.component,
	      modifiers: {
	        literal: !component.dynamic
	      }
	    };
	    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
	      if (ref) {
	        defineReactive((scope || vm).$refs, ref, null);
	      }
	      vm._bindDir(descriptor, el, host, scope, frag);
	    };
	    componentLinkFn.terminal = true;
	    return componentLinkFn;
	  }
	}

	/**
	 * Check an element for terminal directives in fixed order.
	 * If it finds one, return a terminal link function.
	 *
	 * @param {Element} el
	 * @param {Array} attrs
	 * @param {Object} options
	 * @return {Function} terminalLinkFn
	 */

	function checkTerminalDirectives(el, attrs, options) {
	  // skip v-pre
	  if (getAttr(el, 'v-pre') !== null) {
	    return skip;
	  }
	  // skip v-else block, but only if following v-if
	  if (el.hasAttribute('v-else')) {
	    var prev = el.previousElementSibling;
	    if (prev && prev.hasAttribute('v-if')) {
	      return skip;
	    }
	  }

	  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
	  for (var i = 0, j = attrs.length; i < j; i++) {
	    attr = attrs[i];
	    name = attr.name.replace(modifierRE, '');
	    if (matched = name.match(dirAttrRE)) {
	      def = resolveAsset(options, 'directives', matched[1]);
	      if (def && def.terminal) {
	        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
	          termDef = def;
	          rawName = attr.name;
	          modifiers = parseModifiers(attr.name);
	          value = attr.value;
	          dirName = matched[1];
	          arg = matched[2];
	        }
	      }
	    }
	  }

	  if (termDef) {
	    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
	  }
	}

	function skip() {}
	skip.terminal = true;

	/**
	 * Build a node link function for a terminal directive.
	 * A terminal link function terminates the current
	 * compilation recursion and handles compilation of the
	 * subtree in the directive.
	 *
	 * @param {Element} el
	 * @param {String} dirName
	 * @param {String} value
	 * @param {Object} options
	 * @param {Object} def
	 * @param {String} [rawName]
	 * @param {String} [arg]
	 * @param {Object} [modifiers]
	 * @return {Function} terminalLinkFn
	 */

	function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
	  var parsed = parseDirective(value);
	  var descriptor = {
	    name: dirName,
	    arg: arg,
	    expression: parsed.expression,
	    filters: parsed.filters,
	    raw: value,
	    attr: rawName,
	    modifiers: modifiers,
	    def: def
	  };
	  // check ref for v-for and router-view
	  if (dirName === 'for' || dirName === 'router-view') {
	    descriptor.ref = findRef(el);
	  }
	  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
	    if (descriptor.ref) {
	      defineReactive((scope || vm).$refs, descriptor.ref, null);
	    }
	    vm._bindDir(descriptor, el, host, scope, frag);
	  };
	  fn.terminal = true;
	  return fn;
	}

	/**
	 * Compile the directives on an element and return a linker.
	 *
	 * @param {Array|NamedNodeMap} attrs
	 * @param {Object} options
	 * @return {Function}
	 */

	function compileDirectives(attrs, options) {
	  var i = attrs.length;
	  var dirs = [];
	  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
	  while (i--) {
	    attr = attrs[i];
	    name = rawName = attr.name;
	    value = rawValue = attr.value;
	    tokens = parseText(value);
	    // reset arg
	    arg = null;
	    // check modifiers
	    modifiers = parseModifiers(name);
	    name = name.replace(modifierRE, '');

	    // attribute interpolations
	    if (tokens) {
	      value = tokensToExp(tokens);
	      arg = name;
	      pushDir('bind', directives.bind, tokens);
	      // warn against mixing mustaches with v-bind
	      if (true) {
	        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
	          return attr.name === ':class' || attr.name === 'v-bind:class';
	        })) {
	          warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
	        }
	      }
	    } else

	      // special attribute: transition
	      if (transitionRE.test(name)) {
	        modifiers.literal = !bindRE.test(name);
	        pushDir('transition', internalDirectives.transition);
	      } else

	        // event handlers
	        if (onRE.test(name)) {
	          arg = name.replace(onRE, '');
	          pushDir('on', directives.on);
	        } else

	          // attribute bindings
	          if (bindRE.test(name)) {
	            dirName = name.replace(bindRE, '');
	            if (dirName === 'style' || dirName === 'class') {
	              pushDir(dirName, internalDirectives[dirName]);
	            } else {
	              arg = dirName;
	              pushDir('bind', directives.bind);
	            }
	          } else

	            // normal directives
	            if (matched = name.match(dirAttrRE)) {
	              dirName = matched[1];
	              arg = matched[2];

	              // skip v-else (when used with v-show)
	              if (dirName === 'else') {
	                continue;
	              }

	              dirDef = resolveAsset(options, 'directives', dirName, true);
	              if (dirDef) {
	                pushDir(dirName, dirDef);
	              }
	            }
	  }

	  /**
	   * Push a directive.
	   *
	   * @param {String} dirName
	   * @param {Object|Function} def
	   * @param {Array} [interpTokens]
	   */

	  function pushDir(dirName, def, interpTokens) {
	    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
	    var parsed = !hasOneTimeToken && parseDirective(value);
	    dirs.push({
	      name: dirName,
	      attr: rawName,
	      raw: rawValue,
	      def: def,
	      arg: arg,
	      modifiers: modifiers,
	      // conversion from interpolation strings with one-time token
	      // to expression is differed until directive bind time so that we
	      // have access to the actual vm context for one-time bindings.
	      expression: parsed && parsed.expression,
	      filters: parsed && parsed.filters,
	      interp: interpTokens,
	      hasOneTime: hasOneTimeToken
	    });
	  }

	  if (dirs.length) {
	    return makeNodeLinkFn(dirs);
	  }
	}

	/**
	 * Parse modifiers from directive attribute name.
	 *
	 * @param {String} name
	 * @return {Object}
	 */

	function parseModifiers(name) {
	  var res = Object.create(null);
	  var match = name.match(modifierRE);
	  if (match) {
	    var i = match.length;
	    while (i--) {
	      res[match[i].slice(1)] = true;
	    }
	  }
	  return res;
	}

	/**
	 * Build a link function for all directives on a single node.
	 *
	 * @param {Array} directives
	 * @return {Function} directivesLinkFn
	 */

	function makeNodeLinkFn(directives) {
	  return function nodeLinkFn(vm, el, host, scope, frag) {
	    // reverse apply because it's sorted low to high
	    var i = directives.length;
	    while (i--) {
	      vm._bindDir(directives[i], el, host, scope, frag);
	    }
	  };
	}

	/**
	 * Check if an interpolation string contains one-time tokens.
	 *
	 * @param {Array} tokens
	 * @return {Boolean}
	 */

	function hasOneTime(tokens) {
	  var i = tokens.length;
	  while (i--) {
	    if (tokens[i].oneTime) return true;
	  }
	}

	function isScript(el) {
	  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
	}

	var specialCharRE = /[^\w\-:\.]/;

	/**
	 * Process an element or a DocumentFragment based on a
	 * instance option object. This allows us to transclude
	 * a template node/fragment before the instance is created,
	 * so the processed fragment can then be cloned and reused
	 * in v-for.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */

	function transclude(el, options) {
	  // extract container attributes to pass them down
	  // to compiler, because they need to be compiled in
	  // parent scope. we are mutating the options object here
	  // assuming the same object will be used for compile
	  // right after this.
	  if (options) {
	    options._containerAttrs = extractAttrs(el);
	  }
	  // for template tags, what we want is its content as
	  // a documentFragment (for fragment instances)
	  if (isTemplate(el)) {
	    el = parseTemplate(el);
	  }
	  if (options) {
	    if (options._asComponent && !options.template) {
	      options.template = '<slot></slot>';
	    }
	    if (options.template) {
	      options._content = extractContent(el);
	      el = transcludeTemplate(el, options);
	    }
	  }
	  if (isFragment(el)) {
	    // anchors for fragment instance
	    // passing in `persist: true` to avoid them being
	    // discarded by IE during template cloning
	    prepend(createAnchor('v-start', true), el);
	    el.appendChild(createAnchor('v-end', true));
	  }
	  return el;
	}

	/**
	 * Process the template option.
	 * If the replace option is true this will swap the $el.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */

	function transcludeTemplate(el, options) {
	  var template = options.template;
	  var frag = parseTemplate(template, true);
	  if (frag) {
	    var replacer = frag.firstChild;
	    var tag = replacer.tagName && replacer.tagName.toLowerCase();
	    if (options.replace) {
	      /* istanbul ignore if */
	      if (el === document.body) {
	        ("development") !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
	      }
	      // there are many cases where the instance must
	      // become a fragment instance: basically anything that
	      // can create more than 1 root nodes.
	      if (
	      // multi-children template
	      frag.childNodes.length > 1 ||
	      // non-element template
	      replacer.nodeType !== 1 ||
	      // single nested component
	      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
	      // element directive
	      resolveAsset(options, 'elementDirectives', tag) ||
	      // for block
	      replacer.hasAttribute('v-for') ||
	      // if block
	      replacer.hasAttribute('v-if')) {
	        return frag;
	      } else {
	        options._replacerAttrs = extractAttrs(replacer);
	        mergeAttrs(el, replacer);
	        return replacer;
	      }
	    } else {
	      el.appendChild(frag);
	      return el;
	    }
	  } else {
	    ("development") !== 'production' && warn('Invalid template option: ' + template);
	  }
	}

	/**
	 * Helper to extract a component container's attributes
	 * into a plain object array.
	 *
	 * @param {Element} el
	 * @return {Array}
	 */

	function extractAttrs(el) {
	  if (el.nodeType === 1 && el.hasAttributes()) {
	    return toArray(el.attributes);
	  }
	}

	/**
	 * Merge the attributes of two elements, and make sure
	 * the class names are merged properly.
	 *
	 * @param {Element} from
	 * @param {Element} to
	 */

	function mergeAttrs(from, to) {
	  var attrs = from.attributes;
	  var i = attrs.length;
	  var name, value;
	  while (i--) {
	    name = attrs[i].name;
	    value = attrs[i].value;
	    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
	      to.setAttribute(name, value);
	    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
	      value.split(/\s+/).forEach(function (cls) {
	        addClass(to, cls);
	      });
	    }
	  }
	}

	/**
	 * Scan and determine slot content distribution.
	 * We do this during transclusion instead at compile time so that
	 * the distribution is decoupled from the compilation order of
	 * the slots.
	 *
	 * @param {Element|DocumentFragment} template
	 * @param {Element} content
	 * @param {Vue} vm
	 */

	function resolveSlots(vm, content) {
	  if (!content) {
	    return;
	  }
	  var contents = vm._slotContents = Object.create(null);
	  var el, name;
	  for (var i = 0, l = content.children.length; i < l; i++) {
	    el = content.children[i];
	    /* eslint-disable no-cond-assign */
	    if (name = el.getAttribute('slot')) {
	      (contents[name] || (contents[name] = [])).push(el);
	    }
	    /* eslint-enable no-cond-assign */
	    if (("development") !== 'production' && getBindAttr(el, 'slot')) {
	      warn('The "slot" attribute must be static.', vm.$parent);
	    }
	  }
	  for (name in contents) {
	    contents[name] = extractFragment(contents[name], content);
	  }
	  if (content.hasChildNodes()) {
	    var nodes = content.childNodes;
	    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
	      return;
	    }
	    contents['default'] = extractFragment(content.childNodes, content);
	  }
	}

	/**
	 * Extract qualified content nodes from a node list.
	 *
	 * @param {NodeList} nodes
	 * @return {DocumentFragment}
	 */

	function extractFragment(nodes, parent) {
	  var frag = document.createDocumentFragment();
	  nodes = toArray(nodes);
	  for (var i = 0, l = nodes.length; i < l; i++) {
	    var node = nodes[i];
	    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
	      parent.removeChild(node);
	      node = parseTemplate(node, true);
	    }
	    frag.appendChild(node);
	  }
	  return frag;
	}



	var compiler = Object.freeze({
		compile: compile,
		compileAndLinkProps: compileAndLinkProps,
		compileRoot: compileRoot,
		transclude: transclude,
		resolveSlots: resolveSlots
	});

	function stateMixin (Vue) {
	  /**
	   * Accessor for `$data` property, since setting $data
	   * requires observing the new object and updating
	   * proxied properties.
	   */

	  Object.defineProperty(Vue.prototype, '$data', {
	    get: function get() {
	      return this._data;
	    },
	    set: function set(newData) {
	      if (newData !== this._data) {
	        this._setData(newData);
	      }
	    }
	  });

	  /**
	   * Setup the scope of an instance, which contains:
	   * - observed data
	   * - computed properties
	   * - user methods
	   * - meta properties
	   */

	  Vue.prototype._initState = function () {
	    this._initProps();
	    this._initMeta();
	    this._initMethods();
	    this._initData();
	    this._initComputed();
	  };

	  /**
	   * Initialize props.
	   */

	  Vue.prototype._initProps = function () {
	    var options = this.$options;
	    var el = options.el;
	    var props = options.props;
	    if (props && !el) {
	      ("development") !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
	    }
	    // make sure to convert string selectors into element now
	    el = options.el = query(el);
	    this._propsUnlinkFn = el && el.nodeType === 1 && props
	    // props must be linked in proper scope if inside v-for
	    ? compileAndLinkProps(this, el, props, this._scope) : null;
	  };

	  /**
	   * Initialize the data.
	   */

	  Vue.prototype._initData = function () {
	    var dataFn = this.$options.data;
	    var data = this._data = dataFn ? dataFn() : {};
	    if (!isPlainObject(data)) {
	      data = {};
	      ("development") !== 'production' && warn('data functions should return an object.', this);
	    }
	    var props = this._props;
	    // proxy data on instance
	    var keys = Object.keys(data);
	    var i, key;
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      // there are two scenarios where we can proxy a data key:
	      // 1. it's not already defined as a prop
	      // 2. it's provided via a instantiation option AND there are no
	      //    template prop present
	      if (!props || !hasOwn(props, key)) {
	        this._proxy(key);
	      } else if (true) {
	        warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
	      }
	    }
	    // observe data
	    observe(data, this);
	  };

	  /**
	   * Swap the instance's $data. Called in $data's setter.
	   *
	   * @param {Object} newData
	   */

	  Vue.prototype._setData = function (newData) {
	    newData = newData || {};
	    var oldData = this._data;
	    this._data = newData;
	    var keys, key, i;
	    // unproxy keys not present in new data
	    keys = Object.keys(oldData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!(key in newData)) {
	        this._unproxy(key);
	      }
	    }
	    // proxy keys not already proxied,
	    // and trigger change for changed values
	    keys = Object.keys(newData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!hasOwn(this, key)) {
	        // new property
	        this._proxy(key);
	      }
	    }
	    oldData.__ob__.removeVm(this);
	    observe(newData, this);
	    this._digest();
	  };

	  /**
	   * Proxy a property, so that
	   * vm.prop === vm._data.prop
	   *
	   * @param {String} key
	   */

	  Vue.prototype._proxy = function (key) {
	    if (!isReserved(key)) {
	      // need to store ref to self here
	      // because these getter/setters might
	      // be called by child scopes via
	      // prototype inheritance.
	      var self = this;
	      Object.defineProperty(self, key, {
	        configurable: true,
	        enumerable: true,
	        get: function proxyGetter() {
	          return self._data[key];
	        },
	        set: function proxySetter(val) {
	          self._data[key] = val;
	        }
	      });
	    }
	  };

	  /**
	   * Unproxy a property.
	   *
	   * @param {String} key
	   */

	  Vue.prototype._unproxy = function (key) {
	    if (!isReserved(key)) {
	      delete this[key];
	    }
	  };

	  /**
	   * Force update on every watcher in scope.
	   */

	  Vue.prototype._digest = function () {
	    for (var i = 0, l = this._watchers.length; i < l; i++) {
	      this._watchers[i].update(true); // shallow updates
	    }
	  };

	  /**
	   * Setup computed properties. They are essentially
	   * special getter/setters
	   */

	  function noop() {}
	  Vue.prototype._initComputed = function () {
	    var computed = this.$options.computed;
	    if (computed) {
	      for (var key in computed) {
	        var userDef = computed[key];
	        var def = {
	          enumerable: true,
	          configurable: true
	        };
	        if (typeof userDef === 'function') {
	          def.get = makeComputedGetter(userDef, this);
	          def.set = noop;
	        } else {
	          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
	          def.set = userDef.set ? bind(userDef.set, this) : noop;
	        }
	        Object.defineProperty(this, key, def);
	      }
	    }
	  };

	  function makeComputedGetter(getter, owner) {
	    var watcher = new Watcher(owner, getter, null, {
	      lazy: true
	    });
	    return function computedGetter() {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value;
	    };
	  }

	  /**
	   * Setup instance methods. Methods must be bound to the
	   * instance since they might be passed down as a prop to
	   * child components.
	   */

	  Vue.prototype._initMethods = function () {
	    var methods = this.$options.methods;
	    if (methods) {
	      for (var key in methods) {
	        this[key] = bind(methods[key], this);
	      }
	    }
	  };

	  /**
	   * Initialize meta information like $index, $key & $value.
	   */

	  Vue.prototype._initMeta = function () {
	    var metas = this.$options._meta;
	    if (metas) {
	      for (var key in metas) {
	        defineReactive(this, key, metas[key]);
	      }
	    }
	  };
	}

	var eventRE = /^v-on:|^@/;

	function eventsMixin (Vue) {
	  /**
	   * Setup the instance's option events & watchers.
	   * If the value is a string, we pull it from the
	   * instance's methods by name.
	   */

	  Vue.prototype._initEvents = function () {
	    var options = this.$options;
	    if (options._asComponent) {
	      registerComponentEvents(this, options.el);
	    }
	    registerCallbacks(this, '$on', options.events);
	    registerCallbacks(this, '$watch', options.watch);
	  };

	  /**
	   * Register v-on events on a child component
	   *
	   * @param {Vue} vm
	   * @param {Element} el
	   */

	  function registerComponentEvents(vm, el) {
	    var attrs = el.attributes;
	    var name, value, handler;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      name = attrs[i].name;
	      if (eventRE.test(name)) {
	        name = name.replace(eventRE, '');
	        // force the expression into a statement so that
	        // it always dynamically resolves the method to call (#2670)
	        // kinda ugly hack, but does the job.
	        value = attrs[i].value;
	        if (isSimplePath(value)) {
	          value += '.apply(this, $arguments)';
	        }
	        handler = (vm._scope || vm._context).$eval(value, true);
	        handler._fromParent = true;
	        vm.$on(name.replace(eventRE), handler);
	      }
	    }
	  }

	  /**
	   * Register callbacks for option events and watchers.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {Object} hash
	   */

	  function registerCallbacks(vm, action, hash) {
	    if (!hash) return;
	    var handlers, key, i, j;
	    for (key in hash) {
	      handlers = hash[key];
	      if (isArray(handlers)) {
	        for (i = 0, j = handlers.length; i < j; i++) {
	          register(vm, action, key, handlers[i]);
	        }
	      } else {
	        register(vm, action, key, handlers);
	      }
	    }
	  }

	  /**
	   * Helper to register an event/watch callback.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {String} key
	   * @param {Function|String|Object} handler
	   * @param {Object} [options]
	   */

	  function register(vm, action, key, handler, options) {
	    var type = typeof handler;
	    if (type === 'function') {
	      vm[action](key, handler, options);
	    } else if (type === 'string') {
	      var methods = vm.$options.methods;
	      var method = methods && methods[handler];
	      if (method) {
	        vm[action](key, method, options);
	      } else {
	        ("development") !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
	      }
	    } else if (handler && type === 'object') {
	      register(vm, action, key, handler.handler, handler);
	    }
	  }

	  /**
	   * Setup recursive attached/detached calls
	   */

	  Vue.prototype._initDOMHooks = function () {
	    this.$on('hook:attached', onAttached);
	    this.$on('hook:detached', onDetached);
	  };

	  /**
	   * Callback to recursively call attached hook on children
	   */

	  function onAttached() {
	    if (!this._isAttached) {
	      this._isAttached = true;
	      this.$children.forEach(callAttach);
	    }
	  }

	  /**
	   * Iterator to call attached hook
	   *
	   * @param {Vue} child
	   */

	  function callAttach(child) {
	    if (!child._isAttached && inDoc(child.$el)) {
	      child._callHook('attached');
	    }
	  }

	  /**
	   * Callback to recursively call detached hook on children
	   */

	  function onDetached() {
	    if (this._isAttached) {
	      this._isAttached = false;
	      this.$children.forEach(callDetach);
	    }
	  }

	  /**
	   * Iterator to call detached hook
	   *
	   * @param {Vue} child
	   */

	  function callDetach(child) {
	    if (child._isAttached && !inDoc(child.$el)) {
	      child._callHook('detached');
	    }
	  }

	  /**
	   * Trigger all handlers for a hook
	   *
	   * @param {String} hook
	   */

	  Vue.prototype._callHook = function (hook) {
	    this.$emit('pre-hook:' + hook);
	    var handlers = this.$options[hook];
	    if (handlers) {
	      for (var i = 0, j = handlers.length; i < j; i++) {
	        handlers[i].call(this);
	      }
	    }
	    this.$emit('hook:' + hook);
	  };
	}

	function noop$1() {}

	/**
	 * A directive links a DOM element with a piece of data,
	 * which is the result of evaluating an expression.
	 * It registers a watcher with the expression and calls
	 * the DOM update function when a change is triggered.
	 *
	 * @param {Object} descriptor
	 *                 - {String} name
	 *                 - {Object} def
	 *                 - {String} expression
	 *                 - {Array<Object>} [filters]
	 *                 - {Object} [modifiers]
	 *                 - {Boolean} literal
	 *                 - {String} attr
	 *                 - {String} arg
	 *                 - {String} raw
	 *                 - {String} [ref]
	 *                 - {Array<Object>} [interp]
	 *                 - {Boolean} [hasOneTime]
	 * @param {Vue} vm
	 * @param {Node} el
	 * @param {Vue} [host] - transclusion host component
	 * @param {Object} [scope] - v-for scope
	 * @param {Fragment} [frag] - owner fragment
	 * @constructor
	 */
	function Directive(descriptor, vm, el, host, scope, frag) {
	  this.vm = vm;
	  this.el = el;
	  // copy descriptor properties
	  this.descriptor = descriptor;
	  this.name = descriptor.name;
	  this.expression = descriptor.expression;
	  this.arg = descriptor.arg;
	  this.modifiers = descriptor.modifiers;
	  this.filters = descriptor.filters;
	  this.literal = this.modifiers && this.modifiers.literal;
	  // private
	  this._locked = false;
	  this._bound = false;
	  this._listeners = null;
	  // link context
	  this._host = host;
	  this._scope = scope;
	  this._frag = frag;
	  // store directives on node in dev mode
	  if (("development") !== 'production' && this.el) {
	    this.el._vue_directives = this.el._vue_directives || [];
	    this.el._vue_directives.push(this);
	  }
	}

	/**
	 * Initialize the directive, mixin definition properties,
	 * setup the watcher, call definition bind() and update()
	 * if present.
	 */

	Directive.prototype._bind = function () {
	  var name = this.name;
	  var descriptor = this.descriptor;

	  // remove attribute
	  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
	    var attr = descriptor.attr || 'v-' + name;
	    this.el.removeAttribute(attr);
	  }

	  // copy def properties
	  var def = descriptor.def;
	  if (typeof def === 'function') {
	    this.update = def;
	  } else {
	    extend(this, def);
	  }

	  // setup directive params
	  this._setupParams();

	  // initial bind
	  if (this.bind) {
	    this.bind();
	  }
	  this._bound = true;

	  if (this.literal) {
	    this.update && this.update(descriptor.raw);
	  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
	    // wrapped updater for context
	    var dir = this;
	    if (this.update) {
	      this._update = function (val, oldVal) {
	        if (!dir._locked) {
	          dir.update(val, oldVal);
	        }
	      };
	    } else {
	      this._update = noop$1;
	    }
	    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
	    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
	    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
	    {
	      filters: this.filters,
	      twoWay: this.twoWay,
	      deep: this.deep,
	      preProcess: preProcess,
	      postProcess: postProcess,
	      scope: this._scope
	    });
	    // v-model with inital inline value need to sync back to
	    // model instead of update to DOM on init. They would
	    // set the afterBind hook to indicate that.
	    if (this.afterBind) {
	      this.afterBind();
	    } else if (this.update) {
	      this.update(watcher.value);
	    }
	  }
	};

	/**
	 * Setup all param attributes, e.g. track-by,
	 * transition-mode, etc...
	 */

	Directive.prototype._setupParams = function () {
	  if (!this.params) {
	    return;
	  }
	  var params = this.params;
	  // swap the params array with a fresh object.
	  this.params = Object.create(null);
	  var i = params.length;
	  var key, val, mappedKey;
	  while (i--) {
	    key = hyphenate(params[i]);
	    mappedKey = camelize(key);
	    val = getBindAttr(this.el, key);
	    if (val != null) {
	      // dynamic
	      this._setupParamWatcher(mappedKey, val);
	    } else {
	      // static
	      val = getAttr(this.el, key);
	      if (val != null) {
	        this.params[mappedKey] = val === '' ? true : val;
	      }
	    }
	  }
	};

	/**
	 * Setup a watcher for a dynamic param.
	 *
	 * @param {String} key
	 * @param {String} expression
	 */

	Directive.prototype._setupParamWatcher = function (key, expression) {
	  var self = this;
	  var called = false;
	  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
	    self.params[key] = val;
	    // since we are in immediate mode,
	    // only call the param change callbacks if this is not the first update.
	    if (called) {
	      var cb = self.paramWatchers && self.paramWatchers[key];
	      if (cb) {
	        cb.call(self, val, oldVal);
	      }
	    } else {
	      called = true;
	    }
	  }, {
	    immediate: true,
	    user: false
	  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
	};

	/**
	 * Check if the directive is a function caller
	 * and if the expression is a callable one. If both true,
	 * we wrap up the expression and use it as the event
	 * handler.
	 *
	 * e.g. on-click="a++"
	 *
	 * @return {Boolean}
	 */

	Directive.prototype._checkStatement = function () {
	  var expression = this.expression;
	  if (expression && this.acceptStatement && !isSimplePath(expression)) {
	    var fn = parseExpression(expression).get;
	    var scope = this._scope || this.vm;
	    var handler = function handler(e) {
	      scope.$event = e;
	      fn.call(scope, scope);
	      scope.$event = null;
	    };
	    if (this.filters) {
	      handler = scope._applyFilters(handler, null, this.filters);
	    }
	    this.update(handler);
	    return true;
	  }
	};

	/**
	 * Set the corresponding value with the setter.
	 * This should only be used in two-way directives
	 * e.g. v-model.
	 *
	 * @param {*} value
	 * @public
	 */

	Directive.prototype.set = function (value) {
	  /* istanbul ignore else */
	  if (this.twoWay) {
	    this._withLock(function () {
	      this._watcher.set(value);
	    });
	  } else if (true) {
	    warn('Directive.set() can only be used inside twoWay' + 'directives.');
	  }
	};

	/**
	 * Execute a function while preventing that function from
	 * triggering updates on this directive instance.
	 *
	 * @param {Function} fn
	 */

	Directive.prototype._withLock = function (fn) {
	  var self = this;
	  self._locked = true;
	  fn.call(self);
	  nextTick(function () {
	    self._locked = false;
	  });
	};

	/**
	 * Convenience method that attaches a DOM event listener
	 * to the directive element and autometically tears it down
	 * during unbind.
	 *
	 * @param {String} event
	 * @param {Function} handler
	 * @param {Boolean} [useCapture]
	 */

	Directive.prototype.on = function (event, handler, useCapture) {
	  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
	};

	/**
	 * Teardown the watcher and call unbind.
	 */

	Directive.prototype._teardown = function () {
	  if (this._bound) {
	    this._bound = false;
	    if (this.unbind) {
	      this.unbind();
	    }
	    if (this._watcher) {
	      this._watcher.teardown();
	    }
	    var listeners = this._listeners;
	    var i;
	    if (listeners) {
	      i = listeners.length;
	      while (i--) {
	        off(this.el, listeners[i][0], listeners[i][1]);
	      }
	    }
	    var unwatchFns = this._paramUnwatchFns;
	    if (unwatchFns) {
	      i = unwatchFns.length;
	      while (i--) {
	        unwatchFns[i]();
	      }
	    }
	    if (("development") !== 'production' && this.el) {
	      this.el._vue_directives.$remove(this);
	    }
	    this.vm = this.el = this._watcher = this._listeners = null;
	  }
	};

	function lifecycleMixin (Vue) {
	  /**
	   * Update v-ref for component.
	   *
	   * @param {Boolean} remove
	   */

	  Vue.prototype._updateRef = function (remove) {
	    var ref = this.$options._ref;
	    if (ref) {
	      var refs = (this._scope || this._context).$refs;
	      if (remove) {
	        if (refs[ref] === this) {
	          refs[ref] = null;
	        }
	      } else {
	        refs[ref] = this;
	      }
	    }
	  };

	  /**
	   * Transclude, compile and link element.
	   *
	   * If a pre-compiled linker is available, that means the
	   * passed in element will be pre-transcluded and compiled
	   * as well - all we need to do is to call the linker.
	   *
	   * Otherwise we need to call transclude/compile/link here.
	   *
	   * @param {Element} el
	   */

	  Vue.prototype._compile = function (el) {
	    var options = this.$options;

	    // transclude and init element
	    // transclude can potentially replace original
	    // so we need to keep reference; this step also injects
	    // the template and caches the original attributes
	    // on the container node and replacer node.
	    var original = el;
	    el = transclude(el, options);
	    this._initElement(el);

	    // handle v-pre on root node (#2026)
	    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
	      return;
	    }

	    // root is always compiled per-instance, because
	    // container attrs and props can be different every time.
	    var contextOptions = this._context && this._context.$options;
	    var rootLinker = compileRoot(el, options, contextOptions);

	    // resolve slot distribution
	    resolveSlots(this, options._content);

	    // compile and link the rest
	    var contentLinkFn;
	    var ctor = this.constructor;
	    // component compilation can be cached
	    // as long as it's not using inline-template
	    if (options._linkerCachable) {
	      contentLinkFn = ctor.linker;
	      if (!contentLinkFn) {
	        contentLinkFn = ctor.linker = compile(el, options);
	      }
	    }

	    // link phase
	    // make sure to link root with prop scope!
	    var rootUnlinkFn = rootLinker(this, el, this._scope);
	    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);

	    // register composite unlink function
	    // to be called during instance destruction
	    this._unlinkFn = function () {
	      rootUnlinkFn();
	      // passing destroying: true to avoid searching and
	      // splicing the directives
	      contentUnlinkFn(true);
	    };

	    // finally replace original
	    if (options.replace) {
	      replace(original, el);
	    }

	    this._isCompiled = true;
	    this._callHook('compiled');
	  };

	  /**
	   * Initialize instance element. Called in the public
	   * $mount() method.
	   *
	   * @param {Element} el
	   */

	  Vue.prototype._initElement = function (el) {
	    if (isFragment(el)) {
	      this._isFragment = true;
	      this.$el = this._fragmentStart = el.firstChild;
	      this._fragmentEnd = el.lastChild;
	      // set persisted text anchors to empty
	      if (this._fragmentStart.nodeType === 3) {
	        this._fragmentStart.data = this._fragmentEnd.data = '';
	      }
	      this._fragment = el;
	    } else {
	      this.$el = el;
	    }
	    this.$el.__vue__ = this;
	    this._callHook('beforeCompile');
	  };

	  /**
	   * Create and bind a directive to an element.
	   *
	   * @param {Object} descriptor - parsed directive descriptor
	   * @param {Node} node   - target node
	   * @param {Vue} [host] - transclusion host component
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - owner fragment
	   */

	  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
	    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
	  };

	  /**
	   * Teardown an instance, unobserves the data, unbind all the
	   * directives, turn off all the event listeners, etc.
	   *
	   * @param {Boolean} remove - whether to remove the DOM node.
	   * @param {Boolean} deferCleanup - if true, defer cleanup to
	   *                                 be called later
	   */

	  Vue.prototype._destroy = function (remove, deferCleanup) {
	    if (this._isBeingDestroyed) {
	      if (!deferCleanup) {
	        this._cleanup();
	      }
	      return;
	    }

	    var destroyReady;
	    var pendingRemoval;

	    var self = this;
	    // Cleanup should be called either synchronously or asynchronoysly as
	    // callback of this.$remove(), or if remove and deferCleanup are false.
	    // In any case it should be called after all other removing, unbinding and
	    // turning of is done
	    var cleanupIfPossible = function cleanupIfPossible() {
	      if (destroyReady && !pendingRemoval && !deferCleanup) {
	        self._cleanup();
	      }
	    };

	    // remove DOM element
	    if (remove && this.$el) {
	      pendingRemoval = true;
	      this.$remove(function () {
	        pendingRemoval = false;
	        cleanupIfPossible();
	      });
	    }

	    this._callHook('beforeDestroy');
	    this._isBeingDestroyed = true;
	    var i;
	    // remove self from parent. only necessary
	    // if parent is not being destroyed as well.
	    var parent = this.$parent;
	    if (parent && !parent._isBeingDestroyed) {
	      parent.$children.$remove(this);
	      // unregister ref (remove: true)
	      this._updateRef(true);
	    }
	    // destroy all children.
	    i = this.$children.length;
	    while (i--) {
	      this.$children[i].$destroy();
	    }
	    // teardown props
	    if (this._propsUnlinkFn) {
	      this._propsUnlinkFn();
	    }
	    // teardown all directives. this also tearsdown all
	    // directive-owned watchers.
	    if (this._unlinkFn) {
	      this._unlinkFn();
	    }
	    i = this._watchers.length;
	    while (i--) {
	      this._watchers[i].teardown();
	    }
	    // remove reference to self on $el
	    if (this.$el) {
	      this.$el.__vue__ = null;
	    }

	    destroyReady = true;
	    cleanupIfPossible();
	  };

	  /**
	   * Clean up to ensure garbage collection.
	   * This is called after the leave transition if there
	   * is any.
	   */

	  Vue.prototype._cleanup = function () {
	    if (this._isDestroyed) {
	      return;
	    }
	    // remove self from owner fragment
	    // do it in cleanup so that we can call $destroy with
	    // defer right when a fragment is about to be removed.
	    if (this._frag) {
	      this._frag.children.$remove(this);
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (this._data && this._data.__ob__) {
	      this._data.__ob__.removeVm(this);
	    }
	    // Clean up references to private properties and other
	    // instances. preserve reference to _data so that proxy
	    // accessors still work. The only potential side effect
	    // here is that mutating the instance after it's destroyed
	    // may affect the state of other components that are still
	    // observing the same object, but that seems to be a
	    // reasonable responsibility for the user rather than
	    // always throwing an error on them.
	    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
	    // call the last hook...
	    this._isDestroyed = true;
	    this._callHook('destroyed');
	    // turn off all instance listeners.
	    this.$off();
	  };
	}

	function miscMixin (Vue) {
	  /**
	   * Apply a list of filter (descriptors) to a value.
	   * Using plain for loops here because this will be called in
	   * the getter of any watcher with filters so it is very
	   * performance sensitive.
	   *
	   * @param {*} value
	   * @param {*} [oldValue]
	   * @param {Array} filters
	   * @param {Boolean} write
	   * @return {*}
	   */

	  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
	    var filter, fn, args, arg, offset, i, l, j, k;
	    for (i = 0, l = filters.length; i < l; i++) {
	      filter = filters[write ? l - i - 1 : i];
	      fn = resolveAsset(this.$options, 'filters', filter.name, true);
	      if (!fn) continue;
	      fn = write ? fn.write : fn.read || fn;
	      if (typeof fn !== 'function') continue;
	      args = write ? [value, oldValue] : [value];
	      offset = write ? 2 : 1;
	      if (filter.args) {
	        for (j = 0, k = filter.args.length; j < k; j++) {
	          arg = filter.args[j];
	          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
	        }
	      }
	      value = fn.apply(this, args);
	    }
	    return value;
	  };

	  /**
	   * Resolve a component, depending on whether the component
	   * is defined normally or using an async factory function.
	   * Resolves synchronously if already resolved, otherwise
	   * resolves asynchronously and caches the resolved
	   * constructor on the factory.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */

	  Vue.prototype._resolveComponent = function (value, cb) {
	    var factory;
	    if (typeof value === 'function') {
	      factory = value;
	    } else {
	      factory = resolveAsset(this.$options, 'components', value, true);
	    }
	    /* istanbul ignore if */
	    if (!factory) {
	      return;
	    }
	    // async component factory
	    if (!factory.options) {
	      if (factory.resolved) {
	        // cached
	        cb(factory.resolved);
	      } else if (factory.requested) {
	        // pool callbacks
	        factory.pendingCallbacks.push(cb);
	      } else {
	        factory.requested = true;
	        var cbs = factory.pendingCallbacks = [cb];
	        factory.call(this, function resolve(res) {
	          if (isPlainObject(res)) {
	            res = Vue.extend(res);
	          }
	          // cache resolved
	          factory.resolved = res;
	          // invoke callbacks
	          for (var i = 0, l = cbs.length; i < l; i++) {
	            cbs[i](res);
	          }
	        }, function reject(reason) {
	          ("development") !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
	        });
	      }
	    } else {
	      // normal component
	      cb(factory);
	    }
	  };
	}

	var filterRE$1 = /[^|]\|[^|]/;

	function dataAPI (Vue) {
	  /**
	   * Get the value from an expression on this vm.
	   *
	   * @param {String} exp
	   * @param {Boolean} [asStatement]
	   * @return {*}
	   */

	  Vue.prototype.$get = function (exp, asStatement) {
	    var res = parseExpression(exp);
	    if (res) {
	      if (asStatement) {
	        var self = this;
	        return function statementHandler() {
	          self.$arguments = toArray(arguments);
	          var result = res.get.call(self, self);
	          self.$arguments = null;
	          return result;
	        };
	      } else {
	        try {
	          return res.get.call(this, this);
	        } catch (e) {}
	      }
	    }
	  };

	  /**
	   * Set the value from an expression on this vm.
	   * The expression must be a valid left-hand
	   * expression in an assignment.
	   *
	   * @param {String} exp
	   * @param {*} val
	   */

	  Vue.prototype.$set = function (exp, val) {
	    var res = parseExpression(exp, true);
	    if (res && res.set) {
	      res.set.call(this, this, val);
	    }
	  };

	  /**
	   * Delete a property on the VM
	   *
	   * @param {String} key
	   */

	  Vue.prototype.$delete = function (key) {
	    del(this._data, key);
	  };

	  /**
	   * Watch an expression, trigger callback when its
	   * value changes.
	   *
	   * @param {String|Function} expOrFn
	   * @param {Function} cb
	   * @param {Object} [options]
	   *                 - {Boolean} deep
	   *                 - {Boolean} immediate
	   * @return {Function} - unwatchFn
	   */

	  Vue.prototype.$watch = function (expOrFn, cb, options) {
	    var vm = this;
	    var parsed;
	    if (typeof expOrFn === 'string') {
	      parsed = parseDirective(expOrFn);
	      expOrFn = parsed.expression;
	    }
	    var watcher = new Watcher(vm, expOrFn, cb, {
	      deep: options && options.deep,
	      sync: options && options.sync,
	      filters: parsed && parsed.filters,
	      user: !options || options.user !== false
	    });
	    if (options && options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn() {
	      watcher.teardown();
	    };
	  };

	  /**
	   * Evaluate a text directive, including filters.
	   *
	   * @param {String} text
	   * @param {Boolean} [asStatement]
	   * @return {String}
	   */

	  Vue.prototype.$eval = function (text, asStatement) {
	    // check for filters.
	    if (filterRE$1.test(text)) {
	      var dir = parseDirective(text);
	      // the filter regex check might give false positive
	      // for pipes inside strings, so it's possible that
	      // we don't get any filters here
	      var val = this.$get(dir.expression, asStatement);
	      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
	    } else {
	      // no filter
	      return this.$get(text, asStatement);
	    }
	  };

	  /**
	   * Interpolate a piece of template text.
	   *
	   * @param {String} text
	   * @return {String}
	   */

	  Vue.prototype.$interpolate = function (text) {
	    var tokens = parseText(text);
	    var vm = this;
	    if (tokens) {
	      if (tokens.length === 1) {
	        return vm.$eval(tokens[0].value) + '';
	      } else {
	        return tokens.map(function (token) {
	          return token.tag ? vm.$eval(token.value) : token.value;
	        }).join('');
	      }
	    } else {
	      return text;
	    }
	  };

	  /**
	   * Log instance data as a plain JS object
	   * so that it is easier to inspect in console.
	   * This method assumes console is available.
	   *
	   * @param {String} [path]
	   */

	  Vue.prototype.$log = function (path) {
	    var data = path ? getPath(this._data, path) : this._data;
	    if (data) {
	      data = clean(data);
	    }
	    // include computed fields
	    if (!path) {
	      var key;
	      for (key in this.$options.computed) {
	        data[key] = clean(this[key]);
	      }
	      if (this._props) {
	        for (key in this._props) {
	          data[key] = clean(this[key]);
	        }
	      }
	    }
	    console.log(data);
	  };

	  /**
	   * "clean" a getter/setter converted object into a plain
	   * object copy.
	   *
	   * @param {Object} - obj
	   * @return {Object}
	   */

	  function clean(obj) {
	    return JSON.parse(JSON.stringify(obj));
	  }
	}

	function domAPI (Vue) {
	  /**
	   * Convenience on-instance nextTick. The callback is
	   * auto-bound to the instance, and this avoids component
	   * modules having to rely on the global Vue.
	   *
	   * @param {Function} fn
	   */

	  Vue.prototype.$nextTick = function (fn) {
	    nextTick(fn, this);
	  };

	  /**
	   * Append instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */

	  Vue.prototype.$appendTo = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, append, appendWithTransition);
	  };

	  /**
	   * Prepend instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */

	  Vue.prototype.$prependTo = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.hasChildNodes()) {
	      this.$before(target.firstChild, cb, withTransition);
	    } else {
	      this.$appendTo(target, cb, withTransition);
	    }
	    return this;
	  };

	  /**
	   * Insert instance before target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */

	  Vue.prototype.$before = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
	  };

	  /**
	   * Insert instance after target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */

	  Vue.prototype.$after = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.nextSibling) {
	      this.$before(target.nextSibling, cb, withTransition);
	    } else {
	      this.$appendTo(target.parentNode, cb, withTransition);
	    }
	    return this;
	  };

	  /**
	   * Remove instance from DOM
	   *
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */

	  Vue.prototype.$remove = function (cb, withTransition) {
	    if (!this.$el.parentNode) {
	      return cb && cb();
	    }
	    var inDocument = this._isAttached && inDoc(this.$el);
	    // if we are not in document, no need to check
	    // for transitions
	    if (!inDocument) withTransition = false;
	    var self = this;
	    var realCb = function realCb() {
	      if (inDocument) self._callHook('detached');
	      if (cb) cb();
	    };
	    if (this._isFragment) {
	      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
	    } else {
	      var op = withTransition === false ? removeWithCb : removeWithTransition;
	      op(this.$el, this, realCb);
	    }
	    return this;
	  };

	  /**
	   * Shared DOM insertion function.
	   *
	   * @param {Vue} vm
	   * @param {Element} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition]
	   * @param {Function} op1 - op for non-transition insert
	   * @param {Function} op2 - op for transition insert
	   * @return vm
	   */

	  function insert(vm, target, cb, withTransition, op1, op2) {
	    target = query(target);
	    var targetIsDetached = !inDoc(target);
	    var op = withTransition === false || targetIsDetached ? op1 : op2;
	    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
	    if (vm._isFragment) {
	      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
	        op(node, target, vm);
	      });
	      cb && cb();
	    } else {
	      op(vm.$el, target, vm, cb);
	    }
	    if (shouldCallHook) {
	      vm._callHook('attached');
	    }
	    return vm;
	  }

	  /**
	   * Check for selectors
	   *
	   * @param {String|Element} el
	   */

	  function query(el) {
	    return typeof el === 'string' ? document.querySelector(el) : el;
	  }

	  /**
	   * Append operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */

	  function append(el, target, vm, cb) {
	    target.appendChild(el);
	    if (cb) cb();
	  }

	  /**
	   * InsertBefore operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */

	  function beforeWithCb(el, target, vm, cb) {
	    before(el, target);
	    if (cb) cb();
	  }

	  /**
	   * Remove operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */

	  function removeWithCb(el, vm, cb) {
	    remove(el);
	    if (cb) cb();
	  }
	}

	function eventsAPI (Vue) {
	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */

	  Vue.prototype.$on = function (event, fn) {
	    (this._events[event] || (this._events[event] = [])).push(fn);
	    modifyListenerCount(this, event, 1);
	    return this;
	  };

	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */

	  Vue.prototype.$once = function (event, fn) {
	    var self = this;
	    function on() {
	      self.$off(event, on);
	      fn.apply(this, arguments);
	    }
	    on.fn = fn;
	    this.$on(event, on);
	    return this;
	  };

	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */

	  Vue.prototype.$off = function (event, fn) {
	    var cbs;
	    // all
	    if (!arguments.length) {
	      if (this.$parent) {
	        for (event in this._events) {
	          cbs = this._events[event];
	          if (cbs) {
	            modifyListenerCount(this, event, -cbs.length);
	          }
	        }
	      }
	      this._events = {};
	      return this;
	    }
	    // specific event
	    cbs = this._events[event];
	    if (!cbs) {
	      return this;
	    }
	    if (arguments.length === 1) {
	      modifyListenerCount(this, event, -cbs.length);
	      this._events[event] = null;
	      return this;
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        modifyListenerCount(this, event, -1);
	        cbs.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };

	  /**
	   * Trigger an event on self.
	   *
	   * @param {String|Object} event
	   * @return {Boolean} shouldPropagate
	   */

	  Vue.prototype.$emit = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    var cbs = this._events[event];
	    var shouldPropagate = isSource || !cbs;
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      // this is a somewhat hacky solution to the question raised
	      // in #2102: for an inline component listener like <comp @test="doThis">,
	      // the propagation handling is somewhat broken. Therefore we
	      // need to treat these inline callbacks differently.
	      var hasParentCbs = isSource && cbs.some(function (cb) {
	        return cb._fromParent;
	      });
	      if (hasParentCbs) {
	        shouldPropagate = false;
	      }
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        var cb = cbs[i];
	        var res = cb.apply(this, args);
	        if (res === true && (!hasParentCbs || cb._fromParent)) {
	          shouldPropagate = true;
	        }
	      }
	    }
	    return shouldPropagate;
	  };

	  /**
	   * Recursively broadcast an event to all children instances.
	   *
	   * @param {String|Object} event
	   * @param {...*} additional arguments
	   */

	  Vue.prototype.$broadcast = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    // if no child has registered for this event,
	    // then there's no need to broadcast.
	    if (!this._eventsCount[event]) return;
	    var children = this.$children;
	    var args = toArray(arguments);
	    if (isSource) {
	      // use object event to indicate non-source emit
	      // on children
	      args[0] = { name: event, source: this };
	    }
	    for (var i = 0, l = children.length; i < l; i++) {
	      var child = children[i];
	      var shouldPropagate = child.$emit.apply(child, args);
	      if (shouldPropagate) {
	        child.$broadcast.apply(child, args);
	      }
	    }
	    return this;
	  };

	  /**
	   * Recursively propagate an event up the parent chain.
	   *
	   * @param {String} event
	   * @param {...*} additional arguments
	   */

	  Vue.prototype.$dispatch = function (event) {
	    var shouldPropagate = this.$emit.apply(this, arguments);
	    if (!shouldPropagate) return;
	    var parent = this.$parent;
	    var args = toArray(arguments);
	    // use object event to indicate non-source emit
	    // on parents
	    args[0] = { name: event, source: this };
	    while (parent) {
	      shouldPropagate = parent.$emit.apply(parent, args);
	      parent = shouldPropagate ? parent.$parent : null;
	    }
	    return this;
	  };

	  /**
	   * Modify the listener counts on all parents.
	   * This bookkeeping allows $broadcast to return early when
	   * no child has listened to a certain event.
	   *
	   * @param {Vue} vm
	   * @param {String} event
	   * @param {Number} count
	   */

	  var hookRE = /^hook:/;
	  function modifyListenerCount(vm, event, count) {
	    var parent = vm.$parent;
	    // hooks do not get broadcasted so no need
	    // to do bookkeeping for them
	    if (!parent || !count || hookRE.test(event)) return;
	    while (parent) {
	      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
	      parent = parent.$parent;
	    }
	  }
	}

	function lifecycleAPI (Vue) {
	  /**
	   * Set instance target element and kick off the compilation
	   * process. The passed in `el` can be a selector string, an
	   * existing Element, or a DocumentFragment (for block
	   * instances).
	   *
	   * @param {Element|DocumentFragment|string} el
	   * @public
	   */

	  Vue.prototype.$mount = function (el) {
	    if (this._isCompiled) {
	      ("development") !== 'production' && warn('$mount() should be called only once.', this);
	      return;
	    }
	    el = query(el);
	    if (!el) {
	      el = document.createElement('div');
	    }
	    this._compile(el);
	    this._initDOMHooks();
	    if (inDoc(this.$el)) {
	      this._callHook('attached');
	      ready.call(this);
	    } else {
	      this.$once('hook:attached', ready);
	    }
	    return this;
	  };

	  /**
	   * Mark an instance as ready.
	   */

	  function ready() {
	    this._isAttached = true;
	    this._isReady = true;
	    this._callHook('ready');
	  }

	  /**
	   * Teardown the instance, simply delegate to the internal
	   * _destroy.
	   *
	   * @param {Boolean} remove
	   * @param {Boolean} deferCleanup
	   */

	  Vue.prototype.$destroy = function (remove, deferCleanup) {
	    this._destroy(remove, deferCleanup);
	  };

	  /**
	   * Partially compile a piece of DOM and return a
	   * decompile function.
	   *
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host]
	   * @param {Object} [scope]
	   * @param {Fragment} [frag]
	   * @return {Function}
	   */

	  Vue.prototype.$compile = function (el, host, scope, frag) {
	    return compile(el, this.$options, true)(this, el, host, scope, frag);
	  };
	}

	/**
	 * The exposed Vue constructor.
	 *
	 * API conventions:
	 * - public API methods/properties are prefixed with `$`
	 * - internal methods/properties are prefixed with `_`
	 * - non-prefixed properties are assumed to be proxied user
	 *   data.
	 *
	 * @constructor
	 * @param {Object} [options]
	 * @public
	 */

	function Vue(options) {
	  this._init(options);
	}

	// install internals
	initMixin(Vue);
	stateMixin(Vue);
	eventsMixin(Vue);
	lifecycleMixin(Vue);
	miscMixin(Vue);

	// install instance APIs
	dataAPI(Vue);
	domAPI(Vue);
	eventsAPI(Vue);
	lifecycleAPI(Vue);

	var slot = {

	  priority: SLOT,
	  params: ['name'],

	  bind: function bind() {
	    // this was resolved during component transclusion
	    var name = this.params.name || 'default';
	    var content = this.vm._slotContents && this.vm._slotContents[name];
	    if (!content || !content.hasChildNodes()) {
	      this.fallback();
	    } else {
	      this.compile(content.cloneNode(true), this.vm._context, this.vm);
	    }
	  },

	  compile: function compile(content, context, host) {
	    if (content && context) {
	      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
	        // if the inserted slot has v-if
	        // inject fallback content as the v-else
	        var elseBlock = document.createElement('template');
	        elseBlock.setAttribute('v-else', '');
	        elseBlock.innerHTML = this.el.innerHTML;
	        // the else block should be compiled in child scope
	        elseBlock._context = this.vm;
	        content.appendChild(elseBlock);
	      }
	      var scope = host ? host._scope : this._scope;
	      this.unlink = context.$compile(content, host, scope, this._frag);
	    }
	    if (content) {
	      replace(this.el, content);
	    } else {
	      remove(this.el);
	    }
	  },

	  fallback: function fallback() {
	    this.compile(extractContent(this.el, true), this.vm);
	  },

	  unbind: function unbind() {
	    if (this.unlink) {
	      this.unlink();
	    }
	  }
	};

	var partial = {

	  priority: PARTIAL,

	  params: ['name'],

	  // watch changes to name for dynamic partials
	  paramWatchers: {
	    name: function name(value) {
	      vIf.remove.call(this);
	      if (value) {
	        this.insert(value);
	      }
	    }
	  },

	  bind: function bind() {
	    this.anchor = createAnchor('v-partial');
	    replace(this.el, this.anchor);
	    this.insert(this.params.name);
	  },

	  insert: function insert(id) {
	    var partial = resolveAsset(this.vm.$options, 'partials', id, true);
	    if (partial) {
	      this.factory = new FragmentFactory(this.vm, partial);
	      vIf.insert.call(this);
	    }
	  },

	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	  }
	};

	var elementDirectives = {
	  slot: slot,
	  partial: partial
	};

	var convertArray = vFor._postProcess;

	/**
	 * Limit filter for arrays
	 *
	 * @param {Number} n
	 * @param {Number} offset (Decimal expected)
	 */

	function limitBy(arr, n, offset) {
	  offset = offset ? parseInt(offset, 10) : 0;
	  n = toNumber(n);
	  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
	}

	/**
	 * Filter filter for arrays
	 *
	 * @param {String} search
	 * @param {String} [delimiter]
	 * @param {String} ...dataKeys
	 */

	function filterBy(arr, search, delimiter) {
	  arr = convertArray(arr);
	  if (search == null) {
	    return arr;
	  }
	  if (typeof search === 'function') {
	    return arr.filter(search);
	  }
	  // cast to lowercase string
	  search = ('' + search).toLowerCase();
	  // allow optional `in` delimiter
	  // because why not
	  var n = delimiter === 'in' ? 3 : 2;
	  // extract and flatten keys
	  var keys = Array.prototype.concat.apply([], toArray(arguments, n));
	  var res = [];
	  var item, key, val, j;
	  for (var i = 0, l = arr.length; i < l; i++) {
	    item = arr[i];
	    val = item && item.$value || item;
	    j = keys.length;
	    if (j) {
	      while (j--) {
	        key = keys[j];
	        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
	          res.push(item);
	          break;
	        }
	      }
	    } else if (contains(item, search)) {
	      res.push(item);
	    }
	  }
	  return res;
	}

	/**
	 * Filter filter for arrays
	 *
	 * @param {String|Array<String>|Function} ...sortKeys
	 * @param {Number} [order]
	 */

	function orderBy(arr) {
	  var comparator = null;
	  var sortKeys = undefined;
	  arr = convertArray(arr);

	  // determine order (last argument)
	  var args = toArray(arguments, 1);
	  var order = args[args.length - 1];
	  if (typeof order === 'number') {
	    order = order < 0 ? -1 : 1;
	    args = args.length > 1 ? args.slice(0, -1) : args;
	  } else {
	    order = 1;
	  }

	  // determine sortKeys & comparator
	  var firstArg = args[0];
	  if (!firstArg) {
	    return arr;
	  } else if (typeof firstArg === 'function') {
	    // custom comparator
	    comparator = function (a, b) {
	      return firstArg(a, b) * order;
	    };
	  } else {
	    // string keys. flatten first
	    sortKeys = Array.prototype.concat.apply([], args);
	    comparator = function (a, b, i) {
	      i = i || 0;
	      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
	    };
	  }

	  function baseCompare(a, b, sortKeyIndex) {
	    var sortKey = sortKeys[sortKeyIndex];
	    if (sortKey) {
	      if (sortKey !== '$key') {
	        if (isObject(a) && '$value' in a) a = a.$value;
	        if (isObject(b) && '$value' in b) b = b.$value;
	      }
	      a = isObject(a) ? getPath(a, sortKey) : a;
	      b = isObject(b) ? getPath(b, sortKey) : b;
	    }
	    return a === b ? 0 : a > b ? order : -order;
	  }

	  // sort on a copy to avoid mutating original array
	  return arr.slice().sort(comparator);
	}

	/**
	 * String contain helper
	 *
	 * @param {*} val
	 * @param {String} search
	 */

	function contains(val, search) {
	  var i;
	  if (isPlainObject(val)) {
	    var keys = Object.keys(val);
	    i = keys.length;
	    while (i--) {
	      if (contains(val[keys[i]], search)) {
	        return true;
	      }
	    }
	  } else if (isArray(val)) {
	    i = val.length;
	    while (i--) {
	      if (contains(val[i], search)) {
	        return true;
	      }
	    }
	  } else if (val != null) {
	    return val.toString().toLowerCase().indexOf(search) > -1;
	  }
	}

	var digitsRE = /(\d{3})(?=\d)/g;

	// asset collections must be a plain object.
	var filters = {

	  orderBy: orderBy,
	  filterBy: filterBy,
	  limitBy: limitBy,

	  /**
	   * Stringify value.
	   *
	   * @param {Number} indent
	   */

	  json: {
	    read: function read(value, indent) {
	      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
	    },
	    write: function write(value) {
	      try {
	        return JSON.parse(value);
	      } catch (e) {
	        return value;
	      }
	    }
	  },

	  /**
	   * 'abc' => 'Abc'
	   */

	  capitalize: function capitalize(value) {
	    if (!value && value !== 0) return '';
	    value = value.toString();
	    return value.charAt(0).toUpperCase() + value.slice(1);
	  },

	  /**
	   * 'abc' => 'ABC'
	   */

	  uppercase: function uppercase(value) {
	    return value || value === 0 ? value.toString().toUpperCase() : '';
	  },

	  /**
	   * 'AbC' => 'abc'
	   */

	  lowercase: function lowercase(value) {
	    return value || value === 0 ? value.toString().toLowerCase() : '';
	  },

	  /**
	   * 12345 => $12,345.00
	   *
	   * @param {String} sign
	   * @param {Number} decimals Decimal places
	   */

	  currency: function currency(value, _currency, decimals) {
	    value = parseFloat(value);
	    if (!isFinite(value) || !value && value !== 0) return '';
	    _currency = _currency != null ? _currency : '$';
	    decimals = decimals != null ? decimals : 2;
	    var stringified = Math.abs(value).toFixed(decimals);
	    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
	    var i = _int.length % 3;
	    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
	    var _float = decimals ? stringified.slice(-1 - decimals) : '';
	    var sign = value < 0 ? '-' : '';
	    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
	  },

	  /**
	   * 'item' => 'items'
	   *
	   * @params
	   *  an array of strings corresponding to
	   *  the single, double, triple ... forms of the word to
	   *  be pluralized. When the number to be pluralized
	   *  exceeds the length of the args, it will use the last
	   *  entry in the array.
	   *
	   *  e.g. ['single', 'double', 'triple', 'multiple']
	   */

	  pluralize: function pluralize(value) {
	    var args = toArray(arguments, 1);
	    var length = args.length;
	    if (length > 1) {
	      var index = value % 10 - 1;
	      return index in args ? args[index] : args[length - 1];
	    } else {
	      return args[0] + (value === 1 ? '' : 's');
	    }
	  },

	  /**
	   * Debounce a handler function.
	   *
	   * @param {Function} handler
	   * @param {Number} delay = 300
	   * @return {Function}
	   */

	  debounce: function debounce(handler, delay) {
	    if (!handler) return;
	    if (!delay) {
	      delay = 300;
	    }
	    return _debounce(handler, delay);
	  }
	};

	function installGlobalAPI (Vue) {
	  /**
	   * Vue and every constructor that extends Vue has an
	   * associated options object, which can be accessed during
	   * compilation steps as `this.constructor.options`.
	   *
	   * These can be seen as the default options of every
	   * Vue instance.
	   */

	  Vue.options = {
	    directives: directives,
	    elementDirectives: elementDirectives,
	    filters: filters,
	    transitions: {},
	    components: {},
	    partials: {},
	    replace: true
	  };

	  /**
	   * Expose useful internals
	   */

	  Vue.util = util;
	  Vue.config = config;
	  Vue.set = set;
	  Vue['delete'] = del;
	  Vue.nextTick = nextTick;

	  /**
	   * The following are exposed for advanced usage / plugins
	   */

	  Vue.compiler = compiler;
	  Vue.FragmentFactory = FragmentFactory;
	  Vue.internalDirectives = internalDirectives;
	  Vue.parsers = {
	    path: path,
	    text: text,
	    template: template,
	    directive: directive,
	    expression: expression
	  };

	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */

	  Vue.cid = 0;
	  var cid = 1;

	  /**
	   * Class inheritance
	   *
	   * @param {Object} extendOptions
	   */

	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var isFirstExtend = Super.cid === 0;
	    if (isFirstExtend && extendOptions._Ctor) {
	      return extendOptions._Ctor;
	    }
	    var name = extendOptions.name || Super.options.name;
	    if (true) {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
	        name = null;
	      }
	    }
	    var Sub = createClass(name || 'VueComponent');
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(Super.options, extendOptions);
	    Sub['super'] = Super;
	    // allow further extension
	    Sub.extend = Super.extend;
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	    // cache constructor
	    if (isFirstExtend) {
	      extendOptions._Ctor = Sub;
	    }
	    return Sub;
	  };

	  /**
	   * A function that returns a sub-class constructor with the
	   * given name. This gives us much nicer output when
	   * logging instances in the console.
	   *
	   * @param {String} name
	   * @return {Function}
	   */

	  function createClass(name) {
	    /* eslint-disable no-new-func */
	    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
	    /* eslint-enable no-new-func */
	  }

	  /**
	   * Plugin system
	   *
	   * @param {Object} plugin
	   */

	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return;
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this;
	  };

	  /**
	   * Apply a global mixin by merging it into the default
	   * options.
	   */

	  Vue.mixin = function (mixin) {
	    Vue.options = mergeOptions(Vue.options, mixin);
	  };

	  /**
	   * Create asset registration methods with the following
	   * signature:
	   *
	   * @param {String} id
	   * @param {*} definition
	   */

	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (id, definition) {
	      if (!definition) {
	        return this.options[type + 's'][id];
	      } else {
	        /* istanbul ignore if */
	        if (true) {
	          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
	            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          if (!definition.name) {
	            definition.name = id;
	          }
	          definition = Vue.extend(definition);
	        }
	        this.options[type + 's'][id] = definition;
	        return definition;
	      }
	    };
	  });

	  // expose internal transition API
	  extend(Vue.transition, transition);
	}

	installGlobalAPI(Vue);

	Vue.version = '1.0.26';

	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue);
	    } else if (("development") !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
	      console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
	    }
	  }
	}, 0);

	module.exports = Vue;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(8)))

/***/ },

/***/ 9:
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * vue-router v0.7.13
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define(factory) :
	  global.VueRouter = factory();
	}(this, function () { 'use strict';

	  var babelHelpers = {};

	  babelHelpers.classCallCheck = function (instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError("Cannot call a class as a function");
	    }
	  };
	  function Target(path, matcher, delegate) {
	    this.path = path;
	    this.matcher = matcher;
	    this.delegate = delegate;
	  }

	  Target.prototype = {
	    to: function to(target, callback) {
	      var delegate = this.delegate;

	      if (delegate && delegate.willAddRoute) {
	        target = delegate.willAddRoute(this.matcher.target, target);
	      }

	      this.matcher.add(this.path, target);

	      if (callback) {
	        if (callback.length === 0) {
	          throw new Error("You must have an argument in the function passed to `to`");
	        }
	        this.matcher.addChild(this.path, target, callback, this.delegate);
	      }
	      return this;
	    }
	  };

	  function Matcher(target) {
	    this.routes = {};
	    this.children = {};
	    this.target = target;
	  }

	  Matcher.prototype = {
	    add: function add(path, handler) {
	      this.routes[path] = handler;
	    },

	    addChild: function addChild(path, target, callback, delegate) {
	      var matcher = new Matcher(target);
	      this.children[path] = matcher;

	      var match = generateMatch(path, matcher, delegate);

	      if (delegate && delegate.contextEntered) {
	        delegate.contextEntered(target, match);
	      }

	      callback(match);
	    }
	  };

	  function generateMatch(startingPath, matcher, delegate) {
	    return function (path, nestedCallback) {
	      var fullPath = startingPath + path;

	      if (nestedCallback) {
	        nestedCallback(generateMatch(fullPath, matcher, delegate));
	      } else {
	        return new Target(startingPath + path, matcher, delegate);
	      }
	    };
	  }

	  function addRoute(routeArray, path, handler) {
	    var len = 0;
	    for (var i = 0, l = routeArray.length; i < l; i++) {
	      len += routeArray[i].path.length;
	    }

	    path = path.substr(len);
	    var route = { path: path, handler: handler };
	    routeArray.push(route);
	  }

	  function eachRoute(baseRoute, matcher, callback, binding) {
	    var routes = matcher.routes;

	    for (var path in routes) {
	      if (routes.hasOwnProperty(path)) {
	        var routeArray = baseRoute.slice();
	        addRoute(routeArray, path, routes[path]);

	        if (matcher.children[path]) {
	          eachRoute(routeArray, matcher.children[path], callback, binding);
	        } else {
	          callback.call(binding, routeArray);
	        }
	      }
	    }
	  }

	  function map (callback, addRouteCallback) {
	    var matcher = new Matcher();

	    callback(generateMatch("", matcher, this.delegate));

	    eachRoute([], matcher, function (route) {
	      if (addRouteCallback) {
	        addRouteCallback(this, route);
	      } else {
	        this.add(route);
	      }
	    }, this);
	  }

	  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];

	  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');

	  var noWarning = false;
	  function warn(msg) {
	    if (!noWarning && typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }

	  function tryDecode(uri, asComponent) {
	    try {
	      return asComponent ? decodeURIComponent(uri) : decodeURI(uri);
	    } catch (e) {
	      warn('malformed URI' + (asComponent ? ' component: ' : ': ') + uri);
	    }
	  }

	  function isArray(test) {
	    return Object.prototype.toString.call(test) === "[object Array]";
	  }

	  // A Segment represents a segment in the original route description.
	  // Each Segment type provides an `eachChar` and `regex` method.
	  //
	  // The `eachChar` method invokes the callback with one or more character
	  // specifications. A character specification consumes one or more input
	  // characters.
	  //
	  // The `regex` method returns a regex fragment for the segment. If the
	  // segment is a dynamic of star segment, the regex fragment also includes
	  // a capture.
	  //
	  // A character specification contains:
	  //
	  // * `validChars`: a String with a list of all valid characters, or
	  // * `invalidChars`: a String with a list of all invalid characters
	  // * `repeat`: true if the character specification can repeat

	  function StaticSegment(string) {
	    this.string = string;
	  }
	  StaticSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      var string = this.string,
	          ch;

	      for (var i = 0, l = string.length; i < l; i++) {
	        ch = string.charAt(i);
	        callback({ validChars: ch });
	      }
	    },

	    regex: function regex() {
	      return this.string.replace(escapeRegex, '\\$1');
	    },

	    generate: function generate() {
	      return this.string;
	    }
	  };

	  function DynamicSegment(name) {
	    this.name = name;
	  }
	  DynamicSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "/", repeat: true });
	    },

	    regex: function regex() {
	      return "([^/]+)";
	    },

	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };

	  function StarSegment(name) {
	    this.name = name;
	  }
	  StarSegment.prototype = {
	    eachChar: function eachChar(callback) {
	      callback({ invalidChars: "", repeat: true });
	    },

	    regex: function regex() {
	      return "(.+)";
	    },

	    generate: function generate(params) {
	      var val = params[this.name];
	      return val == null ? ":" + this.name : val;
	    }
	  };

	  function EpsilonSegment() {}
	  EpsilonSegment.prototype = {
	    eachChar: function eachChar() {},
	    regex: function regex() {
	      return "";
	    },
	    generate: function generate() {
	      return "";
	    }
	  };

	  function parse(route, names, specificity) {
	    // normalize route as not starting with a "/". Recognition will
	    // also normalize.
	    if (route.charAt(0) === "/") {
	      route = route.substr(1);
	    }

	    var segments = route.split("/"),
	        results = [];

	    // A routes has specificity determined by the order that its different segments
	    // appear in. This system mirrors how the magnitude of numbers written as strings
	    // works.
	    // Consider a number written as: "abc". An example would be "200". Any other number written
	    // "xyz" will be smaller than "abc" so long as `a > z`. For instance, "199" is smaller
	    // then "200", even though "y" and "z" (which are both 9) are larger than "0" (the value
	    // of (`b` and `c`). This is because the leading symbol, "2", is larger than the other
	    // leading symbol, "1".
	    // The rule is that symbols to the left carry more weight than symbols to the right
	    // when a number is written out as a string. In the above strings, the leading digit
	    // represents how many 100's are in the number, and it carries more weight than the middle
	    // number which represents how many 10's are in the number.
	    // This system of number magnitude works well for route specificity, too. A route written as
	    // `a/b/c` will be more specific than `x/y/z` as long as `a` is more specific than
	    // `x`, irrespective of the other parts.
	    // Because of this similarity, we assign each type of segment a number value written as a
	    // string. We can find the specificity of compound routes by concatenating these strings
	    // together, from left to right. After we have looped through all of the segments,
	    // we convert the string to a number.
	    specificity.val = '';

	    for (var i = 0, l = segments.length; i < l; i++) {
	      var segment = segments[i],
	          match;

	      if (match = segment.match(/^:([^\/]+)$/)) {
	        results.push(new DynamicSegment(match[1]));
	        names.push(match[1]);
	        specificity.val += '3';
	      } else if (match = segment.match(/^\*([^\/]+)$/)) {
	        results.push(new StarSegment(match[1]));
	        specificity.val += '2';
	        names.push(match[1]);
	      } else if (segment === "") {
	        results.push(new EpsilonSegment());
	        specificity.val += '1';
	      } else {
	        results.push(new StaticSegment(segment));
	        specificity.val += '4';
	      }
	    }

	    specificity.val = +specificity.val;

	    return results;
	  }

	  // A State has a character specification and (`charSpec`) and a list of possible
	  // subsequent states (`nextStates`).
	  //
	  // If a State is an accepting state, it will also have several additional
	  // properties:
	  //
	  // * `regex`: A regular expression that is used to extract parameters from paths
	  //   that reached this accepting state.
	  // * `handlers`: Information on how to convert the list of captures into calls
	  //   to registered handlers with the specified parameters
	  // * `types`: How many static, dynamic or star segments in this route. Used to
	  //   decide which route to use if multiple registered routes match a path.
	  //
	  // Currently, State is implemented naively by looping over `nextStates` and
	  // comparing a character specification against a character. A more efficient
	  // implementation would use a hash of keys pointing at one or more next states.

	  function State(charSpec) {
	    this.charSpec = charSpec;
	    this.nextStates = [];
	  }

	  State.prototype = {
	    get: function get(charSpec) {
	      var nextStates = this.nextStates;

	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        var child = nextStates[i];

	        var isEqual = child.charSpec.validChars === charSpec.validChars;
	        isEqual = isEqual && child.charSpec.invalidChars === charSpec.invalidChars;

	        if (isEqual) {
	          return child;
	        }
	      }
	    },

	    put: function put(charSpec) {
	      var state;

	      // If the character specification already exists in a child of the current
	      // state, just return that state.
	      if (state = this.get(charSpec)) {
	        return state;
	      }

	      // Make a new state for the character spec
	      state = new State(charSpec);

	      // Insert the new state as a child of the current state
	      this.nextStates.push(state);

	      // If this character specification repeats, insert the new state as a child
	      // of itself. Note that this will not trigger an infinite loop because each
	      // transition during recognition consumes a character.
	      if (charSpec.repeat) {
	        state.nextStates.push(state);
	      }

	      // Return the new state
	      return state;
	    },

	    // Find a list of child states matching the next character
	    match: function match(ch) {
	      // DEBUG "Processing `" + ch + "`:"
	      var nextStates = this.nextStates,
	          child,
	          charSpec,
	          chars;

	      // DEBUG "  " + debugState(this)
	      var returned = [];

	      for (var i = 0, l = nextStates.length; i < l; i++) {
	        child = nextStates[i];

	        charSpec = child.charSpec;

	        if (typeof (chars = charSpec.validChars) !== 'undefined') {
	          if (chars.indexOf(ch) !== -1) {
	            returned.push(child);
	          }
	        } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {
	          if (chars.indexOf(ch) === -1) {
	            returned.push(child);
	          }
	        }
	      }

	      return returned;
	    }

	    /** IF DEBUG
	    , debug: function() {
	      var charSpec = this.charSpec,
	          debug = "[",
	          chars = charSpec.validChars || charSpec.invalidChars;
	       if (charSpec.invalidChars) { debug += "^"; }
	      debug += chars;
	      debug += "]";
	       if (charSpec.repeat) { debug += "+"; }
	       return debug;
	    }
	    END IF **/
	  };

	  /** IF DEBUG
	  function debug(log) {
	    console.log(log);
	  }

	  function debugState(state) {
	    return state.nextStates.map(function(n) {
	      if (n.nextStates.length === 0) { return "( " + n.debug() + " [accepting] )"; }
	      return "( " + n.debug() + " <then> " + n.nextStates.map(function(s) { return s.debug() }).join(" or ") + " )";
	    }).join(", ")
	  }
	  END IF **/

	  // Sort the routes by specificity
	  function sortSolutions(states) {
	    return states.sort(function (a, b) {
	      return b.specificity.val - a.specificity.val;
	    });
	  }

	  function recognizeChar(states, ch) {
	    var nextStates = [];

	    for (var i = 0, l = states.length; i < l; i++) {
	      var state = states[i];

	      nextStates = nextStates.concat(state.match(ch));
	    }

	    return nextStates;
	  }

	  var oCreate = Object.create || function (proto) {
	    function F() {}
	    F.prototype = proto;
	    return new F();
	  };

	  function RecognizeResults(queryParams) {
	    this.queryParams = queryParams || {};
	  }
	  RecognizeResults.prototype = oCreate({
	    splice: Array.prototype.splice,
	    slice: Array.prototype.slice,
	    push: Array.prototype.push,
	    length: 0,
	    queryParams: null
	  });

	  function findHandler(state, path, queryParams) {
	    var handlers = state.handlers,
	        regex = state.regex;
	    var captures = path.match(regex),
	        currentCapture = 1;
	    var result = new RecognizeResults(queryParams);

	    for (var i = 0, l = handlers.length; i < l; i++) {
	      var handler = handlers[i],
	          names = handler.names,
	          params = {};

	      for (var j = 0, m = names.length; j < m; j++) {
	        params[names[j]] = captures[currentCapture++];
	      }

	      result.push({ handler: handler.handler, params: params, isDynamic: !!names.length });
	    }

	    return result;
	  }

	  function addSegment(currentState, segment) {
	    segment.eachChar(function (ch) {
	      var state;

	      currentState = currentState.put(ch);
	    });

	    return currentState;
	  }

	  function decodeQueryParamPart(part) {
	    // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
	    part = part.replace(/\+/gm, '%20');
	    return tryDecode(part, true);
	  }

	  // The main interface

	  var RouteRecognizer = function RouteRecognizer() {
	    this.rootState = new State();
	    this.names = {};
	  };

	  RouteRecognizer.prototype = {
	    add: function add(routes, options) {
	      var currentState = this.rootState,
	          regex = "^",
	          specificity = {},
	          handlers = [],
	          allSegments = [],
	          name;

	      var isEmpty = true;

	      for (var i = 0, l = routes.length; i < l; i++) {
	        var route = routes[i],
	            names = [];

	        var segments = parse(route.path, names, specificity);

	        allSegments = allSegments.concat(segments);

	        for (var j = 0, m = segments.length; j < m; j++) {
	          var segment = segments[j];

	          if (segment instanceof EpsilonSegment) {
	            continue;
	          }

	          isEmpty = false;

	          // Add a "/" for the new segment
	          currentState = currentState.put({ validChars: "/" });
	          regex += "/";

	          // Add a representation of the segment to the NFA and regex
	          currentState = addSegment(currentState, segment);
	          regex += segment.regex();
	        }

	        var handler = { handler: route.handler, names: names };
	        handlers.push(handler);
	      }

	      if (isEmpty) {
	        currentState = currentState.put({ validChars: "/" });
	        regex += "/";
	      }

	      currentState.handlers = handlers;
	      currentState.regex = new RegExp(regex + "$");
	      currentState.specificity = specificity;

	      if (name = options && options.as) {
	        this.names[name] = {
	          segments: allSegments,
	          handlers: handlers
	        };
	      }
	    },

	    handlersFor: function handlersFor(name) {
	      var route = this.names[name],
	          result = [];
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }

	      for (var i = 0, l = route.handlers.length; i < l; i++) {
	        result.push(route.handlers[i]);
	      }

	      return result;
	    },

	    hasRoute: function hasRoute(name) {
	      return !!this.names[name];
	    },

	    generate: function generate(name, params) {
	      var route = this.names[name],
	          output = "";
	      if (!route) {
	        throw new Error("There is no route named " + name);
	      }

	      var segments = route.segments;

	      for (var i = 0, l = segments.length; i < l; i++) {
	        var segment = segments[i];

	        if (segment instanceof EpsilonSegment) {
	          continue;
	        }

	        output += "/";
	        output += segment.generate(params);
	      }

	      if (output.charAt(0) !== '/') {
	        output = '/' + output;
	      }

	      if (params && params.queryParams) {
	        output += this.generateQueryString(params.queryParams);
	      }

	      return output;
	    },

	    generateQueryString: function generateQueryString(params) {
	      var pairs = [];
	      var keys = [];
	      for (var key in params) {
	        if (params.hasOwnProperty(key)) {
	          keys.push(key);
	        }
	      }
	      keys.sort();
	      for (var i = 0, len = keys.length; i < len; i++) {
	        key = keys[i];
	        var value = params[key];
	        if (value == null) {
	          continue;
	        }
	        var pair = encodeURIComponent(key);
	        if (isArray(value)) {
	          for (var j = 0, l = value.length; j < l; j++) {
	            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
	            pairs.push(arrayPair);
	          }
	        } else {
	          pair += "=" + encodeURIComponent(value);
	          pairs.push(pair);
	        }
	      }

	      if (pairs.length === 0) {
	        return '';
	      }

	      return "?" + pairs.join("&");
	    },

	    parseQueryString: function parseQueryString(queryString) {
	      var pairs = queryString.split("&"),
	          queryParams = {};
	      for (var i = 0; i < pairs.length; i++) {
	        var pair = pairs[i].split('='),
	            key = decodeQueryParamPart(pair[0]),
	            keyLength = key.length,
	            isArray = false,
	            value;
	        if (pair.length === 1) {
	          value = 'true';
	        } else {
	          //Handle arrays
	          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
	            isArray = true;
	            key = key.slice(0, keyLength - 2);
	            if (!queryParams[key]) {
	              queryParams[key] = [];
	            }
	          }
	          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
	        }
	        if (isArray) {
	          queryParams[key].push(value);
	        } else {
	          queryParams[key] = value;
	        }
	      }
	      return queryParams;
	    },

	    recognize: function recognize(path, silent) {
	      noWarning = silent;
	      var states = [this.rootState],
	          pathLen,
	          i,
	          l,
	          queryStart,
	          queryParams = {},
	          isSlashDropped = false;

	      queryStart = path.indexOf('?');
	      if (queryStart !== -1) {
	        var queryString = path.substr(queryStart + 1, path.length);
	        path = path.substr(0, queryStart);
	        if (queryString) {
	          queryParams = this.parseQueryString(queryString);
	        }
	      }

	      path = tryDecode(path);
	      if (!path) return;

	      // DEBUG GROUP path

	      if (path.charAt(0) !== "/") {
	        path = "/" + path;
	      }

	      pathLen = path.length;
	      if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
	        path = path.substr(0, pathLen - 1);
	        isSlashDropped = true;
	      }

	      for (i = 0, l = path.length; i < l; i++) {
	        states = recognizeChar(states, path.charAt(i));
	        if (!states.length) {
	          break;
	        }
	      }

	      // END DEBUG GROUP

	      var solutions = [];
	      for (i = 0, l = states.length; i < l; i++) {
	        if (states[i].handlers) {
	          solutions.push(states[i]);
	        }
	      }

	      states = sortSolutions(solutions);

	      var state = solutions[0];

	      if (state && state.handlers) {
	        // if a trailing slash was dropped and a star segment is the last segment
	        // specified, put the trailing slash back
	        if (isSlashDropped && state.regex.source.slice(-5) === "(.+)$") {
	          path = path + "/";
	        }
	        return findHandler(state, path, queryParams);
	      }
	    }
	  };

	  RouteRecognizer.prototype.map = map;

	  var genQuery = RouteRecognizer.prototype.generateQueryString;

	  // export default for holding the Vue reference
	  var exports$1 = {};
	  /**
	   * Warn stuff.
	   *
	   * @param {String} msg
	   */

	  function warn$1(msg) {
	    /* istanbul ignore next */
	    if (typeof console !== 'undefined') {
	      console.error('[vue-router] ' + msg);
	    }
	  }

	  /**
	   * Resolve a relative path.
	   *
	   * @param {String} base
	   * @param {String} relative
	   * @param {Boolean} append
	   * @return {String}
	   */

	  function resolvePath(base, relative, append) {
	    var query = base.match(/(\?.*)$/);
	    if (query) {
	      query = query[1];
	      base = base.slice(0, -query.length);
	    }
	    // a query!
	    if (relative.charAt(0) === '?') {
	      return base + relative;
	    }
	    var stack = base.split('/');
	    // remove trailing segment if:
	    // - not appending
	    // - appending to trailing slash (last segment is empty)
	    if (!append || !stack[stack.length - 1]) {
	      stack.pop();
	    }
	    // resolve relative path
	    var segments = relative.replace(/^\//, '').split('/');
	    for (var i = 0; i < segments.length; i++) {
	      var segment = segments[i];
	      if (segment === '.') {
	        continue;
	      } else if (segment === '..') {
	        stack.pop();
	      } else {
	        stack.push(segment);
	      }
	    }
	    // ensure leading slash
	    if (stack[0] !== '') {
	      stack.unshift('');
	    }
	    return stack.join('/');
	  }

	  /**
	   * Forgiving check for a promise
	   *
	   * @param {Object} p
	   * @return {Boolean}
	   */

	  function isPromise(p) {
	    return p && typeof p.then === 'function';
	  }

	  /**
	   * Retrive a route config field from a component instance
	   * OR a component contructor.
	   *
	   * @param {Function|Vue} component
	   * @param {String} name
	   * @return {*}
	   */

	  function getRouteConfig(component, name) {
	    var options = component && (component.$options || component.options);
	    return options && options.route && options.route[name];
	  }

	  /**
	   * Resolve an async component factory. Have to do a dirty
	   * mock here because of Vue core's internal API depends on
	   * an ID check.
	   *
	   * @param {Object} handler
	   * @param {Function} cb
	   */

	  var resolver = undefined;

	  function resolveAsyncComponent(handler, cb) {
	    if (!resolver) {
	      resolver = {
	        resolve: exports$1.Vue.prototype._resolveComponent,
	        $options: {
	          components: {
	            _: handler.component
	          }
	        }
	      };
	    } else {
	      resolver.$options.components._ = handler.component;
	    }
	    resolver.resolve('_', function (Component) {
	      handler.component = Component;
	      cb(Component);
	    });
	  }

	  /**
	   * Map the dynamic segments in a path to params.
	   *
	   * @param {String} path
	   * @param {Object} params
	   * @param {Object} query
	   */

	  function mapParams(path, params, query) {
	    if (params === undefined) params = {};

	    path = path.replace(/:([^\/]+)/g, function (_, key) {
	      var val = params[key];
	      /* istanbul ignore if */
	      if (!val) {
	        warn$1('param "' + key + '" not found when generating ' + 'path for "' + path + '" with params ' + JSON.stringify(params));
	      }
	      return val || '';
	    });
	    if (query) {
	      path += genQuery(query);
	    }
	    return path;
	  }

	  var hashRE = /#.*$/;

	  var HTML5History = (function () {
	    function HTML5History(_ref) {
	      var root = _ref.root;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HTML5History);

	      if (root && root !== '/') {
	        // make sure there's the starting slash
	        if (root.charAt(0) !== '/') {
	          root = '/' + root;
	        }
	        // remove trailing slash
	        this.root = root.replace(/\/$/, '');
	        this.rootRE = new RegExp('^\\' + this.root);
	      } else {
	        this.root = null;
	      }
	      this.onChange = onChange;
	      // check base tag
	      var baseEl = document.querySelector('base');
	      this.base = baseEl && baseEl.getAttribute('href');
	    }

	    HTML5History.prototype.start = function start() {
	      var _this = this;

	      this.listener = function (e) {
	        var url = location.pathname + location.search;
	        if (_this.root) {
	          url = url.replace(_this.rootRE, '');
	        }
	        _this.onChange(url, e && e.state, location.hash);
	      };
	      window.addEventListener('popstate', this.listener);
	      this.listener();
	    };

	    HTML5History.prototype.stop = function stop() {
	      window.removeEventListener('popstate', this.listener);
	    };

	    HTML5History.prototype.go = function go(path, replace, append) {
	      var url = this.formatPath(path, append);
	      if (replace) {
	        history.replaceState({}, '', url);
	      } else {
	        // record scroll position by replacing current state
	        history.replaceState({
	          pos: {
	            x: window.pageXOffset,
	            y: window.pageYOffset
	          }
	        }, '', location.href);
	        // then push new state
	        history.pushState({}, '', url);
	      }
	      var hashMatch = path.match(hashRE);
	      var hash = hashMatch && hashMatch[0];
	      path = url
	      // strip hash so it doesn't mess up params
	      .replace(hashRE, '')
	      // remove root before matching
	      .replace(this.rootRE, '');
	      this.onChange(path, null, hash);
	    };

	    HTML5History.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/'
	      // absolute path
	      ? this.root ? this.root + '/' + path.replace(/^\//, '') : path : resolvePath(this.base || location.pathname, path, append);
	    };

	    return HTML5History;
	  })();

	  var HashHistory = (function () {
	    function HashHistory(_ref) {
	      var hashbang = _ref.hashbang;
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, HashHistory);

	      this.hashbang = hashbang;
	      this.onChange = onChange;
	    }

	    HashHistory.prototype.start = function start() {
	      var self = this;
	      this.listener = function () {
	        var path = location.hash;
	        var raw = path.replace(/^#!?/, '');
	        // always
	        if (raw.charAt(0) !== '/') {
	          raw = '/' + raw;
	        }
	        var formattedPath = self.formatPath(raw);
	        if (formattedPath !== path) {
	          location.replace(formattedPath);
	          return;
	        }
	        // determine query
	        // note it's possible to have queries in both the actual URL
	        // and the hash fragment itself.
	        var query = location.search && path.indexOf('?') > -1 ? '&' + location.search.slice(1) : location.search;
	        self.onChange(path.replace(/^#!?/, '') + query);
	      };
	      window.addEventListener('hashchange', this.listener);
	      this.listener();
	    };

	    HashHistory.prototype.stop = function stop() {
	      window.removeEventListener('hashchange', this.listener);
	    };

	    HashHistory.prototype.go = function go(path, replace, append) {
	      path = this.formatPath(path, append);
	      if (replace) {
	        location.replace(path);
	      } else {
	        location.hash = path;
	      }
	    };

	    HashHistory.prototype.formatPath = function formatPath(path, append) {
	      var isAbsoloute = path.charAt(0) === '/';
	      var prefix = '#' + (this.hashbang ? '!' : '');
	      return isAbsoloute ? prefix + path : prefix + resolvePath(location.hash.replace(/^#!?/, ''), path, append);
	    };

	    return HashHistory;
	  })();

	  var AbstractHistory = (function () {
	    function AbstractHistory(_ref) {
	      var onChange = _ref.onChange;
	      babelHelpers.classCallCheck(this, AbstractHistory);

	      this.onChange = onChange;
	      this.currentPath = '/';
	    }

	    AbstractHistory.prototype.start = function start() {
	      this.onChange('/');
	    };

	    AbstractHistory.prototype.stop = function stop() {
	      // noop
	    };

	    AbstractHistory.prototype.go = function go(path, replace, append) {
	      path = this.currentPath = this.formatPath(path, append);
	      this.onChange(path);
	    };

	    AbstractHistory.prototype.formatPath = function formatPath(path, append) {
	      return path.charAt(0) === '/' ? path : resolvePath(this.currentPath, path, append);
	    };

	    return AbstractHistory;
	  })();

	  /**
	   * Determine the reusability of an existing router view.
	   *
	   * @param {Directive} view
	   * @param {Object} handler
	   * @param {Transition} transition
	   */

	  function canReuse(view, handler, transition) {
	    var component = view.childVM;
	    if (!component || !handler) {
	      return false;
	    }
	    // important: check view.Component here because it may
	    // have been changed in activate hook
	    if (view.Component !== handler.component) {
	      return false;
	    }
	    var canReuseFn = getRouteConfig(component, 'canReuse');
	    return typeof canReuseFn === 'boolean' ? canReuseFn : canReuseFn ? canReuseFn.call(component, {
	      to: transition.to,
	      from: transition.from
	    }) : true; // defaults to true
	  }

	  /**
	   * Check if a component can deactivate.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function canDeactivate(view, transition, next) {
	    var fromComponent = view.childVM;
	    var hook = getRouteConfig(fromComponent, 'canDeactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHook(hook, fromComponent, next, {
	        expectBoolean: true
	      });
	    }
	  }

	  /**
	   * Check if a component can activate.
	   *
	   * @param {Object} handler
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function canActivate(handler, transition, next) {
	    resolveAsyncComponent(handler, function (Component) {
	      // have to check due to async-ness
	      if (transition.aborted) {
	        return;
	      }
	      // determine if this component can be activated
	      var hook = getRouteConfig(Component, 'canActivate');
	      if (!hook) {
	        next();
	      } else {
	        transition.callHook(hook, null, next, {
	          expectBoolean: true
	        });
	      }
	    });
	  }

	  /**
	   * Call deactivate hooks for existing router-views.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Function} next
	   */

	  function deactivate(view, transition, next) {
	    var component = view.childVM;
	    var hook = getRouteConfig(component, 'deactivate');
	    if (!hook) {
	      next();
	    } else {
	      transition.callHooks(hook, component, next);
	    }
	  }

	  /**
	   * Activate / switch component for a router-view.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   * @param {Number} depth
	   * @param {Function} [cb]
	   */

	  function activate(view, transition, depth, cb, reuse) {
	    var handler = transition.activateQueue[depth];
	    if (!handler) {
	      saveChildView(view);
	      if (view._bound) {
	        view.setComponent(null);
	      }
	      cb && cb();
	      return;
	    }

	    var Component = view.Component = handler.component;
	    var activateHook = getRouteConfig(Component, 'activate');
	    var dataHook = getRouteConfig(Component, 'data');
	    var waitForData = getRouteConfig(Component, 'waitForData');

	    view.depth = depth;
	    view.activated = false;

	    var component = undefined;
	    var loading = !!(dataHook && !waitForData);

	    // "reuse" is a flag passed down when the parent view is
	    // either reused via keep-alive or as a child of a kept-alive view.
	    // of course we can only reuse if the current kept-alive instance
	    // is of the correct type.
	    reuse = reuse && view.childVM && view.childVM.constructor === Component;

	    if (reuse) {
	      // just reuse
	      component = view.childVM;
	      component.$loadingRouteData = loading;
	    } else {
	      saveChildView(view);

	      // unbuild current component. this step also destroys
	      // and removes all nested child views.
	      view.unbuild(true);

	      // build the new component. this will also create the
	      // direct child view of the current one. it will register
	      // itself as view.childView.
	      component = view.build({
	        _meta: {
	          $loadingRouteData: loading
	        },
	        created: function created() {
	          this._routerView = view;
	        }
	      });

	      // handle keep-alive.
	      // when a kept-alive child vm is restored, we need to
	      // add its cached child views into the router's view list,
	      // and also properly update current view's child view.
	      if (view.keepAlive) {
	        component.$loadingRouteData = loading;
	        var cachedChildView = component._keepAliveRouterView;
	        if (cachedChildView) {
	          view.childView = cachedChildView;
	          component._keepAliveRouterView = null;
	        }
	      }
	    }

	    // cleanup the component in case the transition is aborted
	    // before the component is ever inserted.
	    var cleanup = function cleanup() {
	      component.$destroy();
	    };

	    // actually insert the component and trigger transition
	    var insert = function insert() {
	      if (reuse) {
	        cb && cb();
	        return;
	      }
	      var router = transition.router;
	      if (router._rendered || router._transitionOnLoad) {
	        view.transition(component);
	      } else {
	        // no transition on first render, manual transition
	        /* istanbul ignore if */
	        if (view.setCurrent) {
	          // 0.12 compat
	          view.setCurrent(component);
	        } else {
	          // 1.0
	          view.childVM = component;
	        }
	        component.$before(view.anchor, null, false);
	      }
	      cb && cb();
	    };

	    var afterData = function afterData() {
	      // activate the child view
	      if (view.childView) {
	        activate(view.childView, transition, depth + 1, null, reuse || view.keepAlive);
	      }
	      insert();
	    };

	    // called after activation hook is resolved
	    var afterActivate = function afterActivate() {
	      view.activated = true;
	      if (dataHook && waitForData) {
	        // wait until data loaded to insert
	        loadData(component, transition, dataHook, afterData, cleanup);
	      } else {
	        // load data and insert at the same time
	        if (dataHook) {
	          loadData(component, transition, dataHook);
	        }
	        afterData();
	      }
	    };

	    if (activateHook) {
	      transition.callHooks(activateHook, component, afterActivate, {
	        cleanup: cleanup,
	        postActivate: true
	      });
	    } else {
	      afterActivate();
	    }
	  }

	  /**
	   * Reuse a view, just reload data if necessary.
	   *
	   * @param {Directive} view
	   * @param {Transition} transition
	   */

	  function reuse(view, transition) {
	    var component = view.childVM;
	    var dataHook = getRouteConfig(component, 'data');
	    if (dataHook) {
	      loadData(component, transition, dataHook);
	    }
	  }

	  /**
	   * Asynchronously load and apply data to component.
	   *
	   * @param {Vue} component
	   * @param {Transition} transition
	   * @param {Function} hook
	   * @param {Function} cb
	   * @param {Function} cleanup
	   */

	  function loadData(component, transition, hook, cb, cleanup) {
	    component.$loadingRouteData = true;
	    transition.callHooks(hook, component, function () {
	      component.$loadingRouteData = false;
	      component.$emit('route-data-loaded', component);
	      cb && cb();
	    }, {
	      cleanup: cleanup,
	      postActivate: true,
	      processData: function processData(data) {
	        // handle promise sugar syntax
	        var promises = [];
	        if (isPlainObject(data)) {
	          Object.keys(data).forEach(function (key) {
	            var val = data[key];
	            if (isPromise(val)) {
	              promises.push(val.then(function (resolvedVal) {
	                component.$set(key, resolvedVal);
	              }));
	            } else {
	              component.$set(key, val);
	            }
	          });
	        }
	        if (promises.length) {
	          return promises[0].constructor.all(promises);
	        }
	      }
	    });
	  }

	  /**
	   * Save the child view for a kept-alive view so that
	   * we can restore it when it is switched back to.
	   *
	   * @param {Directive} view
	   */

	  function saveChildView(view) {
	    if (view.keepAlive && view.childVM && view.childView) {
	      view.childVM._keepAliveRouterView = view.childView;
	    }
	    view.childView = null;
	  }

	  /**
	   * Check plain object.
	   *
	   * @param {*} val
	   */

	  function isPlainObject(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }

	  /**
	   * A RouteTransition object manages the pipeline of a
	   * router-view switching process. This is also the object
	   * passed into user route hooks.
	   *
	   * @param {Router} router
	   * @param {Route} to
	   * @param {Route} from
	   */

	  var RouteTransition = (function () {
	    function RouteTransition(router, to, from) {
	      babelHelpers.classCallCheck(this, RouteTransition);

	      this.router = router;
	      this.to = to;
	      this.from = from;
	      this.next = null;
	      this.aborted = false;
	      this.done = false;
	    }

	    /**
	     * Abort current transition and return to previous location.
	     */

	    RouteTransition.prototype.abort = function abort() {
	      if (!this.aborted) {
	        this.aborted = true;
	        // if the root path throws an error during validation
	        // on initial load, it gets caught in an infinite loop.
	        var abortingOnLoad = !this.from.path && this.to.path === '/';
	        if (!abortingOnLoad) {
	          this.router.replace(this.from.path || '/');
	        }
	      }
	    };

	    /**
	     * Abort current transition and redirect to a new location.
	     *
	     * @param {String} path
	     */

	    RouteTransition.prototype.redirect = function redirect(path) {
	      if (!this.aborted) {
	        this.aborted = true;
	        if (typeof path === 'string') {
	          path = mapParams(path, this.to.params, this.to.query);
	        } else {
	          path.params = path.params || this.to.params;
	          path.query = path.query || this.to.query;
	        }
	        this.router.replace(path);
	      }
	    };

	    /**
	     * A router view transition's pipeline can be described as
	     * follows, assuming we are transitioning from an existing
	     * <router-view> chain [Component A, Component B] to a new
	     * chain [Component A, Component C]:
	     *
	     *  A    A
	     *  | => |
	     *  B    C
	     *
	     * 1. Reusablity phase:
	     *   -> canReuse(A, A)
	     *   -> canReuse(B, C)
	     *   -> determine new queues:
	     *      - deactivation: [B]
	     *      - activation: [C]
	     *
	     * 2. Validation phase:
	     *   -> canDeactivate(B)
	     *   -> canActivate(C)
	     *
	     * 3. Activation phase:
	     *   -> deactivate(B)
	     *   -> activate(C)
	     *
	     * Each of these steps can be asynchronous, and any
	     * step can potentially abort the transition.
	     *
	     * @param {Function} cb
	     */

	    RouteTransition.prototype.start = function start(cb) {
	      var transition = this;

	      // determine the queue of views to deactivate
	      var deactivateQueue = [];
	      var view = this.router._rootView;
	      while (view) {
	        deactivateQueue.unshift(view);
	        view = view.childView;
	      }
	      var reverseDeactivateQueue = deactivateQueue.slice().reverse();

	      // determine the queue of route handlers to activate
	      var activateQueue = this.activateQueue = toArray(this.to.matched).map(function (match) {
	        return match.handler;
	      });

	      // 1. Reusability phase
	      var i = undefined,
	          reuseQueue = undefined;
	      for (i = 0; i < reverseDeactivateQueue.length; i++) {
	        if (!canReuse(reverseDeactivateQueue[i], activateQueue[i], transition)) {
	          break;
	        }
	      }
	      if (i > 0) {
	        reuseQueue = reverseDeactivateQueue.slice(0, i);
	        deactivateQueue = reverseDeactivateQueue.slice(i).reverse();
	        activateQueue = activateQueue.slice(i);
	      }

	      // 2. Validation phase
	      transition.runQueue(deactivateQueue, canDeactivate, function () {
	        transition.runQueue(activateQueue, canActivate, function () {
	          transition.runQueue(deactivateQueue, deactivate, function () {
	            // 3. Activation phase

	            // Update router current route
	            transition.router._onTransitionValidated(transition);

	            // trigger reuse for all reused views
	            reuseQueue && reuseQueue.forEach(function (view) {
	              return reuse(view, transition);
	            });

	            // the root of the chain that needs to be replaced
	            // is the top-most non-reusable view.
	            if (deactivateQueue.length) {
	              var _view = deactivateQueue[deactivateQueue.length - 1];
	              var depth = reuseQueue ? reuseQueue.length : 0;
	              activate(_view, transition, depth, cb);
	            } else {
	              cb();
	            }
	          });
	        });
	      });
	    };

	    /**
	     * Asynchronously and sequentially apply a function to a
	     * queue.
	     *
	     * @param {Array} queue
	     * @param {Function} fn
	     * @param {Function} cb
	     */

	    RouteTransition.prototype.runQueue = function runQueue(queue, fn, cb) {
	      var transition = this;
	      step(0);
	      function step(index) {
	        if (index >= queue.length) {
	          cb();
	        } else {
	          fn(queue[index], transition, function () {
	            step(index + 1);
	          });
	        }
	      }
	    };

	    /**
	     * Call a user provided route transition hook and handle
	     * the response (e.g. if the user returns a promise).
	     *
	     * If the user neither expects an argument nor returns a
	     * promise, the hook is assumed to be synchronous.
	     *
	     * @param {Function} hook
	     * @param {*} [context]
	     * @param {Function} [cb]
	     * @param {Object} [options]
	     *                 - {Boolean} expectBoolean
	     *                 - {Boolean} postActive
	     *                 - {Function} processData
	     *                 - {Function} cleanup
	     */

	    RouteTransition.prototype.callHook = function callHook(hook, context, cb) {
	      var _ref = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	      var _ref$expectBoolean = _ref.expectBoolean;
	      var expectBoolean = _ref$expectBoolean === undefined ? false : _ref$expectBoolean;
	      var _ref$postActivate = _ref.postActivate;
	      var postActivate = _ref$postActivate === undefined ? false : _ref$postActivate;
	      var processData = _ref.processData;
	      var cleanup = _ref.cleanup;

	      var transition = this;
	      var nextCalled = false;

	      // abort the transition
	      var abort = function abort() {
	        cleanup && cleanup();
	        transition.abort();
	      };

	      // handle errors
	      var onError = function onError(err) {
	        postActivate ? next() : abort();
	        if (err && !transition.router._suppress) {
	          warn$1('Uncaught error during transition: ');
	          throw err instanceof Error ? err : new Error(err);
	        }
	      };

	      // since promise swallows errors, we have to
	      // throw it in the next tick...
	      var onPromiseError = function onPromiseError(err) {
	        try {
	          onError(err);
	        } catch (e) {
	          setTimeout(function () {
	            throw e;
	          }, 0);
	        }
	      };

	      // advance the transition to the next step
	      var next = function next() {
	        if (nextCalled) {
	          warn$1('transition.next() should be called only once.');
	          return;
	        }
	        nextCalled = true;
	        if (transition.aborted) {
	          cleanup && cleanup();
	          return;
	        }
	        cb && cb();
	      };

	      var nextWithBoolean = function nextWithBoolean(res) {
	        if (typeof res === 'boolean') {
	          res ? next() : abort();
	        } else if (isPromise(res)) {
	          res.then(function (ok) {
	            ok ? next() : abort();
	          }, onPromiseError);
	        } else if (!hook.length) {
	          next();
	        }
	      };

	      var nextWithData = function nextWithData(data) {
	        var res = undefined;
	        try {
	          res = processData(data);
	        } catch (err) {
	          return onError(err);
	        }
	        if (isPromise(res)) {
	          res.then(next, onPromiseError);
	        } else {
	          next();
	        }
	      };

	      // expose a clone of the transition object, so that each
	      // hook gets a clean copy and prevent the user from
	      // messing with the internals.
	      var exposed = {
	        to: transition.to,
	        from: transition.from,
	        abort: abort,
	        next: processData ? nextWithData : next,
	        redirect: function redirect() {
	          transition.redirect.apply(transition, arguments);
	        }
	      };

	      // actually call the hook
	      var res = undefined;
	      try {
	        res = hook.call(context, exposed);
	      } catch (err) {
	        return onError(err);
	      }

	      if (expectBoolean) {
	        // boolean hooks
	        nextWithBoolean(res);
	      } else if (isPromise(res)) {
	        // promise
	        if (processData) {
	          res.then(nextWithData, onPromiseError);
	        } else {
	          res.then(next, onPromiseError);
	        }
	      } else if (processData && isPlainOjbect(res)) {
	        // data promise sugar
	        nextWithData(res);
	      } else if (!hook.length) {
	        next();
	      }
	    };

	    /**
	     * Call a single hook or an array of async hooks in series.
	     *
	     * @param {Array} hooks
	     * @param {*} context
	     * @param {Function} cb
	     * @param {Object} [options]
	     */

	    RouteTransition.prototype.callHooks = function callHooks(hooks, context, cb, options) {
	      var _this = this;

	      if (Array.isArray(hooks)) {
	        this.runQueue(hooks, function (hook, _, next) {
	          if (!_this.aborted) {
	            _this.callHook(hook, context, next, options);
	          }
	        }, cb);
	      } else {
	        this.callHook(hooks, context, cb, options);
	      }
	    };

	    return RouteTransition;
	  })();

	  function isPlainOjbect(val) {
	    return Object.prototype.toString.call(val) === '[object Object]';
	  }

	  function toArray(val) {
	    return val ? Array.prototype.slice.call(val) : [];
	  }

	  var internalKeysRE = /^(component|subRoutes|fullPath)$/;

	  /**
	   * Route Context Object
	   *
	   * @param {String} path
	   * @param {Router} router
	   */

	  var Route = function Route(path, router) {
	    var _this = this;

	    babelHelpers.classCallCheck(this, Route);

	    var matched = router._recognizer.recognize(path);
	    if (matched) {
	      // copy all custom fields from route configs
	      [].forEach.call(matched, function (match) {
	        for (var key in match.handler) {
	          if (!internalKeysRE.test(key)) {
	            _this[key] = match.handler[key];
	          }
	        }
	      });
	      // set query and params
	      this.query = matched.queryParams;
	      this.params = [].reduce.call(matched, function (prev, cur) {
	        if (cur.params) {
	          for (var key in cur.params) {
	            prev[key] = cur.params[key];
	          }
	        }
	        return prev;
	      }, {});
	    }
	    // expose path and router
	    this.path = path;
	    // for internal use
	    this.matched = matched || router._notFoundHandler;
	    // internal reference to router
	    Object.defineProperty(this, 'router', {
	      enumerable: false,
	      value: router
	    });
	    // Important: freeze self to prevent observation
	    Object.freeze(this);
	  };

	  function applyOverride (Vue) {
	    var _Vue$util = Vue.util;
	    var extend = _Vue$util.extend;
	    var isArray = _Vue$util.isArray;
	    var defineReactive = _Vue$util.defineReactive;

	    // override Vue's init and destroy process to keep track of router instances
	    var init = Vue.prototype._init;
	    Vue.prototype._init = function (options) {
	      options = options || {};
	      var root = options._parent || options.parent || this;
	      var router = root.$router;
	      var route = root.$route;
	      if (router) {
	        // expose router
	        this.$router = router;
	        router._children.push(this);
	        /* istanbul ignore if */
	        if (this._defineMeta) {
	          // 0.12
	          this._defineMeta('$route', route);
	        } else {
	          // 1.0
	          defineReactive(this, '$route', route);
	        }
	      }
	      init.call(this, options);
	    };

	    var destroy = Vue.prototype._destroy;
	    Vue.prototype._destroy = function () {
	      if (!this._isBeingDestroyed && this.$router) {
	        this.$router._children.$remove(this);
	      }
	      destroy.apply(this, arguments);
	    };

	    // 1.0 only: enable route mixins
	    var strats = Vue.config.optionMergeStrategies;
	    var hooksToMergeRE = /^(data|activate|deactivate)$/;

	    if (strats) {
	      strats.route = function (parentVal, childVal) {
	        if (!childVal) return parentVal;
	        if (!parentVal) return childVal;
	        var ret = {};
	        extend(ret, parentVal);
	        for (var key in childVal) {
	          var a = ret[key];
	          var b = childVal[key];
	          // for data, activate and deactivate, we need to merge them into
	          // arrays similar to lifecycle hooks.
	          if (a && hooksToMergeRE.test(key)) {
	            ret[key] = (isArray(a) ? a : [a]).concat(b);
	          } else {
	            ret[key] = b;
	          }
	        }
	        return ret;
	      };
	    }
	  }

	  function View (Vue) {

	    var _ = Vue.util;
	    var componentDef =
	    // 0.12
	    Vue.directive('_component') ||
	    // 1.0
	    Vue.internalDirectives.component;
	    // <router-view> extends the internal component directive
	    var viewDef = _.extend({}, componentDef);

	    // with some overrides
	    _.extend(viewDef, {

	      _isRouterView: true,

	      bind: function bind() {
	        var route = this.vm.$route;
	        /* istanbul ignore if */
	        if (!route) {
	          warn$1('<router-view> can only be used inside a ' + 'router-enabled app.');
	          return;
	        }
	        // force dynamic directive so v-component doesn't
	        // attempt to build right now
	        this._isDynamicLiteral = true;
	        // finally, init by delegating to v-component
	        componentDef.bind.call(this);

	        // locate the parent view
	        var parentView = undefined;
	        var parent = this.vm;
	        while (parent) {
	          if (parent._routerView) {
	            parentView = parent._routerView;
	            break;
	          }
	          parent = parent.$parent;
	        }
	        if (parentView) {
	          // register self as a child of the parent view,
	          // instead of activating now. This is so that the
	          // child's activate hook is called after the
	          // parent's has resolved.
	          this.parentView = parentView;
	          parentView.childView = this;
	        } else {
	          // this is the root view!
	          var router = route.router;
	          router._rootView = this;
	        }

	        // handle late-rendered view
	        // two possibilities:
	        // 1. root view rendered after transition has been
	        //    validated;
	        // 2. child view rendered after parent view has been
	        //    activated.
	        var transition = route.router._currentTransition;
	        if (!parentView && transition.done || parentView && parentView.activated) {
	          var depth = parentView ? parentView.depth + 1 : 0;
	          activate(this, transition, depth);
	        }
	      },

	      unbind: function unbind() {
	        if (this.parentView) {
	          this.parentView.childView = null;
	        }
	        componentDef.unbind.call(this);
	      }
	    });

	    Vue.elementDirective('router-view', viewDef);
	  }

	  var trailingSlashRE = /\/$/;
	  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	  var queryStringRE = /\?.*$/;

	  // install v-link, which provides navigation support for
	  // HTML5 history mode
	  function Link (Vue) {
	    var _Vue$util = Vue.util;
	    var _bind = _Vue$util.bind;
	    var isObject = _Vue$util.isObject;
	    var addClass = _Vue$util.addClass;
	    var removeClass = _Vue$util.removeClass;

	    var onPriority = Vue.directive('on').priority;
	    var LINK_UPDATE = '__vue-router-link-update__';

	    var activeId = 0;

	    Vue.directive('link-active', {
	      priority: 9999,
	      bind: function bind() {
	        var _this = this;

	        var id = String(activeId++);
	        // collect v-links contained within this element.
	        // we need do this here before the parent-child relationship
	        // gets messed up by terminal directives (if, for, components)
	        var childLinks = this.el.querySelectorAll('[v-link]');
	        for (var i = 0, l = childLinks.length; i < l; i++) {
	          var link = childLinks[i];
	          var existingId = link.getAttribute(LINK_UPDATE);
	          var value = existingId ? existingId + ',' + id : id;
	          // leave a mark on the link element which can be persisted
	          // through fragment clones.
	          link.setAttribute(LINK_UPDATE, value);
	        }
	        this.vm.$on(LINK_UPDATE, this.cb = function (link, path) {
	          if (link.activeIds.indexOf(id) > -1) {
	            link.updateClasses(path, _this.el);
	          }
	        });
	      },
	      unbind: function unbind() {
	        this.vm.$off(LINK_UPDATE, this.cb);
	      }
	    });

	    Vue.directive('link', {
	      priority: onPriority - 2,

	      bind: function bind() {
	        var vm = this.vm;
	        /* istanbul ignore if */
	        if (!vm.$route) {
	          warn$1('v-link can only be used inside a router-enabled app.');
	          return;
	        }
	        this.router = vm.$route.router;
	        // update things when the route changes
	        this.unwatch = vm.$watch('$route', _bind(this.onRouteUpdate, this));
	        // check v-link-active ids
	        var activeIds = this.el.getAttribute(LINK_UPDATE);
	        if (activeIds) {
	          this.el.removeAttribute(LINK_UPDATE);
	          this.activeIds = activeIds.split(',');
	        }
	        // no need to handle click if link expects to be opened
	        // in a new window/tab.
	        /* istanbul ignore if */
	        if (this.el.tagName === 'A' && this.el.getAttribute('target') === '_blank') {
	          return;
	        }
	        // handle click
	        this.handler = _bind(this.onClick, this);
	        this.el.addEventListener('click', this.handler);
	      },

	      update: function update(target) {
	        this.target = target;
	        if (isObject(target)) {
	          this.append = target.append;
	          this.exact = target.exact;
	          this.prevActiveClass = this.activeClass;
	          this.activeClass = target.activeClass;
	        }
	        this.onRouteUpdate(this.vm.$route);
	      },

	      onClick: function onClick(e) {
	        // don't redirect with control keys
	        /* istanbul ignore if */
	        if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	        // don't redirect when preventDefault called
	        /* istanbul ignore if */
	        if (e.defaultPrevented) return;
	        // don't redirect on right click
	        /* istanbul ignore if */
	        if (e.button !== 0) return;

	        var target = this.target;
	        if (target) {
	          // v-link with expression, just go
	          e.preventDefault();
	          this.router.go(target);
	        } else {
	          // no expression, delegate for an <a> inside
	          var el = e.target;
	          while (el.tagName !== 'A' && el !== this.el) {
	            el = el.parentNode;
	          }
	          if (el.tagName === 'A' && sameOrigin(el)) {
	            e.preventDefault();
	            var path = el.pathname;
	            if (this.router.history.root) {
	              path = path.replace(this.router.history.rootRE, '');
	            }
	            this.router.go({
	              path: path,
	              replace: target && target.replace,
	              append: target && target.append
	            });
	          }
	        }
	      },

	      onRouteUpdate: function onRouteUpdate(route) {
	        // router.stringifyPath is dependent on current route
	        // and needs to be called again whenver route changes.
	        var newPath = this.router.stringifyPath(this.target);
	        if (this.path !== newPath) {
	          this.path = newPath;
	          this.updateActiveMatch();
	          this.updateHref();
	        }
	        if (this.activeIds) {
	          this.vm.$emit(LINK_UPDATE, this, route.path);
	        } else {
	          this.updateClasses(route.path, this.el);
	        }
	      },

	      updateActiveMatch: function updateActiveMatch() {
	        this.activeRE = this.path && !this.exact ? new RegExp('^' + this.path.replace(/\/$/, '').replace(queryStringRE, '').replace(regexEscapeRE, '\\$&') + '(\\/|$)') : null;
	      },

	      updateHref: function updateHref() {
	        if (this.el.tagName !== 'A') {
	          return;
	        }
	        var path = this.path;
	        var router = this.router;
	        var isAbsolute = path.charAt(0) === '/';
	        // do not format non-hash relative paths
	        var href = path && (router.mode === 'hash' || isAbsolute) ? router.history.formatPath(path, this.append) : path;
	        if (href) {
	          this.el.href = href;
	        } else {
	          this.el.removeAttribute('href');
	        }
	      },

	      updateClasses: function updateClasses(path, el) {
	        var activeClass = this.activeClass || this.router._linkActiveClass;
	        // clear old class
	        if (this.prevActiveClass && this.prevActiveClass !== activeClass) {
	          toggleClasses(el, this.prevActiveClass, removeClass);
	        }
	        // remove query string before matching
	        var dest = this.path.replace(queryStringRE, '');
	        path = path.replace(queryStringRE, '');
	        // add new class
	        if (this.exact) {
	          if (dest === path ||
	          // also allow additional trailing slash
	          dest.charAt(dest.length - 1) !== '/' && dest === path.replace(trailingSlashRE, '')) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        } else {
	          if (this.activeRE && this.activeRE.test(path)) {
	            toggleClasses(el, activeClass, addClass);
	          } else {
	            toggleClasses(el, activeClass, removeClass);
	          }
	        }
	      },

	      unbind: function unbind() {
	        this.el.removeEventListener('click', this.handler);
	        this.unwatch && this.unwatch();
	      }
	    });

	    function sameOrigin(link) {
	      return link.protocol === location.protocol && link.hostname === location.hostname && link.port === location.port;
	    }

	    // this function is copied from v-bind:class implementation until
	    // we properly expose it...
	    function toggleClasses(el, key, fn) {
	      key = key.trim();
	      if (key.indexOf(' ') === -1) {
	        fn(el, key);
	        return;
	      }
	      var keys = key.split(/\s+/);
	      for (var i = 0, l = keys.length; i < l; i++) {
	        fn(el, keys[i]);
	      }
	    }
	  }

	  var historyBackends = {
	    abstract: AbstractHistory,
	    hash: HashHistory,
	    html5: HTML5History
	  };

	  // late bind during install
	  var Vue = undefined;

	  /**
	   * Router constructor
	   *
	   * @param {Object} [options]
	   */

	  var Router = (function () {
	    function Router() {
	      var _this = this;

	      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      var _ref$hashbang = _ref.hashbang;
	      var hashbang = _ref$hashbang === undefined ? true : _ref$hashbang;
	      var _ref$abstract = _ref.abstract;
	      var abstract = _ref$abstract === undefined ? false : _ref$abstract;
	      var _ref$history = _ref.history;
	      var history = _ref$history === undefined ? false : _ref$history;
	      var _ref$saveScrollPosition = _ref.saveScrollPosition;
	      var saveScrollPosition = _ref$saveScrollPosition === undefined ? false : _ref$saveScrollPosition;
	      var _ref$transitionOnLoad = _ref.transitionOnLoad;
	      var transitionOnLoad = _ref$transitionOnLoad === undefined ? false : _ref$transitionOnLoad;
	      var _ref$suppressTransitionError = _ref.suppressTransitionError;
	      var suppressTransitionError = _ref$suppressTransitionError === undefined ? false : _ref$suppressTransitionError;
	      var _ref$root = _ref.root;
	      var root = _ref$root === undefined ? null : _ref$root;
	      var _ref$linkActiveClass = _ref.linkActiveClass;
	      var linkActiveClass = _ref$linkActiveClass === undefined ? 'v-link-active' : _ref$linkActiveClass;
	      babelHelpers.classCallCheck(this, Router);

	      /* istanbul ignore if */
	      if (!Router.installed) {
	        throw new Error('Please install the Router with Vue.use() before ' + 'creating an instance.');
	      }

	      // Vue instances
	      this.app = null;
	      this._children = [];

	      // route recognizer
	      this._recognizer = new RouteRecognizer();
	      this._guardRecognizer = new RouteRecognizer();

	      // state
	      this._started = false;
	      this._startCb = null;
	      this._currentRoute = {};
	      this._currentTransition = null;
	      this._previousTransition = null;
	      this._notFoundHandler = null;
	      this._notFoundRedirect = null;
	      this._beforeEachHooks = [];
	      this._afterEachHooks = [];

	      // trigger transition on initial render?
	      this._rendered = false;
	      this._transitionOnLoad = transitionOnLoad;

	      // history mode
	      this._root = root;
	      this._abstract = abstract;
	      this._hashbang = hashbang;

	      // check if HTML5 history is available
	      var hasPushState = typeof window !== 'undefined' && window.history && window.history.pushState;
	      this._history = history && hasPushState;
	      this._historyFallback = history && !hasPushState;

	      // create history object
	      var inBrowser = Vue.util.inBrowser;
	      this.mode = !inBrowser || this._abstract ? 'abstract' : this._history ? 'html5' : 'hash';

	      var History = historyBackends[this.mode];
	      this.history = new History({
	        root: root,
	        hashbang: this._hashbang,
	        onChange: function onChange(path, state, anchor) {
	          _this._match(path, state, anchor);
	        }
	      });

	      // other options
	      this._saveScrollPosition = saveScrollPosition;
	      this._linkActiveClass = linkActiveClass;
	      this._suppress = suppressTransitionError;
	    }

	    /**
	     * Allow directly passing components to a route
	     * definition.
	     *
	     * @param {String} path
	     * @param {Object} handler
	     */

	    // API ===================================================

	    /**
	    * Register a map of top-level paths.
	    *
	    * @param {Object} map
	    */

	    Router.prototype.map = function map(_map) {
	      for (var route in _map) {
	        this.on(route, _map[route]);
	      }
	      return this;
	    };

	    /**
	     * Register a single root-level path
	     *
	     * @param {String} rootPath
	     * @param {Object} handler
	     *                 - {String} component
	     *                 - {Object} [subRoutes]
	     *                 - {Boolean} [forceRefresh]
	     *                 - {Function} [before]
	     *                 - {Function} [after]
	     */

	    Router.prototype.on = function on(rootPath, handler) {
	      if (rootPath === '*') {
	        this._notFound(handler);
	      } else {
	        this._addRoute(rootPath, handler, []);
	      }
	      return this;
	    };

	    /**
	     * Set redirects.
	     *
	     * @param {Object} map
	     */

	    Router.prototype.redirect = function redirect(map) {
	      for (var path in map) {
	        this._addRedirect(path, map[path]);
	      }
	      return this;
	    };

	    /**
	     * Set aliases.
	     *
	     * @param {Object} map
	     */

	    Router.prototype.alias = function alias(map) {
	      for (var path in map) {
	        this._addAlias(path, map[path]);
	      }
	      return this;
	    };

	    /**
	     * Set global before hook.
	     *
	     * @param {Function} fn
	     */

	    Router.prototype.beforeEach = function beforeEach(fn) {
	      this._beforeEachHooks.push(fn);
	      return this;
	    };

	    /**
	     * Set global after hook.
	     *
	     * @param {Function} fn
	     */

	    Router.prototype.afterEach = function afterEach(fn) {
	      this._afterEachHooks.push(fn);
	      return this;
	    };

	    /**
	     * Navigate to a given path.
	     * The path can be an object describing a named path in
	     * the format of { name: '...', params: {}, query: {}}
	     * The path is assumed to be already decoded, and will
	     * be resolved against root (if provided)
	     *
	     * @param {String|Object} path
	     * @param {Boolean} [replace]
	     */

	    Router.prototype.go = function go(path) {
	      var replace = false;
	      var append = false;
	      if (Vue.util.isObject(path)) {
	        replace = path.replace;
	        append = path.append;
	      }
	      path = this.stringifyPath(path);
	      if (path) {
	        this.history.go(path, replace, append);
	      }
	    };

	    /**
	     * Short hand for replacing current path
	     *
	     * @param {String} path
	     */

	    Router.prototype.replace = function replace(path) {
	      if (typeof path === 'string') {
	        path = { path: path };
	      }
	      path.replace = true;
	      this.go(path);
	    };

	    /**
	     * Start the router.
	     *
	     * @param {VueConstructor} App
	     * @param {String|Element} container
	     * @param {Function} [cb]
	     */

	    Router.prototype.start = function start(App, container, cb) {
	      /* istanbul ignore if */
	      if (this._started) {
	        warn$1('already started.');
	        return;
	      }
	      this._started = true;
	      this._startCb = cb;
	      if (!this.app) {
	        /* istanbul ignore if */
	        if (!App || !container) {
	          throw new Error('Must start vue-router with a component and a ' + 'root container.');
	        }
	        /* istanbul ignore if */
	        if (App instanceof Vue) {
	          throw new Error('Must start vue-router with a component, not a ' + 'Vue instance.');
	        }
	        this._appContainer = container;
	        var Ctor = this._appConstructor = typeof App === 'function' ? App : Vue.extend(App);
	        // give it a name for better debugging
	        Ctor.options.name = Ctor.options.name || 'RouterApp';
	      }

	      // handle history fallback in browsers that do not
	      // support HTML5 history API
	      if (this._historyFallback) {
	        var _location = window.location;
	        var _history = new HTML5History({ root: this._root });
	        var path = _history.root ? _location.pathname.replace(_history.rootRE, '') : _location.pathname;
	        if (path && path !== '/') {
	          _location.assign((_history.root || '') + '/' + this.history.formatPath(path) + _location.search);
	          return;
	        }
	      }

	      this.history.start();
	    };

	    /**
	     * Stop listening to route changes.
	     */

	    Router.prototype.stop = function stop() {
	      this.history.stop();
	      this._started = false;
	    };

	    /**
	     * Normalize named route object / string paths into
	     * a string.
	     *
	     * @param {Object|String|Number} path
	     * @return {String}
	     */

	    Router.prototype.stringifyPath = function stringifyPath(path) {
	      var generatedPath = '';
	      if (path && typeof path === 'object') {
	        if (path.name) {
	          var extend = Vue.util.extend;
	          var currentParams = this._currentTransition && this._currentTransition.to.params;
	          var targetParams = path.params || {};
	          var params = currentParams ? extend(extend({}, currentParams), targetParams) : targetParams;
	          generatedPath = encodeURI(this._recognizer.generate(path.name, params));
	        } else if (path.path) {
	          generatedPath = encodeURI(path.path);
	        }
	        if (path.query) {
	          // note: the generated query string is pre-URL-encoded by the recognizer
	          var query = this._recognizer.generateQueryString(path.query);
	          if (generatedPath.indexOf('?') > -1) {
	            generatedPath += '&' + query.slice(1);
	          } else {
	            generatedPath += query;
	          }
	        }
	      } else {
	        generatedPath = encodeURI(path ? path + '' : '');
	      }
	      return generatedPath;
	    };

	    // Internal methods ======================================

	    /**
	    * Add a route containing a list of segments to the internal
	    * route recognizer. Will be called recursively to add all
	    * possible sub-routes.
	    *
	    * @param {String} path
	    * @param {Object} handler
	    * @param {Array} segments
	    */

	    Router.prototype._addRoute = function _addRoute(path, handler, segments) {
	      guardComponent(path, handler);
	      handler.path = path;
	      handler.fullPath = (segments.reduce(function (path, segment) {
	        return path + segment.path;
	      }, '') + path).replace('//', '/');
	      segments.push({
	        path: path,
	        handler: handler
	      });
	      this._recognizer.add(segments, {
	        as: handler.name
	      });
	      // add sub routes
	      if (handler.subRoutes) {
	        for (var subPath in handler.subRoutes) {
	          // recursively walk all sub routes
	          this._addRoute(subPath, handler.subRoutes[subPath],
	          // pass a copy in recursion to avoid mutating
	          // across branches
	          segments.slice());
	        }
	      }
	    };

	    /**
	     * Set the notFound route handler.
	     *
	     * @param {Object} handler
	     */

	    Router.prototype._notFound = function _notFound(handler) {
	      guardComponent('*', handler);
	      this._notFoundHandler = [{ handler: handler }];
	    };

	    /**
	     * Add a redirect record.
	     *
	     * @param {String} path
	     * @param {String} redirectPath
	     */

	    Router.prototype._addRedirect = function _addRedirect(path, redirectPath) {
	      if (path === '*') {
	        this._notFoundRedirect = redirectPath;
	      } else {
	        this._addGuard(path, redirectPath, this.replace);
	      }
	    };

	    /**
	     * Add an alias record.
	     *
	     * @param {String} path
	     * @param {String} aliasPath
	     */

	    Router.prototype._addAlias = function _addAlias(path, aliasPath) {
	      this._addGuard(path, aliasPath, this._match);
	    };

	    /**
	     * Add a path guard.
	     *
	     * @param {String} path
	     * @param {String} mappedPath
	     * @param {Function} handler
	     */

	    Router.prototype._addGuard = function _addGuard(path, mappedPath, _handler) {
	      var _this2 = this;

	      this._guardRecognizer.add([{
	        path: path,
	        handler: function handler(match, query) {
	          var realPath = mapParams(mappedPath, match.params, query);
	          _handler.call(_this2, realPath);
	        }
	      }]);
	    };

	    /**
	     * Check if a path matches any redirect records.
	     *
	     * @param {String} path
	     * @return {Boolean} - if true, will skip normal match.
	     */

	    Router.prototype._checkGuard = function _checkGuard(path) {
	      var matched = this._guardRecognizer.recognize(path, true);
	      if (matched) {
	        matched[0].handler(matched[0], matched.queryParams);
	        return true;
	      } else if (this._notFoundRedirect) {
	        matched = this._recognizer.recognize(path);
	        if (!matched) {
	          this.replace(this._notFoundRedirect);
	          return true;
	        }
	      }
	    };

	    /**
	     * Match a URL path and set the route context on vm,
	     * triggering view updates.
	     *
	     * @param {String} path
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */

	    Router.prototype._match = function _match(path, state, anchor) {
	      var _this3 = this;

	      if (this._checkGuard(path)) {
	        return;
	      }

	      var currentRoute = this._currentRoute;
	      var currentTransition = this._currentTransition;

	      if (currentTransition) {
	        if (currentTransition.to.path === path) {
	          // do nothing if we have an active transition going to the same path
	          return;
	        } else if (currentRoute.path === path) {
	          // We are going to the same path, but we also have an ongoing but
	          // not-yet-validated transition. Abort that transition and reset to
	          // prev transition.
	          currentTransition.aborted = true;
	          this._currentTransition = this._prevTransition;
	          return;
	        } else {
	          // going to a totally different path. abort ongoing transition.
	          currentTransition.aborted = true;
	        }
	      }

	      // construct new route and transition context
	      var route = new Route(path, this);
	      var transition = new RouteTransition(this, route, currentRoute);

	      // current transition is updated right now.
	      // however, current route will only be updated after the transition has
	      // been validated.
	      this._prevTransition = currentTransition;
	      this._currentTransition = transition;

	      if (!this.app) {
	        (function () {
	          // initial render
	          var router = _this3;
	          _this3.app = new _this3._appConstructor({
	            el: _this3._appContainer,
	            created: function created() {
	              this.$router = router;
	            },
	            _meta: {
	              $route: route
	            }
	          });
	        })();
	      }

	      // check global before hook
	      var beforeHooks = this._beforeEachHooks;
	      var startTransition = function startTransition() {
	        transition.start(function () {
	          _this3._postTransition(route, state, anchor);
	        });
	      };

	      if (beforeHooks.length) {
	        transition.runQueue(beforeHooks, function (hook, _, next) {
	          if (transition === _this3._currentTransition) {
	            transition.callHook(hook, null, next, {
	              expectBoolean: true
	            });
	          }
	        }, startTransition);
	      } else {
	        startTransition();
	      }

	      if (!this._rendered && this._startCb) {
	        this._startCb.call(null);
	      }

	      // HACK:
	      // set rendered to true after the transition start, so
	      // that components that are acitvated synchronously know
	      // whether it is the initial render.
	      this._rendered = true;
	    };

	    /**
	     * Set current to the new transition.
	     * This is called by the transition object when the
	     * validation of a route has succeeded.
	     *
	     * @param {Transition} transition
	     */

	    Router.prototype._onTransitionValidated = function _onTransitionValidated(transition) {
	      // set current route
	      var route = this._currentRoute = transition.to;
	      // update route context for all children
	      if (this.app.$route !== route) {
	        this.app.$route = route;
	        this._children.forEach(function (child) {
	          child.$route = route;
	        });
	      }
	      // call global after hook
	      if (this._afterEachHooks.length) {
	        this._afterEachHooks.forEach(function (hook) {
	          return hook.call(null, {
	            to: transition.to,
	            from: transition.from
	          });
	        });
	      }
	      this._currentTransition.done = true;
	    };

	    /**
	     * Handle stuff after the transition.
	     *
	     * @param {Route} route
	     * @param {Object} [state]
	     * @param {String} [anchor]
	     */

	    Router.prototype._postTransition = function _postTransition(route, state, anchor) {
	      // handle scroll positions
	      // saved scroll positions take priority
	      // then we check if the path has an anchor
	      var pos = state && state.pos;
	      if (pos && this._saveScrollPosition) {
	        Vue.nextTick(function () {
	          window.scrollTo(pos.x, pos.y);
	        });
	      } else if (anchor) {
	        Vue.nextTick(function () {
	          var el = document.getElementById(anchor.slice(1));
	          if (el) {
	            window.scrollTo(window.scrollX, el.offsetTop);
	          }
	        });
	      }
	    };

	    return Router;
	  })();

	  function guardComponent(path, handler) {
	    var comp = handler.component;
	    if (Vue.util.isPlainObject(comp)) {
	      comp = handler.component = Vue.extend(comp);
	    }
	    /* istanbul ignore if */
	    if (typeof comp !== 'function') {
	      handler.component = null;
	      warn$1('invalid component for route "' + path + '".');
	    }
	  }

	  /* Installation */

	  Router.installed = false;

	  /**
	   * Installation interface.
	   * Install the necessary directives.
	   */

	  Router.install = function (externalVue) {
	    /* istanbul ignore if */
	    if (Router.installed) {
	      warn$1('already installed.');
	      return;
	    }
	    Vue = externalVue;
	    applyOverride(Vue);
	    View(Vue);
	    Link(Vue);
	    exports$1.Vue = Vue;
	    Router.installed = true;
	  };

	  // auto install
	  /* istanbul ignore if */
	  if (typeof window !== 'undefined' && window.Vue) {
	    window.Vue.use(Router);
	  }

	  return Router;

	}));

/***/ },

/***/ 86:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(global, process) {(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object' && module.exports) {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.echarts = factory();
	    }
	}(this, function () {var require, define;
	(function () {
	    var mods = {};

	    define = function (id, deps, factory) {
	        mods[id] = {
	            id: id,
	            deps: deps,
	            factory: factory,
	            defined: 0,
	            exports: {},
	            require: createRequire(id)
	        };
	    };

	    require = createRequire('');

	    function normalize(id, baseId) {
	        if (!baseId) {
	            return id;
	        }

	        if (id.indexOf('.') === 0) {
	            var basePath = baseId.split('/');
	            var namePath = id.split('/');
	            var baseLen = basePath.length - 1;
	            var nameLen = namePath.length;
	            var cutBaseTerms = 0;
	            var cutNameTerms = 0;

	            pathLoop: for (var i = 0; i < nameLen; i++) {
	                switch (namePath[i]) {
	                    case '..':
	                        if (cutBaseTerms < baseLen) {
	                            cutBaseTerms++;
	                            cutNameTerms++;
	                        }
	                        else {
	                            break pathLoop;
	                        }
	                        break;
	                    case '.':
	                        cutNameTerms++;
	                        break;
	                    default:
	                        break pathLoop;
	                }
	            }

	            basePath.length = baseLen - cutBaseTerms;
	            namePath = namePath.slice(cutNameTerms);

	            return basePath.concat(namePath).join('/');
	        }

	        return id;
	    }

	    function createRequire(baseId) {
	        var cacheMods = {};

	        function localRequire(id, callback) {
	            if (typeof id === 'string') {
	                var exports = cacheMods[id];
	                if (!exports) {
	                    exports = getModExports(normalize(id, baseId));
	                    cacheMods[id] = exports;
	                }

	                return exports;
	            }
	            else if (id instanceof Array) {
	                callback = callback || function () {};
	                callback.apply(this, getModsExports(id, callback, baseId));
	            }
	        };

	        return localRequire;
	    }

	    function getModsExports(ids, factory, baseId) {
	        var es = [];
	        var mod = mods[baseId];

	        for (var i = 0, l = Math.min(ids.length, factory.length); i < l; i++) {
	            var id = normalize(ids[i], baseId);
	            var arg;
	            switch (id) {
	                case 'require':
	                    arg = (mod && mod.require) || require;
	                    break;
	                case 'exports':
	                    arg = mod.exports;
	                    break;
	                case 'module':
	                    arg = mod;
	                    break;
	                default:
	                    arg = getModExports(id);
	            }
	            es.push(arg);
	        }

	        return es;
	    }

	    function getModExports(id) {
	        var mod = mods[id];
	        if (!mod) {
	            throw new Error('No ' + id);
	        }

	        if (!mod.defined) {
	            var factory = mod.factory;
	            var factoryReturn = factory.apply(
	                this,
	                getModsExports(mod.deps || [], factory, id)
	            );
	            if (typeof factoryReturn !== 'undefined') {
	                mod.exports = factoryReturn;
	            }
	            mod.defined = 1;
	        }

	        return mod.exports;
	    }
	}());
	define('echarts/chart/line', ['require', 'zrender/core/util', '../echarts', './line/LineSeries', './line/LineView', '../visual/symbol', '../layout/points', '../processor/dataSample', '../component/grid'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var echarts = require('../echarts');
	    var PRIORITY = echarts.PRIORITY;
	    require('./line/LineSeries');
	    require('./line/LineView');
	    echarts.registerVisual(zrUtil.curry(require('../visual/symbol'), 'line', 'circle', 'line'));
	    echarts.registerLayout(zrUtil.curry(require('../layout/points'), 'line'));
	    // Down sample after filter
	    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(require('../processor/dataSample'), 'line'));
	    // In case developer forget to include grid component
	    require('../component/grid');
	});
	define('echarts/chart/bar', ['require', 'zrender/core/util', '../coord/cartesian/Grid', './bar/BarSeries', './bar/BarView', '../layout/barGrid', '../echarts', '../component/grid'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    require('../coord/cartesian/Grid');
	    require('./bar/BarSeries');
	    require('./bar/BarView');
	    var barLayoutGrid = require('../layout/barGrid');
	    var echarts = require('../echarts');
	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	    // Visual coding for legend
	    echarts.registerVisual(function (ecModel) {
	        ecModel.eachSeriesByType('bar', function (seriesModel) {
	            var data = seriesModel.getData();
	            data.setVisual('legendSymbol', 'roundRect');
	        });
	    });
	    // In case developer forget to include grid component
	    require('../component/grid');
	});
	define('echarts/component/title', ['require', '../echarts', '../util/graphic', '../util/layout'], function (require) {
	    'use strict';
	    var echarts = require('../echarts');
	    var graphic = require('../util/graphic');
	    var layout = require('../util/layout');
	    // Model
	    echarts.extendComponentModel({
	        type: 'title',
	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },
	        defaultOption: {
	            zlevel: 0,
	            z: 6,
	            show: true,
	            text: '',
	            target: 'blank',
	            subtext: '',
	            subtarget: 'blank',
	            left: 0,
	            top: 0,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderColor: '#ccc',
	            borderWidth: 0,
	            padding: 5,
	            itemGap: 10,
	            textStyle: {
	                fontSize: 18,
	                fontWeight: 'bolder',
	                color: '#333'
	            },
	            subtextStyle: { color: '#aaa' }
	        }
	    });
	    // View
	    echarts.extendComponentView({
	        type: 'title',
	        render: function (titleModel, ecModel, api) {
	            this.group.removeAll();
	            if (!titleModel.get('show')) {
	                return;
	            }
	            var group = this.group;
	            var textStyleModel = titleModel.getModel('textStyle');
	            var subtextStyleModel = titleModel.getModel('subtextStyle');
	            var textAlign = titleModel.get('textAlign');
	            var textBaseline = titleModel.get('textBaseline');
	            var textEl = new graphic.Text({
	                    style: {
	                        text: titleModel.get('text'),
	                        textFont: textStyleModel.getFont(),
	                        fill: textStyleModel.getTextColor()
	                    },
	                    z2: 10
	                });
	            var textRect = textEl.getBoundingRect();
	            var subText = titleModel.get('subtext');
	            var subTextEl = new graphic.Text({
	                    style: {
	                        text: subText,
	                        textFont: subtextStyleModel.getFont(),
	                        fill: subtextStyleModel.getTextColor(),
	                        y: textRect.height + titleModel.get('itemGap'),
	                        textBaseline: 'top'
	                    },
	                    z2: 10
	                });
	            var link = titleModel.get('link');
	            var sublink = titleModel.get('sublink');
	            textEl.silent = !link;
	            subTextEl.silent = !sublink;
	            if (link) {
	                textEl.on('click', function () {
	                    window.open(link, '_' + titleModel.get('target'));
	                });
	            }
	            if (sublink) {
	                subTextEl.on('click', function () {
	                    window.open(sublink, '_' + titleModel.get('subtarget'));
	                });
	            }
	            group.add(textEl);
	            subText && group.add(subTextEl);
	            // If no subText, but add subTextEl, there will be an empty line.
	            var groupRect = group.getBoundingRect();
	            var layoutOption = titleModel.getBoxLayoutParams();
	            layoutOption.width = groupRect.width;
	            layoutOption.height = groupRect.height;
	            var layoutRect = layout.getLayoutRect(layoutOption, {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }, titleModel.get('padding'));
	            // Adjust text align based on position
	            if (!textAlign) {
	                // Align left if title is on the left. center and right is same
	                textAlign = titleModel.get('left') || titleModel.get('right');
	                if (textAlign === 'middle') {
	                    textAlign = 'center';
	                }
	                // Adjust layout by text align
	                if (textAlign === 'right') {
	                    layoutRect.x += layoutRect.width;
	                } else if (textAlign === 'center') {
	                    layoutRect.x += layoutRect.width / 2;
	                }
	            }
	            if (!textBaseline) {
	                textBaseline = titleModel.get('top') || titleModel.get('bottom');
	                if (textBaseline === 'center') {
	                    textBaseline = 'middle';
	                }
	                if (textBaseline === 'bottom') {
	                    layoutRect.y += layoutRect.height;
	                } else if (textBaseline === 'middle') {
	                    layoutRect.y += layoutRect.height / 2;
	                }
	                textBaseline = textBaseline || 'top';
	            }
	            group.attr('position', [
	                layoutRect.x,
	                layoutRect.y
	            ]);
	            var alignStyle = {
	                    textAlign: textAlign,
	                    textVerticalAlign: textBaseline
	                };
	            textEl.setStyle(alignStyle);
	            subTextEl.setStyle(alignStyle);
	            // Render background
	            // Get groupRect again because textAlign has been changed
	            groupRect = group.getBoundingRect();
	            var padding = layoutRect.margin;
	            var style = titleModel.getItemStyle([
	                    'color',
	                    'opacity'
	                ]);
	            style.fill = titleModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                    shape: {
	                        x: groupRect.x - padding[3],
	                        y: groupRect.y - padding[0],
	                        width: groupRect.width + padding[1] + padding[3],
	                        height: groupRect.height + padding[0] + padding[2]
	                    },
	                    style: style,
	                    silent: true
	                });
	            graphic.subPixelOptimizeRect(rect);
	            group.add(rect);
	        }
	    });
	});
	define('echarts/chart/pie', ['require', 'zrender/core/util', '../echarts', './pie/PieSeries', './pie/PieView', '../action/createDataSelectAction', '../visual/dataColor', './pie/pieLayout', '../processor/dataFilter'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var echarts = require('../echarts');
	    require('./pie/PieSeries');
	    require('./pie/PieView');
	    require('../action/createDataSelectAction')('pie', [
	        {
	            type: 'pieToggleSelect',
	            event: 'pieselectchanged',
	            method: 'toggleSelected'
	        },
	        {
	            type: 'pieSelect',
	            event: 'pieselected',
	            method: 'select'
	        },
	        {
	            type: 'pieUnSelect',
	            event: 'pieunselected',
	            method: 'unSelect'
	        }
	    ]);
	    echarts.registerVisual(zrUtil.curry(require('../visual/dataColor'), 'pie'));
	    echarts.registerLayout(zrUtil.curry(require('./pie/pieLayout'), 'pie'));
	    echarts.registerProcessor(zrUtil.curry(require('../processor/dataFilter'), 'pie'));
	});
	define('echarts/echarts', ['require', 'zrender/core/env', './model/Global', './ExtensionAPI', './CoordinateSystem', './model/OptionManager', './model/Component', './model/Series', './view/Component', './view/Chart', './util/graphic', 'zrender', 'zrender/core/util', 'zrender/tool/color', 'zrender/mixin/Eventful', 'zrender/core/timsort', './loading/default', './visual/seriesColor', './preprocessor/backwardCompat', './data/List', './model/Model', './util/number', './util/format', 'zrender/core/matrix', 'zrender/core/vector'], function (require) {
	    var env = require('zrender/core/env');
	    var GlobalModel = require('./model/Global');
	    var ExtensionAPI = require('./ExtensionAPI');
	    var CoordinateSystemManager = require('./CoordinateSystem');
	    var OptionManager = require('./model/OptionManager');
	    var ComponentModel = require('./model/Component');
	    var SeriesModel = require('./model/Series');
	    var ComponentView = require('./view/Component');
	    var ChartView = require('./view/Chart');
	    var graphic = require('./util/graphic');
	    var zrender = require('zrender');
	    var zrUtil = require('zrender/core/util');
	    var colorTool = require('zrender/tool/color');
	    var Eventful = require('zrender/mixin/Eventful');
	    var timsort = require('zrender/core/timsort');
	    var each = zrUtil.each;
	    var PRIORITY_PROCESSOR_FILTER = 1000;
	    var PRIORITY_PROCESSOR_STATISTIC = 5000;
	    var PRIORITY_VISUAL_LAYOUT = 1000;
	    var PRIORITY_VISUAL_GLOBAL = 2000;
	    var PRIORITY_VISUAL_CHART = 3000;
	    var PRIORITY_VISUAL_COMPONENT = 4000;
	    var PRIORITY_VISUAL_BRUSH = 5000;
	    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	    // where they must not be invoked nestedly, except the only case: invoke
	    // dispatchAction with updateMethod "none" in main process.
	    // This flag is used to carry out this rule.
	    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
	    var IN_MAIN_PROCESS = '__flag_in_main_process';
	    var HAS_GRADIENT_OR_PATTERN_BG = '_hasGradientOrPatternBg';
	    function createRegisterEventWithLowercaseName(method) {
	        return function (eventName, handler, context) {
	            // Event name is all lowercase
	            eventName = eventName && eventName.toLowerCase();
	            Eventful.prototype[method].call(this, eventName, handler, context);
	        };
	    }
	    /**
	     * @module echarts~MessageCenter
	     */
	    function MessageCenter() {
	        Eventful.call(this);
	    }
	    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	    zrUtil.mixin(MessageCenter, Eventful);
	    /**
	     * @module echarts~ECharts
	     */
	    function ECharts(dom, theme, opts) {
	        opts = opts || {};
	        // Get theme by name
	        if (typeof theme === 'string') {
	            theme = themeStorage[theme];
	        }
	        /**
	         * @type {string}
	         */
	        this.id;
	        /**
	         * Group id
	         * @type {string}
	         */
	        this.group;
	        /**
	         * @type {HTMLDomElement}
	         * @private
	         */
	        this._dom = dom;
	        /**
	         * @type {module:zrender/ZRender}
	         * @private
	         */
	        this._zr = zrender.init(dom, {
	            renderer: opts.renderer || 'canvas',
	            devicePixelRatio: opts.devicePixelRatio
	        });
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._theme = zrUtil.clone(theme);
	        /**
	         * @type {Array.<module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsViews = [];
	        /**
	         * @type {Object.<string, module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsMap = {};
	        /**
	         * @type {Array.<module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsViews = [];
	        /**
	         * @type {Object.<string, module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsMap = {};
	        /**
	         * @type {module:echarts/ExtensionAPI}
	         * @private
	         */
	        this._api = new ExtensionAPI(this);
	        /**
	         * @type {module:echarts/CoordinateSystem}
	         * @private
	         */
	        this._coordSysMgr = new CoordinateSystemManager();
	        Eventful.call(this);
	        /**
	         * @type {module:echarts~MessageCenter}
	         * @private
	         */
	        this._messageCenter = new MessageCenter();
	        // Init mouse events
	        this._initEvents();
	        // In case some people write `window.onresize = chart.resize`
	        this.resize = zrUtil.bind(this.resize, this);
	        // Can't dispatch action during rendering procedure
	        this._pendingActions = [];
	        // Sort on demand
	        function prioritySortFunc(a, b) {
	            return a.prio - b.prio;
	        }
	        timsort(visualFuncs, prioritySortFunc);
	        timsort(dataProcessorFuncs, prioritySortFunc);
	    }
	    var echartsProto = ECharts.prototype;
	    /**
	     * @return {HTMLDomElement}
	     */
	    echartsProto.getDom = function () {
	        return this._dom;
	    };
	    /**
	     * @return {module:zrender~ZRender}
	     */
	    echartsProto.getZr = function () {
	        return this._zr;
	    };
	    /**
	     * @param {Object} option
	     * @param {boolean} notMerge
	     * @param {boolean} [notRefreshImmediately=false] Useful when setOption frequently.
	     */
	    echartsProto.setOption = function (option, notMerge, notRefreshImmediately) {
	        if (true) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');
	        }
	        this[IN_MAIN_PROCESS] = true;
	        if (!this._model || notMerge) {
	            var optionManager = new OptionManager(this._api);
	            var theme = this._theme;
	            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	            ecModel.init(null, null, theme, optionManager);
	        }
	        this._model.setOption(option, optionPreprocessorFuncs);
	        updateMethods.prepareAndUpdate.call(this);
	        this[IN_MAIN_PROCESS] = false;
	        this._flushPendingActions();
	        !notRefreshImmediately && this._zr.refreshImmediately();
	    };
	    /**
	     * @DEPRECATED
	     */
	    echartsProto.setTheme = function () {
	        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	    };
	    /**
	     * @return {module:echarts/model/Global}
	     */
	    echartsProto.getModel = function () {
	        return this._model;
	    };
	    /**
	     * @return {Object}
	     */
	    echartsProto.getOption = function () {
	        return this._model.getOption();
	    };
	    /**
	     * @return {number}
	     */
	    echartsProto.getWidth = function () {
	        return this._zr.getWidth();
	    };
	    /**
	     * @return {number}
	     */
	    echartsProto.getHeight = function () {
	        return this._zr.getHeight();
	    };
	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getRenderedCanvas = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        opts = opts || {};
	        opts.pixelRatio = opts.pixelRatio || 1;
	        opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	        var zr = this._zr;
	        var list = zr.storage.getDisplayList();
	        // Stop animations
	        zrUtil.each(list, function (el) {
	            el.stopAnimation(true);
	        });
	        return zr.painter.getRenderedCanvas(opts);
	    };
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getDataURL = function (opts) {
	        opts = opts || {};
	        var excludeComponents = opts.excludeComponents;
	        var ecModel = this._model;
	        var excludesComponentViews = [];
	        var self = this;
	        each(excludeComponents, function (componentType) {
	            ecModel.eachComponent({ mainType: componentType }, function (component) {
	                var view = self._componentsMap[component.__viewId];
	                if (!view.group.ignore) {
	                    excludesComponentViews.push(view);
	                    view.group.ignore = true;
	                }
	            });
	        });
	        var url = this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
	        each(excludesComponentViews, function (view) {
	            view.group.ignore = false;
	        });
	        return url;
	    };
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getConnectedDataURL = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        var groupId = this.group;
	        var mathMin = Math.min;
	        var mathMax = Math.max;
	        var MAX_NUMBER = Infinity;
	        if (connectedGroups[groupId]) {
	            var left = MAX_NUMBER;
	            var top = MAX_NUMBER;
	            var right = -MAX_NUMBER;
	            var bottom = -MAX_NUMBER;
	            var canvasList = [];
	            var dpr = opts && opts.pixelRatio || 1;
	            for (var id in instances) {
	                var chart = instances[id];
	                if (chart.group === groupId) {
	                    var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	                    var boundingRect = chart.getDom().getBoundingClientRect();
	                    left = mathMin(boundingRect.left, left);
	                    top = mathMin(boundingRect.top, top);
	                    right = mathMax(boundingRect.right, right);
	                    bottom = mathMax(boundingRect.bottom, bottom);
	                    canvasList.push({
	                        dom: canvas,
	                        left: boundingRect.left,
	                        top: boundingRect.top
	                    });
	                }
	            }
	            left *= dpr;
	            top *= dpr;
	            right *= dpr;
	            bottom *= dpr;
	            var width = right - left;
	            var height = bottom - top;
	            var targetCanvas = zrUtil.createCanvas();
	            targetCanvas.width = width;
	            targetCanvas.height = height;
	            var zr = zrender.init(targetCanvas);
	            each(canvasList, function (item) {
	                var img = new graphic.Image({
	                        style: {
	                            x: item.left * dpr - left,
	                            y: item.top * dpr - top,
	                            image: item.dom
	                        }
	                    });
	                zr.add(img);
	            });
	            zr.refreshImmediately();
	            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	        } else {
	            return this.getDataURL(opts);
	        }
	    };
	    var updateMethods = {
	            update: function (payload) {
	                // console.time && console.time('update');
	                var ecModel = this._model;
	                var api = this._api;
	                var coordSysMgr = this._coordSysMgr;
	                var zr = this._zr;
	                // update before setOption
	                if (!ecModel) {
	                    return;
	                }
	                // Fixme First time update ?
	                ecModel.restoreData();
	                // TODO
	                // Save total ecModel here for undo/redo (after restoring data and before processing data).
	                // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	                // Create new coordinate system each update
	                // In LineView may save the old coordinate system and use it to get the orignal point
	                coordSysMgr.create(this._model, this._api);
	                processData.call(this, ecModel, api);
	                stackSeriesData.call(this, ecModel);
	                coordSysMgr.update(ecModel, api);
	                doVisualEncoding.call(this, ecModel, payload);
	                doRender.call(this, ecModel, payload);
	                // Set background
	                var backgroundColor = ecModel.get('backgroundColor') || 'transparent';
	                var painter = zr.painter;
	                // TODO all use clearColor ?
	                if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	                    zr.configLayer(0, { clearColor: backgroundColor });
	                } else {
	                    // In IE8
	                    if (!env.canvasSupported) {
	                        var colorArr = colorTool.parse(backgroundColor);
	                        backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                        if (colorArr[3] === 0) {
	                            backgroundColor = 'transparent';
	                        }
	                    }
	                    if (backgroundColor.colorStops || backgroundColor.image) {
	                        // Gradient background
	                        // FIXME Fixed layer？
	                        zr.configLayer(0, { clearColor: backgroundColor });
	                        this[HAS_GRADIENT_OR_PATTERN_BG] = true;
	                        this._dom.style.background = 'transparent';
	                    } else {
	                        if (this[HAS_GRADIENT_OR_PATTERN_BG]) {
	                            zr.configLayer(0, { clearColor: null });
	                        }
	                        this[HAS_GRADIENT_OR_PATTERN_BG] = false;
	                        this._dom.style.background = backgroundColor;
	                    }
	                }    // console.time && console.timeEnd('update');
	            },
	            updateView: function (payload) {
	                var ecModel = this._model;
	                // update before setOption
	                if (!ecModel) {
	                    return;
	                }
	                ecModel.eachSeries(function (seriesModel) {
	                    seriesModel.getData().clearAllVisual();
	                });
	                doVisualEncoding.call(this, ecModel, payload);
	                invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	            },
	            updateVisual: function (payload) {
	                var ecModel = this._model;
	                // update before setOption
	                if (!ecModel) {
	                    return;
	                }
	                ecModel.eachSeries(function (seriesModel) {
	                    seriesModel.getData().clearAllVisual();
	                });
	                doVisualEncoding.call(this, ecModel, payload);
	                invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	            },
	            updateLayout: function (payload) {
	                var ecModel = this._model;
	                // update before setOption
	                if (!ecModel) {
	                    return;
	                }
	                doLayout.call(this, ecModel, payload);
	                invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	            },
	            highlight: function (payload) {
	                toggleHighlight.call(this, 'highlight', payload);
	            },
	            downplay: function (payload) {
	                toggleHighlight.call(this, 'downplay', payload);
	            },
	            prepareAndUpdate: function (payload) {
	                var ecModel = this._model;
	                prepareView.call(this, 'component', ecModel);
	                prepareView.call(this, 'chart', ecModel);
	                updateMethods.update.call(this, payload);
	            }
	        };
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    function toggleHighlight(method, payload) {
	        var ecModel = this._model;
	        // dispatchAction before setOption
	        if (!ecModel) {
	            return;
	        }
	        ecModel.eachComponent({
	            mainType: 'series',
	            query: payload
	        }, function (seriesModel, index) {
	            var chartView = this._chartsMap[seriesModel.__viewId];
	            if (chartView && chartView.__alive) {
	                chartView[method](seriesModel, ecModel, this._api, payload);
	            }
	        }, this);
	    }
	    /**
	     * Resize the chart
	     */
	    echartsProto.resize = function () {
	        if (true) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');
	        }
	        this[IN_MAIN_PROCESS] = true;
	        this._zr.resize();
	        var optionChanged = this._model && this._model.resetOption('media');
	        updateMethods[optionChanged ? 'prepareAndUpdate' : 'update'].call(this);
	        // Resize loading effect
	        this._loadingFX && this._loadingFX.resize();
	        this[IN_MAIN_PROCESS] = false;
	        this._flushPendingActions();
	    };
	    var defaultLoadingEffect = require('./loading/default');
	    /**
	     * Show loading effect
	     * @param  {string} [name='default']
	     * @param  {Object} [cfg]
	     */
	    echartsProto.showLoading = function (name, cfg) {
	        if (zrUtil.isObject(name)) {
	            cfg = name;
	            name = 'default';
	        }
	        this.hideLoading();
	        var el = defaultLoadingEffect(this._api, cfg);
	        var zr = this._zr;
	        this._loadingFX = el;
	        zr.add(el);
	    };
	    /**
	     * Hide loading effect
	     */
	    echartsProto.hideLoading = function () {
	        this._loadingFX && this._zr.remove(this._loadingFX);
	        this._loadingFX = null;
	    };
	    /**
	     * @param {Object} eventObj
	     * @return {Object}
	     */
	    echartsProto.makeActionFromEvent = function (eventObj) {
	        var payload = zrUtil.extend({}, eventObj);
	        payload.type = eventActionMap[eventObj.type];
	        return payload;
	    };
	    /**
	     * @pubilc
	     * @param {Object} payload
	     * @param {string} [payload.type] Action type
	     * @param {boolean} [silent=false] Whether trigger event.
	     */
	    echartsProto.dispatchAction = function (payload, silent) {
	        var actionWrap = actions[payload.type];
	        if (!actionWrap) {
	            return;
	        }
	        var actionInfo = actionWrap.actionInfo;
	        var updateMethod = actionInfo.update || 'update';
	        // if (__DEV__) {
	        //     zrUtil.assert(
	        //         !this[IN_MAIN_PROCESS],
	        //         '`dispatchAction` should not be called during main process.'
	        //         + 'unless updateMathod is "none".'
	        //     );
	        // }
	        // May dispatchAction in rendering procedure
	        if (this[IN_MAIN_PROCESS]) {
	            this._pendingActions.push(payload);
	            return;
	        }
	        this[IN_MAIN_PROCESS] = true;
	        var payloads = [payload];
	        var batched = false;
	        // Batch action
	        if (payload.batch) {
	            batched = true;
	            payloads = zrUtil.map(payload.batch, function (item) {
	                item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	                item.batch = null;
	                return item;
	            });
	        }
	        var eventObjBatch = [];
	        var eventObj;
	        var isHighlightOrDownplay = payload.type === 'highlight' || payload.type === 'downplay';
	        for (var i = 0; i < payloads.length; i++) {
	            var batchItem = payloads[i];
	            // Action can specify the event by return it.
	            eventObj = actionWrap.action(batchItem, this._model);
	            // Emit event outside
	            eventObj = eventObj || zrUtil.extend({}, batchItem);
	            // Convert type to eventType
	            eventObj.type = actionInfo.event || eventObj.type;
	            eventObjBatch.push(eventObj);
	            // Highlight and downplay are special.
	            isHighlightOrDownplay && updateMethods[updateMethod].call(this, batchItem);
	        }
	        updateMethod !== 'none' && !isHighlightOrDownplay && updateMethods[updateMethod].call(this, payload);
	        // Follow the rule of action batch
	        if (batched) {
	            eventObj = {
	                type: actionInfo.event || payload.type,
	                batch: eventObjBatch
	            };
	        } else {
	            eventObj = eventObjBatch[0];
	        }
	        this[IN_MAIN_PROCESS] = false;
	        !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	        this._flushPendingActions();
	    };
	    echartsProto._flushPendingActions = function () {
	        var pendingActions = this._pendingActions;
	        while (pendingActions.length) {
	            var payload = pendingActions.shift();
	            this.dispatchAction(payload);
	        }
	    };
	    /**
	     * Register event
	     * @method
	     */
	    echartsProto.on = createRegisterEventWithLowercaseName('on');
	    echartsProto.off = createRegisterEventWithLowercaseName('off');
	    echartsProto.one = createRegisterEventWithLowercaseName('one');
	    /**
	     * @param {string} methodName
	     * @private
	     */
	    function invokeUpdateMethod(methodName, ecModel, payload) {
	        var api = this._api;
	        // Update all components
	        each(this._componentsViews, function (component) {
	            var componentModel = component.__model;
	            component[methodName](componentModel, ecModel, api, payload);
	            updateZ(componentModel, component);
	        }, this);
	        // Upate all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chart = this._chartsMap[seriesModel.__viewId];
	            chart[methodName](seriesModel, ecModel, api, payload);
	            updateZ(seriesModel, chart);
	            updateProgressiveAndBlend(seriesModel, chart);
	        }, this);
	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);
	    }
	    /**
	     * Prepare view instances of charts and components
	     * @param  {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function prepareView(type, ecModel) {
	        var isComponent = type === 'component';
	        var viewList = isComponent ? this._componentsViews : this._chartsViews;
	        var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	        var zr = this._zr;
	        for (var i = 0; i < viewList.length; i++) {
	            viewList[i].__alive = false;
	        }
	        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	            if (isComponent) {
	                if (componentType === 'series') {
	                    return;
	                }
	            } else {
	                model = componentType;
	            }
	            // Consider: id same and type changed.
	            var viewId = model.id + '_' + model.type;
	            var view = viewMap[viewId];
	            if (!view) {
	                var classType = ComponentModel.parseClassType(model.type);
	                var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);
	                if (Clazz) {
	                    view = new Clazz();
	                    view.init(ecModel, this._api);
	                    viewMap[viewId] = view;
	                    viewList.push(view);
	                    zr.add(view.group);
	                } else {
	                    // Error
	                    return;
	                }
	            }
	            model.__viewId = viewId;
	            view.__alive = true;
	            view.__id = viewId;
	            view.__model = model;
	        }, this);
	        for (var i = 0; i < viewList.length;) {
	            var view = viewList[i];
	            if (!view.__alive) {
	                zr.remove(view.group);
	                view.dispose(ecModel, this._api);
	                viewList.splice(i, 1);
	                delete viewMap[view.__id];
	            } else {
	                i++;
	            }
	        }
	    }
	    /**
	     * Processor data in each series
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function processData(ecModel, api) {
	        each(dataProcessorFuncs, function (process) {
	            process.func(ecModel, api);
	        });
	    }
	    /**
	     * @private
	     */
	    function stackSeriesData(ecModel) {
	        var stackedDataMap = {};
	        ecModel.eachSeries(function (series) {
	            var stack = series.get('stack');
	            var data = series.getData();
	            if (stack && data.type === 'list') {
	                var previousStack = stackedDataMap[stack];
	                if (previousStack) {
	                    data.stackedOn = previousStack;
	                }
	                stackedDataMap[stack] = data;
	            }
	        });
	    }
	    /**
	     * Layout before each chart render there series, special visual encoding stage
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doLayout(ecModel, payload) {
	        var api = this._api;
	        each(visualFuncs, function (visual) {
	            if (visual.isLayout) {
	                visual.func(ecModel, api, payload);
	            }
	        });
	    }
	    /**
	     * Encode visual infomation from data after data processing
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doVisualEncoding(ecModel, payload) {
	        var api = this._api;
	        ecModel.clearColorPalette();
	        ecModel.eachSeries(function (seriesModel) {
	            seriesModel.clearColorPalette();
	        });
	        each(visualFuncs, function (visual) {
	            visual.func(ecModel, api, payload);
	        });
	    }
	    /**
	     * Render each chart and component
	     * @private
	     */
	    function doRender(ecModel, payload) {
	        var api = this._api;
	        // Render all components
	        each(this._componentsViews, function (componentView) {
	            var componentModel = componentView.__model;
	            componentView.render(componentModel, ecModel, api, payload);
	            updateZ(componentModel, componentView);
	        }, this);
	        each(this._chartsViews, function (chart) {
	            chart.__alive = false;
	        }, this);
	        // Render all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chartView = this._chartsMap[seriesModel.__viewId];
	            chartView.__alive = true;
	            chartView.render(seriesModel, ecModel, api, payload);
	            chartView.group.silent = !!seriesModel.get('silent');
	            updateZ(seriesModel, chartView);
	            updateProgressiveAndBlend(seriesModel, chartView);
	        }, this);
	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);
	        // Remove groups of unrendered charts
	        each(this._chartsViews, function (chart) {
	            if (!chart.__alive) {
	                chart.remove(ecModel, api);
	            }
	        }, this);
	    }
	    var MOUSE_EVENT_NAMES = [
	            'click',
	            'dblclick',
	            'mouseover',
	            'mouseout',
	            'mousedown',
	            'mouseup',
	            'globalout'
	        ];
	    /**
	     * @private
	     */
	    echartsProto._initEvents = function () {
	        each(MOUSE_EVENT_NAMES, function (eveName) {
	            this._zr.on(eveName, function (e) {
	                var ecModel = this.getModel();
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                    var params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	                    params.event = e;
	                    params.type = eveName;
	                    this.trigger(eveName, params);
	                }    // If element has custom eventData of components
	                else if (el && el.eventData) {
	                    this.trigger(eveName, el.eventData);
	                }
	            }, this);
	        }, this);
	        each(eventActionMap, function (actionType, eventType) {
	            this._messageCenter.on(eventType, function (event) {
	                this.trigger(eventType, event);
	            }, this);
	        }, this);
	    };
	    /**
	     * @return {boolean}
	     */
	    echartsProto.isDisposed = function () {
	        return this._disposed;
	    };
	    /**
	     * Clear
	     */
	    echartsProto.clear = function () {
	        this.setOption({}, true);
	    };
	    /**
	     * Dispose instance
	     */
	    echartsProto.dispose = function () {
	        if (this._disposed) {
	            if (true) {
	                console.warn('Instance ' + this.id + ' has been disposed');
	            }
	            return;
	        }
	        this._disposed = true;
	        var api = this._api;
	        var ecModel = this._model;
	        each(this._componentsViews, function (component) {
	            component.dispose(ecModel, api);
	        });
	        each(this._chartsViews, function (chart) {
	            chart.dispose(ecModel, api);
	        });
	        // Dispose after all views disposed
	        this._zr.dispose();
	        delete instances[this.id];
	    };
	    zrUtil.mixin(ECharts, Eventful);
	    function updateHoverLayerStatus(zr, ecModel) {
	        var storage = zr.storage;
	        var elCount = 0;
	        storage.traverse(function (el) {
	            if (!el.isGroup) {
	                elCount++;
	            }
	        });
	        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	            storage.traverse(function (el) {
	                if (!el.isGroup) {
	                    el.useHoverLayer = true;
	                }
	            });
	        }
	    }
	    /**
	     * Update chart progressive and blend.
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateProgressiveAndBlend(seriesModel, chartView) {
	        // Progressive configuration
	        var elCount = 0;
	        chartView.group.traverse(function (el) {
	            if (el.type !== 'group' && !el.ignore) {
	                elCount++;
	            }
	        });
	        var frameDrawNum = +seriesModel.get('progressive');
	        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;
	        if (needProgressive) {
	            chartView.group.traverse(function (el) {
	                // FIXME marker and other components
	                if (!el.isGroup) {
	                    el.progressive = needProgressive ? Math.floor(elCount++ / frameDrawNum) : -1;
	                    if (needProgressive) {
	                        el.stopAnimation(true);
	                    }
	                }
	            });
	        }
	        // Blend configration
	        var blendMode = seriesModel.get('blendMode') || null;
	        if (true) {
	            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {
	                console.warn('Only canvas support blendMode');
	            }
	        }
	        chartView.group.traverse(function (el) {
	            // FIXME marker and other components
	            if (!el.isGroup) {
	                el.setStyle('blend', blendMode);
	            }
	        });
	    }
	    /**
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateZ(model, view) {
	        var z = model.get('z');
	        var zlevel = model.get('zlevel');
	        // Set z and zlevel
	        view.group.traverse(function (el) {
	            if (el.type !== 'group') {
	                z != null && (el.z = z);
	                zlevel != null && (el.zlevel = zlevel);
	            }
	        });
	    }
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var actions = [];
	    /**
	     * Map eventType to actionType
	     * @type {Object}
	     */
	    var eventActionMap = {};
	    /**
	     * Data processor functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var dataProcessorFuncs = [];
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var optionPreprocessorFuncs = [];
	    /**
	     * Visual encoding functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var visualFuncs = [];
	    /**
	     * Theme storage
	     * @type {Object.<key, Object>}
	     */
	    var themeStorage = {};
	    var instances = {};
	    var connectedGroups = {};
	    var idBase = new Date() - 0;
	    var groupIdBase = new Date() - 0;
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	    /**
	     * @alias module:echarts
	     */
	    var echarts = {
	            version: '3.2.2',
	            dependencies: { zrender: '3.1.2' }
	        };
	    function enableConnect(chart) {
	        var STATUS_PENDING = 0;
	        var STATUS_UPDATING = 1;
	        var STATUS_UPDATED = 2;
	        var STATUS_KEY = '__connectUpdateStatus';
	        function updateConnectedChartsStatus(charts, status) {
	            for (var i = 0; i < charts.length; i++) {
	                var otherChart = charts[i];
	                otherChart[STATUS_KEY] = status;
	            }
	        }
	        zrUtil.each(eventActionMap, function (actionType, eventType) {
	            chart._messageCenter.on(eventType, function (event) {
	                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                    var action = chart.makeActionFromEvent(event);
	                    var otherCharts = [];
	                    for (var id in instances) {
	                        var otherChart = instances[id];
	                        if (otherChart !== chart && otherChart.group === chart.group) {
	                            otherCharts.push(otherChart);
	                        }
	                    }
	                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                    each(otherCharts, function (otherChart) {
	                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                            otherChart.dispatchAction(action);
	                        }
	                    });
	                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	                }
	            });
	        });
	    }
	    /**
	     * @param {HTMLDomElement} dom
	     * @param {Object} [theme]
	     * @param {Object} opts
	     */
	    echarts.init = function (dom, theme, opts) {
	        if (true) {
	            // Check version
	            if (zrender.version.replace('.', '') - 0 < echarts.dependencies.zrender.replace('.', '') - 0) {
	                throw new Error('ZRender ' + zrender.version + ' is too old for ECharts ' + echarts.version + '. Current version need ZRender ' + echarts.dependencies.zrender + '+');
	            }
	            if (!dom) {
	                throw new Error('Initialize failed: invalid dom.');
	            }
	            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {
	                console.warn('Can\'t get dom width or height');
	            }
	        }
	        var chart = new ECharts(dom, theme, opts);
	        chart.id = 'ec_' + idBase++;
	        instances[chart.id] = chart;
	        dom.setAttribute && dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);
	        enableConnect(chart);
	        return chart;
	    };
	    /**
	     * @return {string|Array.<module:echarts~ECharts>} groupId
	     */
	    echarts.connect = function (groupId) {
	        // Is array of charts
	        if (zrUtil.isArray(groupId)) {
	            var charts = groupId;
	            groupId = null;
	            // If any chart has group
	            zrUtil.each(charts, function (chart) {
	                if (chart.group != null) {
	                    groupId = chart.group;
	                }
	            });
	            groupId = groupId || 'g_' + groupIdBase++;
	            zrUtil.each(charts, function (chart) {
	                chart.group = groupId;
	            });
	        }
	        connectedGroups[groupId] = true;
	        return groupId;
	    };
	    /**
	     * @return {string} groupId
	     */
	    echarts.disConnect = function (groupId) {
	        connectedGroups[groupId] = false;
	    };
	    /**
	     * Dispose a chart instance
	     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	     */
	    echarts.dispose = function (chart) {
	        if (zrUtil.isDom(chart)) {
	            chart = echarts.getInstanceByDom(chart);
	        } else if (typeof chart === 'string') {
	            chart = instances[chart];
	        }
	        if (chart instanceof ECharts && !chart.isDisposed()) {
	            chart.dispose();
	        }
	    };
	    /**
	     * @param  {HTMLDomElement} dom
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceByDom = function (dom) {
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        return instances[key];
	    };
	    /**
	     * @param {string} key
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceById = function (key) {
	        return instances[key];
	    };
	    /**
	     * Register theme
	     */
	    echarts.registerTheme = function (name, theme) {
	        themeStorage[name] = theme;
	    };
	    /**
	     * Register option preprocessor
	     * @param {Function} preprocessorFunc
	     */
	    echarts.registerPreprocessor = function (preprocessorFunc) {
	        optionPreprocessorFuncs.push(preprocessorFunc);
	    };
	    /**
	     * @param {number} [priority=1000]
	     * @param {Function} processorFunc
	     */
	    echarts.registerProcessor = function (priority, processorFunc) {
	        if (typeof priority === 'function') {
	            processorFunc = priority;
	            priority = PRIORITY_PROCESSOR_FILTER;
	        }
	        if (true) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown processor priority');
	            }
	        }
	        dataProcessorFuncs.push({
	            prio: priority,
	            func: processorFunc
	        });
	    };
	    /**
	     * Usage:
	     * registerAction('someAction', 'someEvent', function () { ... });
	     * registerAction('someAction', function () { ... });
	     * registerAction(
	     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	     *     function () { ... }
	     * );
	     *
	     * @param {(string|Object)} actionInfo
	     * @param {string} actionInfo.type
	     * @param {string} [actionInfo.event]
	     * @param {string} [actionInfo.update]
	     * @param {string} [eventName]
	     * @param {Function} action
	     */
	    echarts.registerAction = function (actionInfo, eventName, action) {
	        if (typeof eventName === 'function') {
	            action = eventName;
	            eventName = '';
	        }
	        var actionType = zrUtil.isObject(actionInfo) ? actionInfo.type : [
	                actionInfo,
	                actionInfo = { event: eventName }
	            ][0];
	        // Event name is all lowercase
	        actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	        eventName = actionInfo.event;
	        if (!actions[actionType]) {
	            actions[actionType] = {
	                action: action,
	                actionInfo: actionInfo
	            };
	        }
	        eventActionMap[eventName] = actionType;
	    };
	    /**
	     * @param {string} type
	     * @param {*} CoordinateSystem
	     */
	    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	        CoordinateSystemManager.register(type, CoordinateSystem);
	    };
	    /**
	     * Layout is a special stage of visual encoding
	     * Most visual encoding like color are common for different chart
	     * But each chart has it's own layout algorithm
	     *
	     * @param {string} [priority=1000]
	     * @param {Function} layoutFunc
	     */
	    echarts.registerLayout = function (priority, layoutFunc) {
	        if (typeof priority === 'function') {
	            layoutFunc = priority;
	            priority = PRIORITY_VISUAL_LAYOUT;
	        }
	        if (true) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown layout priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: layoutFunc,
	            isLayout: true
	        });
	    };
	    /**
	     * @param {string} [priority=3000]
	     * @param {Function} visualFunc
	     */
	    echarts.registerVisual = function (priority, visualFunc) {
	        if (typeof priority === 'function') {
	            visualFunc = priority;
	            priority = PRIORITY_VISUAL_CHART;
	        }
	        if (true) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown visual priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: visualFunc
	        });
	    };
	    var parseClassType = ComponentModel.parseClassType;
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentModel = function (opts, superClass) {
	        var Clazz = ComponentModel;
	        if (superClass) {
	            var classType = parseClassType(superClass);
	            Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	        }
	        return Clazz.extend(opts);
	    };
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentView = function (opts, superClass) {
	        var Clazz = ComponentView;
	        if (superClass) {
	            var classType = parseClassType(superClass);
	            Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	        }
	        return Clazz.extend(opts);
	    };
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendSeriesModel = function (opts, superClass) {
	        var Clazz = SeriesModel;
	        if (superClass) {
	            superClass = 'series.' + superClass.replace('series.', '');
	            var classType = parseClassType(superClass);
	            Clazz = SeriesModel.getClass(classType.main, classType.sub, true);
	        }
	        return Clazz.extend(opts);
	    };
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendChartView = function (opts, superClass) {
	        var Clazz = ChartView;
	        if (superClass) {
	            superClass.replace('series.', '');
	            var classType = parseClassType(superClass);
	            Clazz = ChartView.getClass(classType.main, true);
	        }
	        return ChartView.extend(opts);
	    };
	    /**
	     * ZRender need a canvas context to do measureText.
	     * But in node environment canvas may be created by node-canvas.
	     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	     *
	     * Be careful of using it in the browser.
	     *
	     * @param {Function} creator
	     * @example
	     *     var Canvas = require('canvas');
	     *     var echarts = require('echarts');
	     *     echarts.setCanvasCreator(function () {
	     *         // Small size is enough.
	     *         return new Canvas(32, 32);
	     *     });
	     */
	    echarts.setCanvasCreator = function (creator) {
	        zrUtil.createCanvas = creator;
	    };
	    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, require('./visual/seriesColor'));
	    echarts.registerPreprocessor(require('./preprocessor/backwardCompat'));
	    // Default action
	    echarts.registerAction({
	        type: 'highlight',
	        event: 'highlight',
	        update: 'highlight'
	    }, zrUtil.noop);
	    echarts.registerAction({
	        type: 'downplay',
	        event: 'downplay',
	        update: 'downplay'
	    }, zrUtil.noop);
	    // --------
	    // Exports
	    // --------
	    //
	    echarts.List = require('./data/List');
	    echarts.Model = require('./model/Model');
	    echarts.graphic = require('./util/graphic');
	    echarts.number = require('./util/number');
	    echarts.format = require('./util/format');
	    echarts.matrix = require('zrender/core/matrix');
	    echarts.vector = require('zrender/core/vector');
	    echarts.color = require('zrender/tool/color');
	    echarts.util = {};
	    each([
	        'map',
	        'each',
	        'filter',
	        'indexOf',
	        'inherits',
	        'reduce',
	        'filter',
	        'bind',
	        'curry',
	        'isArray',
	        'isString',
	        'isObject',
	        'isFunction',
	        'extend',
	        'defaults'
	    ], function (name) {
	        echarts.util[name] = zrUtil[name];
	    });
	    // PRIORITY
	    echarts.PRIORITY = {
	        PROCESSOR: {
	            FILTER: PRIORITY_PROCESSOR_FILTER,
	            STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	        },
	        VISUAL: {
	            LAYOUT: PRIORITY_VISUAL_LAYOUT,
	            GLOBAL: PRIORITY_VISUAL_GLOBAL,
	            CHART: PRIORITY_VISUAL_CHART,
	            COMPONENT: PRIORITY_VISUAL_COMPONENT,
	            BRUSH: PRIORITY_VISUAL_BRUSH
	        }
	    };
	    return echarts;
	});
	define('echarts/component/grid', ['require', '../util/graphic', 'zrender/core/util', '../coord/cartesian/Grid', './axis', '../echarts'], function (require) {
	    'use strict';
	    var graphic = require('../util/graphic');
	    var zrUtil = require('zrender/core/util');
	    require('../coord/cartesian/Grid');
	    require('./axis');
	    // Grid view
	    require('../echarts').extendComponentView({
	        type: 'grid',
	        render: function (gridModel, ecModel) {
	            this.group.removeAll();
	            if (gridModel.get('show')) {
	                this.group.add(new graphic.Rect({
	                    shape: gridModel.coordinateSystem.getRect(),
	                    style: zrUtil.defaults({ fill: gridModel.get('backgroundColor') }, gridModel.getItemStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });
	});
	define('echarts/component/legend', ['require', './legend/LegendModel', './legend/legendAction', './legend/LegendView', '../echarts', './legend/legendFilter'], function (require) {
	    require('./legend/LegendModel');
	    require('./legend/legendAction');
	    require('./legend/LegendView');
	    var echarts = require('../echarts');
	    // Series Filter
	    echarts.registerProcessor(require('./legend/legendFilter'));
	});
	define('echarts/component/tooltip', ['require', './tooltip/TooltipModel', './tooltip/TooltipView', '../echarts'], function (require) {
	    require('./tooltip/TooltipModel');
	    require('./tooltip/TooltipView');
	    // Show tip action
	    /**
	     * @action
	     * @property {string} type
	     * @property {number} seriesIndex
	     * @property {number} dataIndex
	     * @property {number} [x]
	     * @property {number} [y]
	     */
	    require('../echarts').registerAction({
	        type: 'showTip',
	        event: 'showTip',
	        update: 'none'
	    }, function () {
	    });
	    // Hide tip action
	    require('../echarts').registerAction({
	        type: 'hideTip',
	        event: 'hideTip',
	        update: 'none'
	    }, function () {
	    });
	});
	define('echarts/component/toolbox', ['require', './toolbox/ToolboxModel', './toolbox/ToolboxView', './toolbox/feature/SaveAsImage', './toolbox/feature/MagicType', './toolbox/feature/DataView', './toolbox/feature/DataZoom', './toolbox/feature/Restore'], function (require) {
	    require('./toolbox/ToolboxModel');
	    require('./toolbox/ToolboxView');
	    require('./toolbox/feature/SaveAsImage');
	    require('./toolbox/feature/MagicType');
	    require('./toolbox/feature/DataView');
	    require('./toolbox/feature/DataZoom');
	    require('./toolbox/feature/Restore');
	});
	define('echarts/component/markLine', ['require', './marker/MarkLineModel', './marker/MarkLineView', '../echarts'], function (require) {
	    require('./marker/MarkLineModel');
	    require('./marker/MarkLineView');
	    require('../echarts').registerPreprocessor(function (opt) {
	        // Make sure markLine component is enabled
	        opt.markLine = opt.markLine || {};
	    });
	});
	define('echarts/scale/Time', ['require', 'zrender/core/util', '../util/number', '../util/format', './Interval'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('../util/number');
	    var formatUtil = require('../util/format');
	    var IntervalScale = require('./Interval');
	    var intervalScaleProto = IntervalScale.prototype;
	    var mathCeil = Math.ceil;
	    var mathFloor = Math.floor;
	    var ONE_SECOND = 1000;
	    var ONE_MINUTE = ONE_SECOND * 60;
	    var ONE_HOUR = ONE_MINUTE * 60;
	    var ONE_DAY = ONE_HOUR * 24;
	    // FIXME 公用？
	    var bisect = function (a, x, lo, hi) {
	        while (lo < hi) {
	            var mid = lo + hi >>> 1;
	            if (a[mid][2] < x) {
	                lo = mid + 1;
	            } else {
	                hi = mid;
	            }
	        }
	        return lo;
	    };
	    /**
	     * @alias module:echarts/coord/scale/Time
	     * @constructor
	     */
	    var TimeScale = IntervalScale.extend({
	            type: 'time',
	            getLabel: function (val) {
	                var stepLvl = this._stepLvl;
	                var date = new Date(val);
	                return formatUtil.formatTime(stepLvl[0], date);
	            },
	            niceExtent: function (approxTickNum, fixMin, fixMax) {
	                var extent = this._extent;
	                // If extent start and end are same, expand them
	                if (extent[0] === extent[1]) {
	                    // Expand extent
	                    extent[0] -= ONE_DAY;
	                    extent[1] += ONE_DAY;
	                }
	                // If there are no data and extent are [Infinity, -Infinity]
	                if (extent[1] === -Infinity && extent[0] === Infinity) {
	                    var d = new Date();
	                    extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	                    extent[0] = extent[1] - ONE_DAY;
	                }
	                this.niceTicks(approxTickNum);
	                // var extent = this._extent;
	                var interval = this._interval;
	                if (!fixMin) {
	                    extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	                }
	                if (!fixMax) {
	                    extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	                }
	            },
	            niceTicks: function (approxTickNum) {
	                approxTickNum = approxTickNum || 10;
	                var extent = this._extent;
	                var span = extent[1] - extent[0];
	                var approxInterval = span / approxTickNum;
	                var scaleLevelsLen = scaleLevels.length;
	                var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	                var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	                var interval = level[2];
	                // Same with interval scale if span is much larger than 1 year
	                if (level[0] === 'year') {
	                    var yearSpan = span / interval;
	                    // From "Nice Numbers for Graph Labels" of Graphic Gems
	                    // var niceYearSpan = numberUtil.nice(yearSpan, false);
	                    var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	                    interval *= yearStep;
	                }
	                var niceExtent = [
	                        mathCeil(extent[0] / interval) * interval,
	                        mathFloor(extent[1] / interval) * interval
	                    ];
	                this._stepLvl = level;
	                // Interval will be used in getTicks
	                this._interval = interval;
	                this._niceExtent = niceExtent;
	            },
	            parse: function (val) {
	                // val might be float.
	                return +numberUtil.parseDate(val);
	            }
	        });
	    zrUtil.each([
	        'contain',
	        'normalize'
	    ], function (methodName) {
	        TimeScale.prototype[methodName] = function (val) {
	            return intervalScaleProto[methodName].call(this, this.parse(val));
	        };
	    });
	    // Steps from d3
	    var scaleLevels = [
	            [
	                'hh:mm:ss',
	                1,
	                ONE_SECOND
	            ],
	            [
	                'hh:mm:ss',
	                5,
	                ONE_SECOND * 5
	            ],
	            [
	                'hh:mm:ss',
	                10,
	                ONE_SECOND * 10
	            ],
	            [
	                'hh:mm:ss',
	                15,
	                ONE_SECOND * 15
	            ],
	            [
	                'hh:mm:ss',
	                30,
	                ONE_SECOND * 30
	            ],
	            [
	                'hh:mm\nMM-dd',
	                1,
	                ONE_MINUTE
	            ],
	            [
	                'hh:mm\nMM-dd',
	                5,
	                ONE_MINUTE * 5
	            ],
	            [
	                'hh:mm\nMM-dd',
	                10,
	                ONE_MINUTE * 10
	            ],
	            [
	                'hh:mm\nMM-dd',
	                15,
	                ONE_MINUTE * 15
	            ],
	            [
	                'hh:mm\nMM-dd',
	                30,
	                ONE_MINUTE * 30
	            ],
	            [
	                'hh:mm\nMM-dd',
	                1,
	                ONE_HOUR
	            ],
	            [
	                'hh:mm\nMM-dd',
	                2,
	                ONE_HOUR * 2
	            ],
	            [
	                'hh:mm\nMM-dd',
	                6,
	                ONE_HOUR * 6
	            ],
	            [
	                'hh:mm\nMM-dd',
	                12,
	                ONE_HOUR * 12
	            ],
	            [
	                'MM-dd\nyyyy',
	                1,
	                ONE_DAY
	            ],
	            [
	                'week',
	                7,
	                ONE_DAY * 7
	            ],
	            [
	                'month',
	                1,
	                ONE_DAY * 31
	            ],
	            [
	                'quarter',
	                3,
	                ONE_DAY * 380 / 4
	            ],
	            [
	                'half-year',
	                6,
	                ONE_DAY * 380 / 2
	            ],
	            [
	                'year',
	                1,
	                ONE_DAY * 380
	            ]
	        ];
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    TimeScale.create = function () {
	        return new TimeScale();
	    };
	    return TimeScale;
	});
	define('zrender/vml/vml', ['require', './graphic', '../zrender', './Painter'], function (require) {
	    require('./graphic');
	    require('../zrender').registerPainter('vml', require('./Painter'));
	});
	define('echarts/scale/Log', ['require', 'zrender/core/util', './Scale', '../util/number', './Interval'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var Scale = require('./Scale');
	    var numberUtil = require('../util/number');
	    // Use some method of IntervalScale
	    var IntervalScale = require('./Interval');
	    var scaleProto = Scale.prototype;
	    var intervalScaleProto = IntervalScale.prototype;
	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    var mathPow = Math.pow;
	    var LOG_BASE = 10;
	    var mathLog = Math.log;
	    var LogScale = Scale.extend({
	            type: 'log',
	            getTicks: function () {
	                return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	                    return numberUtil.round(mathPow(LOG_BASE, val));
	                });
	            },
	            getLabel: intervalScaleProto.getLabel,
	            scale: function (val) {
	                val = scaleProto.scale.call(this, val);
	                return mathPow(LOG_BASE, val);
	            },
	            setExtent: function (start, end) {
	                start = mathLog(start) / mathLog(LOG_BASE);
	                end = mathLog(end) / mathLog(LOG_BASE);
	                intervalScaleProto.setExtent.call(this, start, end);
	            },
	            getExtent: function () {
	                var extent = scaleProto.getExtent.call(this);
	                extent[0] = mathPow(LOG_BASE, extent[0]);
	                extent[1] = mathPow(LOG_BASE, extent[1]);
	                return extent;
	            },
	            unionExtent: function (extent) {
	                extent[0] = mathLog(extent[0]) / mathLog(LOG_BASE);
	                extent[1] = mathLog(extent[1]) / mathLog(LOG_BASE);
	                scaleProto.unionExtent.call(this, extent);
	            },
	            niceTicks: function (approxTickNum) {
	                approxTickNum = approxTickNum || 10;
	                var extent = this._extent;
	                var span = extent[1] - extent[0];
	                if (span === Infinity || span <= 0) {
	                    return;
	                }
	                var interval = mathPow(10, mathFloor(mathLog(span / approxTickNum) / Math.LN10));
	                var err = approxTickNum / span * interval;
	                // Filter ticks to get closer to the desired count.
	                if (err <= 0.5) {
	                    interval *= 10;
	                }
	                var niceExtent = [
	                        numberUtil.round(mathCeil(extent[0] / interval) * interval),
	                        numberUtil.round(mathFloor(extent[1] / interval) * interval)
	                    ];
	                this._interval = interval;
	                this._niceExtent = niceExtent;
	            },
	            niceExtent: intervalScaleProto.niceExtent
	        });
	    zrUtil.each([
	        'contain',
	        'normalize'
	    ], function (methodName) {
	        LogScale.prototype[methodName] = function (val) {
	            val = mathLog(val) / mathLog(LOG_BASE);
	            return scaleProto[methodName].call(this, val);
	        };
	    });
	    LogScale.create = function () {
	        return new LogScale();
	    };
	    return LogScale;
	});
	define('zrender/core/util', ['require'], function (require) {
	    // 用于处理merge时无法遍历Date等对象的问题
	    var BUILTIN_OBJECT = {
	            '[object Function]': 1,
	            '[object RegExp]': 1,
	            '[object Date]': 1,
	            '[object Error]': 1,
	            '[object CanvasGradient]': 1,
	            '[object CanvasPattern]': 1,
	            '[object Image]': 1
	        };
	    var objToString = Object.prototype.toString;
	    var arrayProto = Array.prototype;
	    var nativeForEach = arrayProto.forEach;
	    var nativeFilter = arrayProto.filter;
	    var nativeSlice = arrayProto.slice;
	    var nativeMap = arrayProto.map;
	    var nativeReduce = arrayProto.reduce;
	    /**
	     * @param {*} source
	     * @return {*} 拷贝后的新对象
	     */
	    function clone(source) {
	        if (typeof source == 'object' && source !== null) {
	            var result = source;
	            if (source instanceof Array) {
	                result = [];
	                for (var i = 0, len = source.length; i < len; i++) {
	                    result[i] = clone(source[i]);
	                }
	            } else if (!isBuildInObject(source) && !isDom(source)) {
	                result = {};
	                for (var key in source) {
	                    if (source.hasOwnProperty(key)) {
	                        result[key] = clone(source[key]);
	                    }
	                }
	            }
	            return result;
	        }
	        return source;
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} target
	     * @param {*} source
	     * @param {boolean} [overwrite=false]
	     */
	    function merge(target, source, overwrite) {
	        // We should escapse that source is string
	        // and enter for ... in ...
	        if (!isObject(source) || !isObject(target)) {
	            return overwrite ? clone(source) : target;
	        }
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                var sourceProp = source[key];
	                if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuildInObject(sourceProp) && !isBuildInObject(targetProp)) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(targetProp, sourceProp, overwrite);
	                } else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                    target[key] = clone(source[key], true);
	                }
	            }
	        }
	        return target;
	    }
	    /**
	     * @param {Array} targetAndSources The first item is target, and the rests are source.
	     * @param {boolean} [overwrite=false]
	     * @return {*} target
	     */
	    function mergeAll(targetAndSources, overwrite) {
	        var result = targetAndSources[0];
	        for (var i = 1, len = targetAndSources.length; i < len; i++) {
	            result = merge(result, targetAndSources[i], overwrite);
	        }
	        return result;
	    }
	    /**
	     * @param {*} target
	     * @param {*} source
	     * @memberOf module:zrender/core/util
	     */
	    function extend(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }
	    /**
	     * @param {*} target
	     * @param {*} source
	     * @param {boolen} [overlay=false]
	     * @memberOf module:zrender/core/util
	     */
	    function defaults(target, source, overlay) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }
	    function createCanvas() {
	        return document.createElement('canvas');
	    }
	    // FIXME
	    var _ctx;
	    function getContext() {
	        if (!_ctx) {
	            // Use util.createCanvas instead of createCanvas
	            // because createCanvas may be overwritten in different environment
	            _ctx = util.createCanvas().getContext('2d');
	        }
	        return _ctx;
	    }
	    /**
	     * 查询数组中元素的index
	     * @memberOf module:zrender/core/util
	     */
	    function indexOf(array, value) {
	        if (array) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }
	    /**
	     * 构造类继承关系
	     *
	     * @memberOf module:zrender/core/util
	     * @param {Function} clazz 源类
	     * @param {Function} baseClazz 基类
	     */
	    function inherits(clazz, baseClazz) {
	        var clazzPrototype = clazz.prototype;
	        function F() {
	        }
	        F.prototype = baseClazz.prototype;
	        clazz.prototype = new F();
	        for (var prop in clazzPrototype) {
	            clazz.prototype[prop] = clazzPrototype[prop];
	        }
	        clazz.prototype.constructor = clazz;
	        clazz.superClass = baseClazz;
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Object|Function} target
	     * @param {Object|Function} sorce
	     * @param {boolean} overlay
	     */
	    function mixin(target, source, overlay) {
	        target = 'prototype' in target ? target.prototype : target;
	        source = 'prototype' in source ? source.prototype : source;
	        defaults(target, source, overlay);
	    }
	    /**
	     * @param {Array|TypedArray} data
	     */
	    function isArrayLike(data) {
	        if (!data) {
	            return;
	        }
	        if (typeof data == 'string') {
	            return false;
	        }
	        return typeof data.length == 'number';
	    }
	    /**
	     * 数组或对象遍历
	     * @memberOf module:zrender/core/util
	     * @param {Object|Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     */
	    function each(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.forEach && obj.forEach === nativeForEach) {
	            obj.forEach(cb, context);
	        } else if (obj.length === +obj.length) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                cb.call(context, obj[i], i, obj);
	            }
	        } else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    cb.call(context, obj[key], key, obj);
	                }
	            }
	        }
	    }
	    /**
	     * 数组映射
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function map(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.map && obj.map === nativeMap) {
	            return obj.map(cb, context);
	        } else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                result.push(cb.call(context, obj[i], i, obj));
	            }
	            return result;
	        }
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {Object} [memo]
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function reduce(obj, cb, memo, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.reduce && obj.reduce === nativeReduce) {
	            return obj.reduce(cb, memo, context);
	        } else {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                memo = cb.call(context, memo, obj[i], i, obj);
	            }
	            return memo;
	        }
	    }
	    /**
	     * 数组过滤
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function filter(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.filter && obj.filter === nativeFilter) {
	            return obj.filter(cb, context);
	        } else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (cb.call(context, obj[i], i, obj)) {
	                    result.push(obj[i]);
	                }
	            }
	            return result;
	        }
	    }
	    /**
	     * 数组项查找
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function find(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                return obj[i];
	            }
	        }
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @param {*} context
	     * @return {Function}
	     */
	    function bind(func, context) {
	        var args = nativeSlice.call(arguments, 2);
	        return function () {
	            return func.apply(context, args.concat(nativeSlice.call(arguments)));
	        };
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @return {Function}
	     */
	    function curry(func) {
	        var args = nativeSlice.call(arguments, 1);
	        return function () {
	            return func.apply(this, args.concat(nativeSlice.call(arguments)));
	        };
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isArray(value) {
	        return objToString.call(value) === '[object Array]';
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isFunction(value) {
	        return typeof value === 'function';
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isString(value) {
	        return objToString.call(value) === '[object String]';
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isObject(value) {
	        // Avoid a V8 JIT bug in Chrome 19-20.
	        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	        var type = typeof value;
	        return type === 'function' || !!value && type == 'object';
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isBuildInObject(value) {
	        return !!BUILTIN_OBJECT[objToString.call(value)];
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isDom(value) {
	        return value && value.nodeType === 1 && typeof value.nodeName == 'string';
	    }
	    /**
	     * If value1 is not null, then return value1, otherwise judget rest of values.
	     * @memberOf module:zrender/core/util
	     * @return {*} Final value
	     */
	    function retrieve(values) {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} arr
	     * @param {number} startIndex
	     * @param {number} endIndex
	     * @return {Array}
	     */
	    function slice() {
	        return Function.call.apply(nativeSlice, arguments);
	    }
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {boolean} condition
	     * @param {string} message
	     */
	    function assert(condition, message) {
	        if (!condition) {
	            throw new Error(message);
	        }
	    }
	    var util = {
	            inherits: inherits,
	            mixin: mixin,
	            clone: clone,
	            merge: merge,
	            mergeAll: mergeAll,
	            extend: extend,
	            defaults: defaults,
	            getContext: getContext,
	            createCanvas: createCanvas,
	            indexOf: indexOf,
	            slice: slice,
	            find: find,
	            isArrayLike: isArrayLike,
	            each: each,
	            map: map,
	            reduce: reduce,
	            filter: filter,
	            bind: bind,
	            curry: curry,
	            isArray: isArray,
	            isString: isString,
	            isObject: isObject,
	            isFunction: isFunction,
	            isBuildInObject: isBuildInObject,
	            isDom: isDom,
	            retrieve: retrieve,
	            assert: assert,
	            noop: function () {
	            }
	        };
	    return util;
	});
	define('echarts/chart/line/LineSeries', ['require', '../helper/createListFromArray', '../../model/Series'], function (require) {
	    'use strict';
	    var createListFromArray = require('../helper/createListFromArray');
	    var SeriesModel = require('../../model/Series');
	    return SeriesModel.extend({
	        type: 'series.line',
	        dependencies: [
	            'grid',
	            'polar'
	        ],
	        getInitialData: function (option, ecModel) {
	            if (true) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {
	                    throw new Error('Line not support coordinateSystem besides cartesian and polar');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	            hoverAnimation: true,
	            xAxisIndex: 0,
	            yAxisIndex: 0,
	            polarIndex: 0,
	            clipOverflow: true,
	            label: { normal: { position: 'top' } },
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            step: false,
	            smooth: false,
	            smoothMonotone: null,
	            symbol: 'emptyCircle',
	            symbolSize: 4,
	            symbolRotate: null,
	            showSymbol: true,
	            showAllSymbol: false,
	            connectNulls: false,
	            sampling: 'none',
	            animationEasing: 'linear',
	            progressive: 0,
	            hoverLayerThreshold: Infinity
	        }
	    });
	});
	define('echarts/chart/line/LineView', ['require', 'zrender/core/util', '../helper/SymbolDraw', '../helper/Symbol', './lineAnimationDiff', '../../util/graphic', './poly', '../../view/Chart'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var SymbolDraw = require('../helper/SymbolDraw');
	    var Symbol = require('../helper/Symbol');
	    var lineAnimationDiff = require('./lineAnimationDiff');
	    var graphic = require('../../util/graphic');
	    var polyHelper = require('./poly');
	    var ChartView = require('../../view/Chart');
	    function isPointsSame(points1, points2) {
	        if (points1.length !== points2.length) {
	            return;
	        }
	        for (var i = 0; i < points1.length; i++) {
	            var p1 = points1[i];
	            var p2 = points2[i];
	            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	                return;
	            }
	        }
	        return true;
	    }
	    function getSmooth(smooth) {
	        return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;
	    }
	    function getAxisExtentWithGap(axis) {
	        var extent = axis.getGlobalExtent();
	        if (axis.onBand) {
	            // Remove extra 1px to avoid line miter in clipped edge
	            var halfBandWidth = axis.getBandWidth() / 2 - 1;
	            var dir = extent[1] > extent[0] ? 1 : -1;
	            extent[0] += dir * halfBandWidth;
	            extent[1] -= dir * halfBandWidth;
	        }
	        return extent;
	    }
	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	    /**
	     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	     * @param {module:echarts/data/List} data
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    function getStackedOnPoints(coordSys, data) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];
	        var valueDim = valueAxis.dim;
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	        return data.mapArray([valueDim], function (val, idx) {
	            var stackedOnSameSign;
	            var stackedOn = data.stackedOn;
	            // Find first stacked value with same sign
	            while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	                stackedOnSameSign = stackedOn;
	                break;
	            }
	            var stackedData = [];
	            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	            stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	            return coordSys.dataToPoint(stackedData);
	        }, true);
	    }
	    function queryDataIndex(data, payload) {
	        if (payload.dataIndex != null) {
	            return payload.dataIndex;
	        } else if (payload.name != null) {
	            return data.indexOfName(payload.name);
	        }
	    }
	    function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	        var isHorizontal = cartesian.getBaseAxis().isHorizontal();
	        var x = Math.min(xExtent[0], xExtent[1]);
	        var y = Math.min(yExtent[0], yExtent[1]);
	        var width = Math.max(xExtent[0], xExtent[1]) - x;
	        var height = Math.max(yExtent[0], yExtent[1]) - y;
	        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;
	        // Expand clip shape to avoid clipping when line value exceeds axis
	        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);
	        if (isHorizontal) {
	            y -= expandSize;
	            height += expandSize * 2;
	        } else {
	            x -= expandSize;
	            width += expandSize * 2;
	        }
	        var clipPath = new graphic.Rect({
	                shape: {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                }
	            });
	        if (hasAnimation) {
	            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	            graphic.initProps(clipPath, {
	                shape: {
	                    width: width,
	                    height: height
	                }
	            }, seriesModel);
	        }
	        return clipPath;
	    }
	    function createPolarClipShape(polar, hasAnimation, seriesModel) {
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();
	        var radiusExtent = radiusAxis.getExtent();
	        var angleExtent = angleAxis.getExtent();
	        var RADIAN = Math.PI / 180;
	        var clipPath = new graphic.Sector({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r0: radiusExtent[0],
	                    r: radiusExtent[1],
	                    startAngle: -angleExtent[0] * RADIAN,
	                    endAngle: -angleExtent[1] * RADIAN,
	                    clockwise: angleAxis.inverse
	                }
	            });
	        if (hasAnimation) {
	            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	            graphic.initProps(clipPath, { shape: { endAngle: -angleExtent[1] * RADIAN } }, seriesModel);
	        }
	        return clipPath;
	    }
	    function createClipShape(coordSys, hasAnimation, seriesModel) {
	        return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);
	    }
	    function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	        var baseAxis = coordSys.getBaseAxis();
	        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;
	        var stepPoints = [];
	        for (var i = 0; i < points.length - 1; i++) {
	            var nextPt = points[i + 1];
	            var pt = points[i];
	            stepPoints.push(pt);
	            var stepPt = [];
	            switch (stepTurnAt) {
	            case 'end':
	                stepPt[baseIndex] = nextPt[baseIndex];
	                stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                // default is start
	                stepPoints.push(stepPt);
	                break;
	            case 'middle':
	                // default is start
	                var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	                var stepPt2 = [];
	                stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	                stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	                stepPoints.push(stepPt);
	                stepPoints.push(stepPt2);
	                break;
	            default:
	                stepPt[baseIndex] = pt[baseIndex];
	                stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
	                // default is start
	                stepPoints.push(stepPt);
	            }
	        }
	        // Last points
	        points[i] && stepPoints.push(points[i]);
	        return stepPoints;
	    }
	    function clamp(number, extent) {
	        return Math.max(Math.min(number, extent[1]), extent[0]);
	    }
	    function getVisualGradient(data, coordSys) {
	        var visualMetaList = data.getVisual('visualMeta');
	        if (!visualMetaList || !visualMetaList.length) {
	            return;
	        }
	        var visualMeta;
	        for (var i = visualMetaList.length - 1; i >= 0; i--) {
	            // Can only be x or y
	            if (visualMetaList[i].dimension < 2) {
	                visualMeta = visualMetaList[i];
	                break;
	            }
	        }
	        if (!visualMeta || coordSys.type !== 'cartesian2d') {
	            if (true) {
	                console.warn('Visual map on line style only support x or y dimension.');
	            }
	            return;
	        }
	        var dimension = visualMeta.dimension;
	        var dimName = data.dimensions[dimension];
	        var dataExtent = data.getDataExtent(dimName);
	        var stops = visualMeta.stops;
	        var colorStops = [];
	        if (stops[0].interval) {
	            stops.sort(function (a, b) {
	                return a.interval[0] - b.interval[0];
	            });
	        }
	        var firstStop = stops[0];
	        var lastStop = stops[stops.length - 1];
	        // Interval can be infinity in piecewise case
	        var min = firstStop.interval ? clamp(firstStop.interval[0], dataExtent) : firstStop.value;
	        var max = lastStop.interval ? clamp(lastStop.interval[1], dataExtent) : lastStop.value;
	        var stopsSpan = max - min;
	        // In the piecewise case data out of visual range
	        // ----dataMin----dataMax-----visualMin----visualMax
	        if (stopsSpan === 0) {
	            return data.getItemVisual(0, 'color');
	        }
	        for (var i = 0; i < stops.length; i++) {
	            // Piecewise
	            if (stops[i].interval) {
	                if (stops[i].interval[1] === stops[i].interval[0]) {
	                    continue;
	                }
	                colorStops.push({
	                    offset: (clamp(stops[i].interval[0], dataExtent) - min) / stopsSpan,
	                    color: stops[i].color
	                }, {
	                    offset: (clamp(stops[i].interval[1], dataExtent) - min) / stopsSpan,
	                    color: stops[i].color
	                });
	            }    // Continous
	            else {
	                // if (i > 0 && stops[i].value === stops[i - 1].value) {
	                //     continue;
	                // }
	                colorStops.push({
	                    offset: (stops[i].value - min) / stopsSpan,
	                    color: stops[i].color
	                });
	            }
	        }
	        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	        var axis = coordSys.getAxis(dimName);
	        var start = Math.round(axis.toGlobalCoord(axis.dataToCoord(min)));
	        var end = Math.round(axis.toGlobalCoord(axis.dataToCoord(max)));
	        // zrUtil.each(colorStops, function (colorStop) {
	        //     // Make sure each offset has rounded px to avoid not sharp edge
	        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	        // });
	        gradient[dimName] = start;
	        gradient[dimName + '2'] = end;
	        return gradient;
	    }
	    return ChartView.extend({
	        type: 'line',
	        init: function () {
	            var lineGroup = new graphic.Group();
	            var symbolDraw = new SymbolDraw();
	            this.group.add(symbolDraw.group);
	            this._symbolDraw = symbolDraw;
	            this._lineGroup = lineGroup;
	        },
	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var group = this.group;
	            var data = seriesModel.getData();
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var areaStyleModel = seriesModel.getModel('areaStyle.normal');
	            var points = data.mapArray(data.getItemLayout, true);
	            var isCoordSysPolar = coordSys.type === 'polar';
	            var prevCoordSys = this._coordSys;
	            var symbolDraw = this._symbolDraw;
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	            var lineGroup = this._lineGroup;
	            var hasAnimation = seriesModel.get('animation');
	            var isAreaChart = !areaStyleModel.isEmpty();
	            var stackedOnPoints = getStackedOnPoints(coordSys, data);
	            var showSymbol = seriesModel.get('showSymbol');
	            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys);
	            // Remove temporary symbols
	            var oldData = this._data;
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });
	            // Remove previous created symbols if showSymbol changed to false
	            if (!showSymbol) {
	                symbolDraw.remove();
	            }
	            group.add(lineGroup);
	            // FIXME step not support polar
	            var step = !isCoordSysPolar && seriesModel.get('step');
	            // Initialization animation or coordinate system changed
	            if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	                if (step) {
	                    // TODO If stacked series is not step
	                    points = turnPointsIntoStep(points, coordSys, step);
	                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                }
	                polyline = this._newPolyline(points, coordSys, hasAnimation);
	                if (isAreaChart) {
	                    polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	                }
	                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	            } else {
	                if (isAreaChart && !polygon) {
	                    // If areaStyle is added
	                    polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	                } else if (polygon && !isAreaChart) {
	                    // If areaStyle is removed
	                    lineGroup.remove(polygon);
	                    polygon = this._polygon = null;
	                }
	                // Update clipPath
	                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));
	                // Always update, or it is wrong in the case turning on legend
	                // because points are not changed
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	                // Stop symbol animation and sync with line points
	                // FIXME performance?
	                data.eachItemGraphicEl(function (el) {
	                    el.stopAnimation(true);
	                });
	                // In the case data zoom triggerred refreshing frequently
	                // Data may not change if line has a category axis. So it should animate nothing
	                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {
	                    if (hasAnimation) {
	                        this._updateAnimation(data, stackedOnPoints, coordSys, api, step);
	                    } else {
	                        polyline.setShape({ points: points });
	                        polygon && polygon.setShape({
	                            points: points,
	                            stackedOnPoints: stackedOnPoints
	                        });
	                    }
	                }
	            }
	            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');
	            polyline.useStyle(zrUtil.defaults(lineStyleModel.getLineStyle(), {
	                fill: 'none',
	                stroke: visualColor,
	                lineJoin: 'bevel'
	            }));
	            var smooth = seriesModel.get('smooth');
	            smooth = getSmooth(seriesModel.get('smooth'));
	            polyline.setShape({
	                smooth: smooth,
	                smoothMonotone: seriesModel.get('smoothMonotone'),
	                connectNulls: seriesModel.get('connectNulls')
	            });
	            if (polygon) {
	                var stackedOn = data.stackedOn;
	                var stackedOnSmooth = 0;
	                polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	                    fill: visualColor,
	                    opacity: 0.7,
	                    lineJoin: 'bevel'
	                }));
	                if (stackedOn) {
	                    var stackedOnSeries = stackedOn.hostModel;
	                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	                }
	                polygon.setShape({
	                    smooth: smooth,
	                    stackedOnSmooth: stackedOnSmooth,
	                    smoothMonotone: seriesModel.get('smoothMonotone'),
	                    connectNulls: seriesModel.get('connectNulls')
	                });
	            }
	            this._data = data;
	            // Save the coordinate system for transition animation when data changed
	            this._coordSys = coordSys;
	            this._stackedOnPoints = stackedOnPoints;
	            this._points = points;
	            this._step = step;
	        },
	        highlight: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = queryDataIndex(data, payload);
	            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (!symbol) {
	                    // Create a temporary symbol if it is not exists
	                    var pt = data.getItemLayout(dataIndex);
	                    symbol = new Symbol(data, dataIndex);
	                    symbol.position = pt;
	                    symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));
	                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                    symbol.__temp = true;
	                    data.setItemGraphicEl(dataIndex, symbol);
	                    // Stop scale animation
	                    symbol.stopSymbolAnimation(true);
	                    this.group.add(symbol);
	                }
	                symbol.highlight();
	            } else {
	                // Highlight whole series
	                ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
	            }
	        },
	        downplay: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = queryDataIndex(data, payload);
	            if (dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (symbol) {
	                    if (symbol.__temp) {
	                        data.setItemGraphicEl(dataIndex, null);
	                        this.group.remove(symbol);
	                    } else {
	                        symbol.downplay();
	                    }
	                }
	            } else {
	                // Downplay whole series
	                ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
	            }
	        },
	        _newPolyline: function (points) {
	            var polyline = this._polyline;
	            // Remove previous created polyline
	            if (polyline) {
	                this._lineGroup.remove(polyline);
	            }
	            polyline = new polyHelper.Polyline({
	                shape: { points: points },
	                silent: true,
	                z2: 10
	            });
	            this._lineGroup.add(polyline);
	            this._polyline = polyline;
	            return polyline;
	        },
	        _newPolygon: function (points, stackedOnPoints) {
	            var polygon = this._polygon;
	            // Remove previous created polygon
	            if (polygon) {
	                this._lineGroup.remove(polygon);
	            }
	            polygon = new polyHelper.Polygon({
	                shape: {
	                    points: points,
	                    stackedOnPoints: stackedOnPoints
	                },
	                silent: true
	            });
	            this._lineGroup.add(polygon);
	            this._polygon = polygon;
	            return polygon;
	        },
	        _getSymbolIgnoreFunc: function (data, coordSys) {
	            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	            // `getLabelInterval` is provided by echarts/component/axis
	            if (categoryAxis && categoryAxis.isLabelIgnored) {
	                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	            }
	        },
	        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	            var seriesModel = data.hostModel;
	            var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);
	            var current = diff.current;
	            var stackedOnCurrent = diff.stackedOnCurrent;
	            var next = diff.next;
	            var stackedOnNext = diff.stackedOnNext;
	            if (step) {
	                // TODO If stacked series is not step
	                current = turnPointsIntoStep(diff.current, coordSys, step);
	                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	                next = turnPointsIntoStep(diff.next, coordSys, step);
	                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	            }
	            polyline.shape.__points = diff.current;
	            polyline.shape.points = current;
	            graphic.updateProps(polyline, { shape: { points: next } }, seriesModel);
	            if (polygon) {
	                polygon.setShape({
	                    points: current,
	                    stackedOnPoints: stackedOnCurrent
	                });
	                graphic.updateProps(polygon, {
	                    shape: {
	                        points: next,
	                        stackedOnPoints: stackedOnNext,
	                        __points: diff.next
	                    }
	                }, seriesModel);
	            }
	            var updatedDataInfo = [];
	            var diffStatus = diff.status;
	            for (var i = 0; i < diffStatus.length; i++) {
	                var cmd = diffStatus[i].cmd;
	                if (cmd === '=') {
	                    var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                    if (el) {
	                        updatedDataInfo.push({
	                            el: el,
	                            ptIdx: i
	                        });
	                    }
	                }
	            }
	            if (polyline.animators && polyline.animators.length) {
	                polyline.animators[0].during(function () {
	                    for (var i = 0; i < updatedDataInfo.length; i++) {
	                        var el = updatedDataInfo[i].el;
	                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	                    }
	                });
	            }
	        },
	        remove: function (ecModel) {
	            var group = this.group;
	            var oldData = this._data;
	            this._lineGroup.removeAll();
	            this._symbolDraw.remove(true);
	            // Remove temporary created elements when highlighting
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });
	            this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
	        }
	    });
	});
	define('echarts/layout/points', ['require'], function (require) {
	    return function (seriesType, ecModel) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys) {
	                var dims = coordSys.dimensions;
	                if (coordSys.type === 'singleAxis') {
	                    data.each(dims[0], function (x, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, isNaN(x) ? [
	                            NaN,
	                            NaN
	                        ] : coordSys.dataToPoint(x));
	                    });
	                } else {
	                    data.each(dims, function (x, y, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, isNaN(x) || isNaN(y) ? [
	                            NaN,
	                            NaN
	                        ] : coordSys.dataToPoint([
	                            x,
	                            y
	                        ]));
	                    }, true);
	                }
	            }
	        });
	    };
	});
	define('echarts/visual/symbol', ['require'], function (require) {
	    return function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {
	        // Encoding visual for all series include which is filtered for legend drawing
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	            var symbolSize = seriesModel.get('symbolSize');
	            data.setVisual({
	                legendSymbol: legendSymbol || symbolType,
	                symbol: symbolType,
	                symbolSize: symbolSize
	            });
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof symbolSize === 'function') {
	                    data.each(function (idx) {
	                        var rawValue = seriesModel.getRawValue(idx);
	                        // FIXME
	                        var params = seriesModel.getDataParams(idx);
	                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                    });
	                }
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var itemSymbolType = itemModel.getShallow('symbol', true);
	                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	                    // If has item symbol
	                    if (itemSymbolType != null) {
	                        data.setItemVisual(idx, 'symbol', itemSymbolType);
	                    }
	                    if (itemSymbolSize != null) {
	                        // PENDING Transform symbolSize ?
	                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                    }
	                });
	            }
	        });
	    };
	});
	define('echarts/processor/dataSample', [], function () {
	    var samplers = {
	            average: function (frame) {
	                var sum = 0;
	                var count = 0;
	                for (var i = 0; i < frame.length; i++) {
	                    if (!isNaN(frame[i])) {
	                        sum += frame[i];
	                        count++;
	                    }
	                }
	                // Return NaN if count is 0
	                return count === 0 ? NaN : sum / count;
	            },
	            sum: function (frame) {
	                var sum = 0;
	                for (var i = 0; i < frame.length; i++) {
	                    // Ignore NaN
	                    sum += frame[i] || 0;
	                }
	                return sum;
	            },
	            max: function (frame) {
	                var max = -Infinity;
	                for (var i = 0; i < frame.length; i++) {
	                    frame[i] > max && (max = frame[i]);
	                }
	                return max;
	            },
	            min: function (frame) {
	                var min = Infinity;
	                for (var i = 0; i < frame.length; i++) {
	                    frame[i] < min && (min = frame[i]);
	                }
	                return min;
	            },
	            nearest: function (frame) {
	                return frame[0];
	            }
	        };
	    var indexSampler = function (frame, value) {
	        return Math.round(frame.length / 2);
	    };
	    return function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var sampling = seriesModel.get('sampling');
	            var coordSys = seriesModel.coordinateSystem;
	            // Only cartesian2d support down sampling
	            if (coordSys.type === 'cartesian2d' && sampling) {
	                var baseAxis = coordSys.getBaseAxis();
	                var valueAxis = coordSys.getOtherAxis(baseAxis);
	                var extent = baseAxis.getExtent();
	                // Coordinste system has been resized
	                var size = extent[1] - extent[0];
	                var rate = Math.round(data.count() / size);
	                if (rate > 1) {
	                    var sampler;
	                    if (typeof sampling === 'string') {
	                        sampler = samplers[sampling];
	                    } else if (typeof sampling === 'function') {
	                        sampler = sampling;
	                    }
	                    if (sampler) {
	                        data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);
	                        seriesModel.setData(data);
	                    }
	                }
	            }
	        }, this);
	    };
	});
	define('echarts/coord/cartesian/Grid', ['require', 'exports', '../../util/layout', '../../coord/axisHelper', 'zrender/core/util', './Cartesian2D', './Axis2D', './GridModel', '../../CoordinateSystem'], function (require, factory) {
	    var layout = require('../../util/layout');
	    var axisHelper = require('../../coord/axisHelper');
	    var zrUtil = require('zrender/core/util');
	    var Cartesian2D = require('./Cartesian2D');
	    var Axis2D = require('./Axis2D');
	    var each = zrUtil.each;
	    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	    var niceScaleExtent = axisHelper.niceScaleExtent;
	    // 依赖 GridModel, AxisModel 做预处理
	    require('./GridModel');
	    /**
	     * Check if the axis is used in the specified grid
	     * @inner
	     */
	    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	        return ecModel.getComponent('grid', axisModel.get('gridIndex')) === gridModel;
	    }
	    function getLabelUnionRect(axis) {
	        var axisModel = axis.model;
	        var labels = axisModel.getFormattedLabels();
	        var rect;
	        var step = 1;
	        var labelCount = labels.length;
	        if (labelCount > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.ceil(labelCount / 40);
	        }
	        for (var i = 0; i < labelCount; i += step) {
	            if (!axis.isLabelIgnored(i)) {
	                var singleRect = axisModel.getTextRect(labels[i]);
	                // FIXME consider label rotate
	                rect ? rect.union(singleRect) : rect = singleRect;
	            }
	        }
	        return rect;
	    }
	    function Grid(gridModel, ecModel, api) {
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	         * @private
	         */
	        this._coordsMap = {};
	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	         * @private
	         */
	        this._coordsList = [];
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesMap = {};
	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesList = [];
	        this._initCartesian(gridModel, ecModel, api);
	        this._model = gridModel;
	    }
	    var gridProto = Grid.prototype;
	    gridProto.type = 'grid';
	    gridProto.getRect = function () {
	        return this._rect;
	    };
	    gridProto.update = function (ecModel, api) {
	        var axesMap = this._axesMap;
	        this._updateScale(ecModel, this._model);
	        function ifAxisCanNotOnZero(otherAxisDim) {
	            var axes = axesMap[otherAxisDim];
	            for (var idx in axes) {
	                var axis = axes[idx];
	                if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        each(axesMap.x, function (xAxis) {
	            niceScaleExtent(xAxis, xAxis.model);
	        });
	        each(axesMap.y, function (yAxis) {
	            niceScaleExtent(yAxis, yAxis.model);
	        });
	        // Fix configuration
	        each(axesMap.x, function (xAxis) {
	            // onZero can not be enabled in these two situations
	            // 1. When any other axis is a category axis
	            // 2. When any other axis not across 0 point
	            if (ifAxisCanNotOnZero('y')) {
	                xAxis.onZero = false;
	            }
	        });
	        each(axesMap.y, function (yAxis) {
	            if (ifAxisCanNotOnZero('x')) {
	                yAxis.onZero = false;
	            }
	        });
	        // Resize again if containLabel is enabled
	        // FIXME It may cause getting wrong grid size in data processing stage
	        this.resize(this._model, api);
	    };
	    /**
	     * Resize the grid
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    gridProto.resize = function (gridModel, api) {
	        var gridRect = layout.getLayoutRect(gridModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	        this._rect = gridRect;
	        var axesList = this._axesList;
	        adjustAxes();
	        // Minus label size
	        if (gridModel.get('containLabel')) {
	            each(axesList, function (axis) {
	                if (!axis.model.get('axisLabel.inside')) {
	                    var labelUnionRect = getLabelUnionRect(axis);
	                    if (labelUnionRect) {
	                        var dim = axis.isHorizontal() ? 'height' : 'width';
	                        var margin = axis.model.get('axisLabel.margin');
	                        gridRect[dim] -= labelUnionRect[dim] + margin;
	                        if (axis.position === 'top') {
	                            gridRect.y += labelUnionRect.height + margin;
	                        } else if (axis.position === 'left') {
	                            gridRect.x += labelUnionRect.width + margin;
	                        }
	                    }
	                }
	            });
	            adjustAxes();
	        }
	        function adjustAxes() {
	            each(axesList, function (axis) {
	                var isHorizontal = axis.isHorizontal();
	                var extent = isHorizontal ? [
	                        0,
	                        gridRect.width
	                    ] : [
	                        0,
	                        gridRect.height
	                    ];
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(extent[idx], extent[1 - idx]);
	                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	            });
	        }
	    };
	    /**
	     * @param {string} axisType
	     * @param {ndumber} [axisIndex]
	     */
	    gridProto.getAxis = function (axisType, axisIndex) {
	        var axesMapOnDim = this._axesMap[axisType];
	        if (axesMapOnDim != null) {
	            if (axisIndex == null) {
	                // Find first axis
	                for (var name in axesMapOnDim) {
	                    return axesMapOnDim[name];
	                }
	            }
	            return axesMapOnDim[axisIndex];
	        }
	    };
	    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	        if (xAxisIndex != null && yAxisIndex != null) {
	            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	            return this._coordsMap[key];
	        } else {
	            // When only xAxisIndex or yAxisIndex given, find its first cartesian.
	            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	                if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {
	                    return coordList[i];
	                }
	            }
	        }
	    };
	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    gridProto._initCartesian = function (gridModel, ecModel, api) {
	        var axisPositionUsed = {
	                left: false,
	                right: false,
	                top: false,
	                bottom: false
	            };
	        var axesMap = {
	                x: {},
	                y: {}
	            };
	        var axesCount = {
	                x: 0,
	                y: 0
	            };
	        /// Create axis
	        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);
	        if (!axesCount.x || !axesCount.y) {
	            // Roll back when there no either x or y axis
	            this._axesMap = {};
	            this._axesList = [];
	            return;
	        }
	        this._axesMap = axesMap;
	        /// Create cartesian2d
	        each(axesMap.x, function (xAxis, xAxisIndex) {
	            each(axesMap.y, function (yAxis, yAxisIndex) {
	                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	                var cartesian = new Cartesian2D(key);
	                cartesian.grid = this;
	                this._coordsMap[key] = cartesian;
	                this._coordsList.push(cartesian);
	                cartesian.addAxis(xAxis);
	                cartesian.addAxis(yAxis);
	            }, this);
	        }, this);
	        function createAxisCreator(axisType) {
	            return function (axisModel, idx) {
	                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                    return;
	                }
	                var axisPosition = axisModel.get('position');
	                if (axisType === 'x') {
	                    // Fix position
	                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                        // Default bottom of X
	                        axisPosition = 'bottom';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                        }
	                    }
	                } else {
	                    // Fix position
	                    if (axisPosition !== 'left' && axisPosition !== 'right') {
	                        // Default left of Y
	                        axisPosition = 'left';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                        }
	                    }
	                }
	                axisPositionUsed[axisPosition] = true;
	                var axis = new Axis2D(axisType, axisHelper.createScaleByModel(axisModel), [
	                        0,
	                        0
	                    ], axisModel.get('type'), axisPosition);
	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');
	                axis.onZero = axisModel.get('axisLine.onZero');
	                // Inject axis into axisModel
	                axisModel.axis = axis;
	                // Inject axisModel into axis
	                axis.model = axisModel;
	                // Inject grid info axis
	                axis.grid = this;
	                // Index of axis, can be used as key
	                axis.index = idx;
	                this._axesList.push(axis);
	                axesMap[axisType][idx] = axis;
	                axesCount[axisType]++;
	            };
	        }
	    };
	    /**
	     * Update cartesian properties from series
	     * @param  {module:echarts/model/Option} option
	     * @private
	     */
	    gridProto._updateScale = function (ecModel, gridModel) {
	        // Reset scale
	        zrUtil.each(this._axesList, function (axis) {
	            axis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'cartesian2d') {
	                var xAxisIndex = seriesModel.get('xAxisIndex');
	                var yAxisIndex = seriesModel.get('yAxisIndex');
	                var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	                var yAxisModel = ecModel.getComponent('yAxis', yAxisIndex);
	                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	                    return;
	                }
	                var cartesian = this.getCartesian(xAxisIndex, yAxisIndex);
	                var data = seriesModel.getData();
	                var xAxis = cartesian.getAxis('x');
	                var yAxis = cartesian.getAxis('y');
	                if (data.type === 'list') {
	                    unionExtent(data, xAxis, seriesModel);
	                    unionExtent(data, yAxis, seriesModel);
	                }
	            }
	        }, this);
	        function unionExtent(data, axis, seriesModel) {
	            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	                axis.scale.unionExtent(data.getDataExtent(dim, axis.scale.type !== 'ordinal'));
	            });
	        }
	    };
	    /**
	     * @inner
	     */
	    function updateAxisTransfrom(axis, coordBase) {
	        var axisExtent = axis.getExtent();
	        var axisExtentSum = axisExtent[0] + axisExtent[1];
	        // Fast transform
	        axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	            return coord + coordBase;
	        } : function (coord) {
	            return axisExtentSum - coord + coordBase;
	        };
	        axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	            return coord - coordBase;
	        } : function (coord) {
	            return axisExtentSum - coord + coordBase;
	        };
	    }
	    Grid.create = function (ecModel, api) {
	        var grids = [];
	        ecModel.eachComponent('grid', function (gridModel, idx) {
	            var grid = new Grid(gridModel, ecModel, api);
	            grid.name = 'grid_' + idx;
	            grid.resize(gridModel, api);
	            gridModel.coordinateSystem = grid;
	            grids.push(grid);
	        });
	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') !== 'cartesian2d') {
	                return;
	            }
	            var xAxisIndex = seriesModel.get('xAxisIndex');
	            var yAxisIndex = seriesModel.get('yAxisIndex');
	            var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	            if (true) {
	                var yAxisModel = ecModel.getComponent('yAxis', yAxisIndex);
	                if (xAxisModel.get('gridIndex') !== yAxisModel.get('gridIndex')) {
	                    throw new Error('xAxis and yAxis must use the same grid');
	                }
	            }
	            var grid = grids[xAxisModel.get('gridIndex')];
	            seriesModel.coordinateSystem = grid.getCartesian(xAxisIndex, yAxisIndex);
	        });
	        return grids;
	    };
	    // For deciding which dimensions to use when creating list data
	    Grid.dimensions = Cartesian2D.prototype.dimensions;
	    require('../../CoordinateSystem').register('cartesian2d', Grid);
	    return Grid;
	});
	define('echarts/chart/bar/BarSeries', ['require', '../../model/Series', '../helper/createListFromArray'], function (require) {
	    'use strict';
	    var SeriesModel = require('../../model/Series');
	    var createListFromArray = require('../helper/createListFromArray');
	    return SeriesModel.extend({
	        type: 'series.bar',
	        dependencies: [
	            'grid',
	            'polar'
	        ],
	        getInitialData: function (option, ecModel) {
	            if (true) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'cartesian2d') {
	                    throw new Error('Bar only support cartesian2d coordinateSystem');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },
	        getMarkerPosition: function (value) {
	            var coordSys = this.coordinateSystem;
	            if (coordSys) {
	                // PENDING if clamp ?
	                var pt = coordSys.dataToPoint(value, true);
	                var data = this.getData();
	                var offset = data.getLayout('offset');
	                var size = data.getLayout('size');
	                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	                pt[offsetIndex] += offset + size / 2;
	                return pt;
	            }
	            return [
	                NaN,
	                NaN
	            ];
	        },
	        brushSelector: 'rect',
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	            xAxisIndex: 0,
	            yAxisIndex: 0,
	            barMinHeight: 0,
	            itemStyle: {
	                normal: {},
	                emphasis: {}
	            }
	        }
	    });
	});
	define('echarts/chart/bar/BarView', ['require', 'zrender/core/util', '../../util/graphic', '../../model/Model', './barItemStyle', '../../echarts'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var graphic = require('../../util/graphic');
	    zrUtil.extend(require('../../model/Model').prototype, require('./barItemStyle'));
	    function fixLayoutWithLineWidth(layout, lineWidth) {
	        var signX = layout.width > 0 ? 1 : -1;
	        var signY = layout.height > 0 ? 1 : -1;
	        // In case width or height are too small.
	        lineWidth = Math.min(lineWidth, Math.abs(layout.width), Math.abs(layout.height));
	        layout.x += signX * lineWidth / 2;
	        layout.y += signY * lineWidth / 2;
	        layout.width -= signX * lineWidth;
	        layout.height -= signY * lineWidth;
	    }
	    return require('../../echarts').extendChartView({
	        type: 'bar',
	        render: function (seriesModel, ecModel, api) {
	            var coordinateSystemType = seriesModel.get('coordinateSystem');
	            if (coordinateSystemType === 'cartesian2d') {
	                this._renderOnCartesian(seriesModel, ecModel, api);
	            }
	            return this.group;
	        },
	        _renderOnCartesian: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = baseAxis.isHorizontal();
	            var enableAnimation = seriesModel.get('animation');
	            var barBorderWidthQuery = [
	                    'itemStyle',
	                    'normal',
	                    'barBorderWidth'
	                ];
	            function createRect(dataIndex, isUpdate) {
	                var layout = data.getItemLayout(dataIndex);
	                var lineWidth = data.getItemModel(dataIndex).get(barBorderWidthQuery) || 0;
	                fixLayoutWithLineWidth(layout, lineWidth);
	                var rect = new graphic.Rect({ shape: zrUtil.extend({}, layout) });
	                // Animation
	                if (enableAnimation) {
	                    var rectShape = rect.shape;
	                    var animateProperty = isHorizontal ? 'height' : 'width';
	                    var animateTarget = {};
	                    rectShape[animateProperty] = 0;
	                    animateTarget[animateProperty] = layout[animateProperty];
	                    graphic[isUpdate ? 'updateProps' : 'initProps'](rect, { shape: animateTarget }, seriesModel, dataIndex);
	                }
	                return rect;
	            }
	            data.diff(oldData).add(function (dataIndex) {
	                // 空数据
	                if (!data.hasValue(dataIndex)) {
	                    return;
	                }
	                var rect = createRect(dataIndex);
	                data.setItemGraphicEl(dataIndex, rect);
	                group.add(rect);
	            }).update(function (newIndex, oldIndex) {
	                var rect = oldData.getItemGraphicEl(oldIndex);
	                // 空数据
	                if (!data.hasValue(newIndex)) {
	                    group.remove(rect);
	                    return;
	                }
	                if (!rect) {
	                    rect = createRect(newIndex, true);
	                }
	                var layout = data.getItemLayout(newIndex);
	                var lineWidth = data.getItemModel(newIndex).get(barBorderWidthQuery) || 0;
	                fixLayoutWithLineWidth(layout, lineWidth);
	                graphic.updateProps(rect, { shape: layout }, seriesModel, newIndex);
	                data.setItemGraphicEl(newIndex, rect);
	                // Add back
	                group.add(rect);
	            }).remove(function (idx) {
	                var rect = oldData.getItemGraphicEl(idx);
	                if (rect) {
	                    // Not show text when animating
	                    rect.style.text = '';
	                    graphic.updateProps(rect, { shape: { width: 0 } }, seriesModel, idx, function () {
	                        group.remove(rect);
	                    });
	                }
	            }).execute();
	            this._updateStyle(seriesModel, data, isHorizontal);
	            this._data = data;
	        },
	        _updateStyle: function (seriesModel, data, isHorizontal) {
	            function setLabel(style, model, color, labelText, labelPositionOutside) {
	                graphic.setText(style, model, color);
	                style.text = labelText;
	                if (style.textPosition === 'outside') {
	                    style.textPosition = labelPositionOutside;
	                }
	            }
	            data.eachItemGraphicEl(function (rect, idx) {
	                var itemModel = data.getItemModel(idx);
	                var color = data.getItemVisual(idx, 'color');
	                var opacity = data.getItemVisual(idx, 'opacity');
	                var layout = data.getItemLayout(idx);
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');
	                var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();
	                rect.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	                rect.useStyle(zrUtil.defaults({
	                    fill: color,
	                    opacity: opacity
	                }, itemStyleModel.getBarItemStyle()));
	                var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';
	                var labelModel = itemModel.getModel('label.normal');
	                var hoverLabelModel = itemModel.getModel('label.emphasis');
	                var rectStyle = rect.style;
	                if (labelModel.get('show')) {
	                    setLabel(rectStyle, labelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), seriesModel.getRawValue(idx)), labelPositionOutside);
	                } else {
	                    rectStyle.text = '';
	                }
	                if (hoverLabelModel.get('show')) {
	                    setLabel(hoverStyle, hoverLabelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), seriesModel.getRawValue(idx)), labelPositionOutside);
	                } else {
	                    hoverStyle.text = '';
	                }
	                graphic.setHoverStyle(rect, hoverStyle);
	            });
	        },
	        remove: function (ecModel, api) {
	            var group = this.group;
	            if (ecModel.get('animation')) {
	                if (this._data) {
	                    this._data.eachItemGraphicEl(function (el) {
	                        // Not show text when animating
	                        el.style.text = '';
	                        graphic.updateProps(el, { shape: { width: 0 } }, ecModel, el.dataIndex, function () {
	                            group.remove(el);
	                        });
	                    });
	                }
	            } else {
	                group.removeAll();
	            }
	        }
	    });
	});
	define('echarts/util/graphic', ['require', 'zrender/core/util', 'zrender/tool/path', 'zrender/graphic/Path', 'zrender/tool/color', 'zrender/core/matrix', 'zrender/core/vector', 'zrender/graphic/Gradient', 'zrender/container/Group', 'zrender/graphic/Image', 'zrender/graphic/Text', 'zrender/graphic/shape/Circle', 'zrender/graphic/shape/Sector', 'zrender/graphic/shape/Ring', 'zrender/graphic/shape/Polygon', 'zrender/graphic/shape/Polyline', 'zrender/graphic/shape/Rect', 'zrender/graphic/shape/Line', 'zrender/graphic/shape/BezierCurve', 'zrender/graphic/shape/Arc', 'zrender/graphic/CompoundPath', 'zrender/graphic/LinearGradient', 'zrender/graphic/RadialGradient', 'zrender/core/BoundingRect'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var pathTool = require('zrender/tool/path');
	    var round = Math.round;
	    var Path = require('zrender/graphic/Path');
	    var colorTool = require('zrender/tool/color');
	    var matrix = require('zrender/core/matrix');
	    var vector = require('zrender/core/vector');
	    var Gradient = require('zrender/graphic/Gradient');
	    var graphic = {};
	    graphic.Group = require('zrender/container/Group');
	    graphic.Image = require('zrender/graphic/Image');
	    graphic.Text = require('zrender/graphic/Text');
	    graphic.Circle = require('zrender/graphic/shape/Circle');
	    graphic.Sector = require('zrender/graphic/shape/Sector');
	    graphic.Ring = require('zrender/graphic/shape/Ring');
	    graphic.Polygon = require('zrender/graphic/shape/Polygon');
	    graphic.Polyline = require('zrender/graphic/shape/Polyline');
	    graphic.Rect = require('zrender/graphic/shape/Rect');
	    graphic.Line = require('zrender/graphic/shape/Line');
	    graphic.BezierCurve = require('zrender/graphic/shape/BezierCurve');
	    graphic.Arc = require('zrender/graphic/shape/Arc');
	    graphic.CompoundPath = require('zrender/graphic/CompoundPath');
	    graphic.LinearGradient = require('zrender/graphic/LinearGradient');
	    graphic.RadialGradient = require('zrender/graphic/RadialGradient');
	    graphic.BoundingRect = require('zrender/core/BoundingRect');
	    /**
	     * Extend shape with parameters
	     */
	    graphic.extendShape = function (opts) {
	        return Path.extend(opts);
	    };
	    /**
	     * Extend path
	     */
	    graphic.extendPath = function (pathData, opts) {
	        return pathTool.extendFromString(pathData, opts);
	    };
	    /**
	     * Create a path element from path data string
	     * @param {string} pathData
	     * @param {Object} opts
	     * @param {module:zrender/core/BoundingRect} rect
	     * @param {string} [layout=cover] 'center' or 'cover'
	     */
	    graphic.makePath = function (pathData, opts, rect, layout) {
	        var path = pathTool.createFromString(pathData, opts);
	        var boundingRect = path.getBoundingRect();
	        if (rect) {
	            var aspect = boundingRect.width / boundingRect.height;
	            if (layout === 'center') {
	                // Set rect to center, keep width / height ratio.
	                var width = rect.height * aspect;
	                var height;
	                if (width <= rect.width) {
	                    height = rect.height;
	                } else {
	                    width = rect.width;
	                    height = width / aspect;
	                }
	                var cx = rect.x + rect.width / 2;
	                var cy = rect.y + rect.height / 2;
	                rect.x = cx - width / 2;
	                rect.y = cy - height / 2;
	                rect.width = width;
	                rect.height = height;
	            }
	            this.resizePath(path, rect);
	        }
	        return path;
	    };
	    graphic.mergePath = pathTool.mergePath, graphic.resizePath = function (path, rect) {
	        if (!path.applyTransform) {
	            return;
	        }
	        var pathRect = path.getBoundingRect();
	        var m = pathRect.calculateTransform(rect);
	        path.applyTransform(m);
	    };
	    /**
	     * Sub pixel optimize line for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x1]
	     * @param {number} [param.shape.y1]
	     * @param {number} [param.shape.x2]
	     * @param {number} [param.shape.y2]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeLine = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	        }
	        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	        }
	        return param;
	    };
	    /**
	     * Sub pixel optimize rect for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x]
	     * @param {number} [param.shape.y]
	     * @param {number} [param.shape.width]
	     * @param {number} [param.shape.height]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeRect = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	        var originX = shape.x;
	        var originY = shape.y;
	        var originWidth = shape.width;
	        var originHeight = shape.height;
	        shape.x = subPixelOptimize(shape.x, lineWidth, true);
	        shape.y = subPixelOptimize(shape.y, lineWidth, true);
	        shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	        shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	        return param;
	    };
	    /**
	     * Sub pixel optimize for canvas
	     *
	     * @param {number} position Coordinate, such as x, y
	     * @param {number} lineWidth Should be nonnegative integer.
	     * @param {boolean=} positiveOrNegative Default false (negative).
	     * @return {number} Optimized position.
	     */
	    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	        // Assure that (position + lineWidth / 2) is near integer edge,
	        // otherwise line will be fuzzy in canvas.
	        var doubledPosition = round(position * 2);
	        return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	    };
	    function hasFillOrStroke(fillOrStroke) {
	        return fillOrStroke != null && fillOrStroke != 'none';
	    }
	    function liftColor(color) {
	        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	    }
	    /**
	     * @private
	     */
	    function cacheElementStl(el) {
	        if (el.__hoverStlDirty) {
	            var stroke = el.style.stroke;
	            var fill = el.style.fill;
	            // Create hoverStyle on mouseover
	            var hoverStyle = el.__hoverStl;
	            hoverStyle.fill = hoverStyle.fill || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	            hoverStyle.stroke = hoverStyle.stroke || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);
	            var normalStyle = {};
	            for (var name in hoverStyle) {
	                if (hoverStyle.hasOwnProperty(name)) {
	                    normalStyle[name] = el.style[name];
	                }
	            }
	            el.__normalStl = normalStyle;
	            el.__hoverStlDirty = false;
	        }
	    }
	    /**
	     * @private
	     */
	    function doSingleEnterHover(el) {
	        if (el.__isHover) {
	            return;
	        }
	        cacheElementStl(el);
	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.addHover(el, el.__hoverStl);
	        } else {
	            el.setStyle(el.__hoverStl);
	            el.z2 += 1;
	        }
	        el.__isHover = true;
	    }
	    /**
	     * @inner
	     */
	    function doSingleLeaveHover(el) {
	        if (!el.__isHover) {
	            return;
	        }
	        var normalStl = el.__normalStl;
	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.removeHover(el);
	        } else {
	            normalStl && el.setStyle(normalStl);
	            el.z2 -= 1;
	        }
	        el.__isHover = false;
	    }
	    /**
	     * @inner
	     */
	    function doEnterHover(el) {
	        el.type === 'group' ? el.traverse(function (child) {
	            if (child.type !== 'group') {
	                doSingleEnterHover(child);
	            }
	        }) : doSingleEnterHover(el);
	    }
	    function doLeaveHover(el) {
	        el.type === 'group' ? el.traverse(function (child) {
	            if (child.type !== 'group') {
	                doSingleLeaveHover(child);
	            }
	        }) : doSingleLeaveHover(el);
	    }
	    /**
	     * @inner
	     */
	    function setElementHoverStl(el, hoverStl) {
	        // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	        // Often used when item group has a label element and it's hoverStyle is different
	        el.__hoverStl = el.hoverStyle || hoverStl || {};
	        el.__hoverStlDirty = true;
	        if (el.__isHover) {
	            cacheElementStl(el);
	        }
	    }
	    /**
	     * @inner
	     */
	    function onElementMouseOver() {
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doEnterHover(this);
	    }
	    /**
	     * @inner
	     */
	    function onElementMouseOut() {
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doLeaveHover(this);
	    }
	    /**
	     * @inner
	     */
	    function enterEmphasis() {
	        this.__isEmphasis = true;
	        doEnterHover(this);
	    }
	    /**
	     * @inner
	     */
	    function leaveEmphasis() {
	        this.__isEmphasis = false;
	        doLeaveHover(this);
	    }
	    /**
	     * Set hover style of element
	     * @param {module:zrender/Element} el
	     * @param {Object} [hoverStyle]
	     */
	    graphic.setHoverStyle = function (el, hoverStyle) {
	        el.type === 'group' ? el.traverse(function (child) {
	            if (child.type !== 'group') {
	                setElementHoverStl(child, hoverStyle);
	            }
	        }) : setElementHoverStl(el, hoverStyle);
	        // Remove previous bound handlers
	        el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut);
	        // Emphasis, normal can be triggered manually
	        el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	    };
	    /**
	     * Set text option in the style
	     * @param {Object} textStyle
	     * @param {module:echarts/model/Model} labelModel
	     * @param {string} color
	     */
	    graphic.setText = function (textStyle, labelModel, color) {
	        var labelPosition = labelModel.getShallow('position') || 'inside';
	        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	        var textStyleModel = labelModel.getModel('textStyle');
	        zrUtil.extend(textStyle, {
	            textDistance: labelModel.getShallow('distance') || 5,
	            textFont: textStyleModel.getFont(),
	            textPosition: labelPosition,
	            textFill: textStyleModel.getTextColor() || labelColor
	        });
	    };
	    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	        if (typeof dataIndex === 'function') {
	            cb = dataIndex;
	            dataIndex = null;
	        }
	        var animationEnabled = animatableModel && (animatableModel.ifEnableAnimation ? animatableModel.ifEnableAnimation() : animatableModel.getShallow('animation'));
	        if (animationEnabled) {
	            var postfix = isUpdate ? 'Update' : '';
	            var duration = animatableModel && animatableModel.getShallow('animationDuration' + postfix);
	            var animationEasing = animatableModel && animatableModel.getShallow('animationEasing' + postfix);
	            var animationDelay = animatableModel && animatableModel.getShallow('animationDelay' + postfix);
	            if (typeof animationDelay === 'function') {
	                animationDelay = animationDelay(dataIndex);
	            }
	            duration > 0 ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb) : (el.attr(props), cb && cb());
	        } else {
	            el.attr(props);
	            cb && cb();
	        }
	    }
	    /**
	     * Update graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} [cb]
	     * @example
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	     *     // Or
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, function () { console.log('Animation done!'); });
	     */
	    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	    };
	    /**
	     * Init graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} cb
	     */
	    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	    };
	    /**
	     * Get transform matrix of target (param target),
	     * in coordinate of its ancestor (param ancestor)
	     *
	     * @param {module:zrender/mixin/Transformable} target
	     * @param {module:zrender/mixin/Transformable} [ancestor]
	     */
	    graphic.getTransform = function (target, ancestor) {
	        var mat = matrix.identity([]);
	        while (target && target !== ancestor) {
	            matrix.mul(mat, target.getLocalTransform(), mat);
	            target = target.parent;
	        }
	        return mat;
	    };
	    /**
	     * Apply transform to an vertex.
	     * @param {Array.<number>} vertex [x, y]
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {Array.<number>} [x, y]
	     */
	    graphic.applyTransform = function (vertex, transform, invert) {
	        if (invert) {
	            transform = matrix.invert([], transform);
	        }
	        return vector.applyTransform([], vertex, transform);
	    };
	    /**
	     * @param {string} direction 'left' 'right' 'top' 'bottom'
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	     */
	    graphic.transformDirection = function (direction, transform, invert) {
	        // Pick a base, ensure that transform result will not be (0, 0).
	        var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	        var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
	        var vertex = [
	                direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,
	                direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0
	            ];
	        vertex = graphic.applyTransform(vertex, transform, invert);
	        return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	    };
	    /**
	     * Apply group transition animation from g1 to g2
	     */
	    graphic.groupTransition = function (g1, g2, animatableModel, cb) {
	        if (!g1 || !g2) {
	            return;
	        }
	        function getElMap(g) {
	            var elMap = {};
	            g.traverse(function (el) {
	                if (!el.isGroup && el.anid) {
	                    elMap[el.anid] = el;
	                }
	            });
	            return elMap;
	        }
	        function getAnimatableProps(el) {
	            var obj = {
	                    position: vector.clone(el.position),
	                    rotation: el.rotation
	                };
	            if (el.shape) {
	                obj.shape = zrUtil.extend({}, el.shape);
	            }
	            return obj;
	        }
	        var elMap1 = getElMap(g1);
	        g2.traverse(function (el) {
	            if (!el.isGroup && el.anid) {
	                var oldEl = elMap1[el.anid];
	                if (oldEl) {
	                    var newProp = getAnimatableProps(el);
	                    el.attr(getAnimatableProps(oldEl));
	                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);
	                }    // else {
	                     //     if (el.previousProps) {
	                     //         graphic.updateProps
	                     //     }
	                     // }
	            }
	        });
	    };
	    return graphic;
	});
	define('echarts/layout/barGrid', ['require', 'zrender/core/util', '../util/number'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('../util/number');
	    var parsePercent = numberUtil.parsePercent;
	    function getSeriesStackId(seriesModel) {
	        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	    }
	    function getAxisKey(axis) {
	        return axis.dim + axis.index;
	    }
	    function calBarWidthAndOffset(barSeries, api) {
	        // Columns info on each category axis. Key is cartesian name
	        var columnsMap = {};
	        zrUtil.each(barSeries, function (seriesModel, idx) {
	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var axisExtent = baseAxis.getExtent();
	            var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
	            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {
	                    bandWidth: bandWidth,
	                    remainedWidth: bandWidth,
	                    autoWidthCount: 0,
	                    categoryGap: '20%',
	                    gap: '30%',
	                    stacks: {}
	                };
	            var stacks = columnsOnAxis.stacks;
	            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;
	            var stackId = getSeriesStackId(seriesModel);
	            if (!stacks[stackId]) {
	                columnsOnAxis.autoWidthCount++;
	            }
	            stacks[stackId] = stacks[stackId] || {
	                width: 0,
	                maxWidth: 0
	            };
	            var barWidth = parsePercent(seriesModel.get('barWidth'), bandWidth);
	            var barMaxWidth = parsePercent(seriesModel.get('barMaxWidth'), bandWidth);
	            var barGap = seriesModel.get('barGap');
	            var barCategoryGap = seriesModel.get('barCategoryGap');
	            // TODO
	            if (barWidth && !stacks[stackId].width) {
	                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	                stacks[stackId].width = barWidth;
	                columnsOnAxis.remainedWidth -= barWidth;
	            }
	            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	            barGap != null && (columnsOnAxis.gap = barGap);
	            barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	        });
	        var result = {};
	        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	            result[coordSysName] = {};
	            var stacks = columnsOnAxis.stacks;
	            var bandWidth = columnsOnAxis.bandWidth;
	            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	            var remainedWidth = columnsOnAxis.remainedWidth;
	            var autoWidthCount = columnsOnAxis.autoWidthCount;
	            var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);
	            // Find if any auto calculated bar exceeded maxBarWidth
	            zrUtil.each(stacks, function (column, stack) {
	                var maxWidth = column.maxWidth;
	                if (!column.width && maxWidth && maxWidth < autoWidth) {
	                    maxWidth = Math.min(maxWidth, remainedWidth);
	                    remainedWidth -= maxWidth;
	                    column.width = maxWidth;
	                    autoWidthCount--;
	                }
	            });
	            // Recalculate width again
	            autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);
	            var widthSum = 0;
	            var lastColumn;
	            zrUtil.each(stacks, function (column, idx) {
	                if (!column.width) {
	                    column.width = autoWidth;
	                }
	                lastColumn = column;
	                widthSum += column.width * (1 + barGapPercent);
	            });
	            if (lastColumn) {
	                widthSum -= lastColumn.width * barGapPercent;
	            }
	            var offset = -widthSum / 2;
	            zrUtil.each(stacks, function (column, stackId) {
	                result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                    offset: offset,
	                    width: column.width
	                };
	                offset += column.width * (1 + barGapPercent);
	            });
	        });
	        return result;
	    }
	    /**
	     * @param {string} seriesType
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function barLayoutGrid(seriesType, ecModel, api) {
	        var barWidthAndOffset = calBarWidthAndOffset(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {
	                return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	            }));
	        var lastStackCoords = {};
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var stackId = getSeriesStackId(seriesModel);
	            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	            var columnOffset = columnLayoutInfo.offset;
	            var columnWidth = columnLayoutInfo.width;
	            var valueAxis = cartesian.getOtherAxis(baseAxis);
	            var barMinHeight = seriesModel.get('barMinHeight') || 0;
	            var valueAxisStart = baseAxis.onZero ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];
	            var coords = cartesian.dataToPoints(data, true);
	            lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	            data.setLayout({
	                offset: columnOffset,
	                size: columnWidth
	            });
	            data.each(valueAxis.dim, function (value, idx) {
	                // 空数据
	                if (isNaN(value)) {
	                    return;
	                }
	                if (!lastStackCoords[stackId][idx]) {
	                    lastStackCoords[stackId][idx] = {
	                        p: valueAxisStart,
	                        n: valueAxisStart
	                    };
	                }
	                var sign = value >= 0 ? 'p' : 'n';
	                var coord = coords[idx];
	                var lastCoord = lastStackCoords[stackId][idx][sign];
	                var x, y, width, height;
	                if (valueAxis.isHorizontal()) {
	                    x = lastCoord;
	                    y = coord[1] + columnOffset;
	                    width = coord[0] - lastCoord;
	                    height = columnWidth;
	                    if (Math.abs(width) < barMinHeight) {
	                        width = (width < 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += width;
	                } else {
	                    x = coord[0] + columnOffset;
	                    y = lastCoord;
	                    width = columnWidth;
	                    height = coord[1] - lastCoord;
	                    if (Math.abs(height) < barMinHeight) {
	                        // Include zero to has a positive bar
	                        height = (height <= 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += height;
	                }
	                data.setItemLayout(idx, {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }, true);
	        }, this);
	    }
	    return barLayoutGrid;
	});
	define('echarts/util/layout', ['require', 'zrender/core/util', 'zrender/core/BoundingRect', './number', './format'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var BoundingRect = require('zrender/core/BoundingRect');
	    var numberUtil = require('./number');
	    var formatUtil = require('./format');
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;
	    var layout = {};
	    var LOCATION_PARAMS = [
	            'left',
	            'right',
	            'top',
	            'bottom',
	            'width',
	            'height'
	        ];
	    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	        var x = 0;
	        var y = 0;
	        if (maxWidth == null) {
	            maxWidth = Infinity;
	        }
	        if (maxHeight == null) {
	            maxHeight = Infinity;
	        }
	        var currentLineMaxSize = 0;
	        group.eachChild(function (child, idx) {
	            var position = child.position;
	            var rect = child.getBoundingRect();
	            var nextChild = group.childAt(idx + 1);
	            var nextChildRect = nextChild && nextChild.getBoundingRect();
	            var nextX;
	            var nextY;
	            if (orient === 'horizontal') {
	                var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	                nextX = x + moveX;
	                // Wrap when width exceeds maxWidth or meet a `newline` group
	                if (nextX > maxWidth || child.newline) {
	                    x = 0;
	                    nextX = moveX;
	                    y += currentLineMaxSize + gap;
	                    currentLineMaxSize = rect.height;
	                } else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	                }
	            } else {
	                var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	                nextY = y + moveY;
	                // Wrap when width exceeds maxHeight or meet a `newline` group
	                if (nextY > maxHeight || child.newline) {
	                    x += currentLineMaxSize + gap;
	                    y = 0;
	                    nextY = moveY;
	                    currentLineMaxSize = rect.width;
	                } else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	                }
	            }
	            if (child.newline) {
	                return;
	            }
	            position[0] = x;
	            position[1] = y;
	            orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	        });
	    }
	    /**
	     * VBox or HBox layouting
	     * @param {string} orient
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.box = boxLayout;
	    /**
	     * VBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.vbox = zrUtil.curry(boxLayout, 'vertical');
	    /**
	     * HBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');
	    /**
	     * If x or x2 is not specified or 'center' 'left' 'right',
	     * the width would be as long as possible.
	     * If y or y2 is not specified or 'middle' 'top' 'bottom',
	     * the height would be as long as possible.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.x]
	     * @param {number|string} [positionInfo.y]
	     * @param {number|string} [positionInfo.x2]
	     * @param {number|string} [positionInfo.y2]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @return {Object} {width, height}
	     */
	    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;
	        var x = parsePercent(positionInfo.x, containerWidth);
	        var y = parsePercent(positionInfo.y, containerHeight);
	        var x2 = parsePercent(positionInfo.x2, containerWidth);
	        var y2 = parsePercent(positionInfo.y2, containerHeight);
	        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	        margin = formatUtil.normalizeCssArray(margin || 0);
	        return {
	            width: Math.max(x2 - x - margin[1] - margin[3], 0),
	            height: Math.max(y2 - y - margin[0] - margin[2], 0)
	        };
	    };
	    /**
	     * Parse position info.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {number|string} [positionInfo.width]
	     * @param {number|string} [positionInfo.height]
	     * @param {number|string} [positionInfo.aspect] Aspect is width / height
	     * @param {Object} containerRect
	     * @param {string|number} [margin]
	     *
	     * @return {module:zrender/core/BoundingRect}
	     */
	    layout.getLayoutRect = function (positionInfo, containerRect, margin) {
	        margin = formatUtil.normalizeCssArray(margin || 0);
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;
	        var left = parsePercent(positionInfo.left, containerWidth);
	        var top = parsePercent(positionInfo.top, containerHeight);
	        var right = parsePercent(positionInfo.right, containerWidth);
	        var bottom = parsePercent(positionInfo.bottom, containerHeight);
	        var width = parsePercent(positionInfo.width, containerWidth);
	        var height = parsePercent(positionInfo.height, containerHeight);
	        var verticalMargin = margin[2] + margin[0];
	        var horizontalMargin = margin[1] + margin[3];
	        var aspect = positionInfo.aspect;
	        // If width is not specified, calculate width from left and right
	        if (isNaN(width)) {
	            width = containerWidth - right - horizontalMargin - left;
	        }
	        if (isNaN(height)) {
	            height = containerHeight - bottom - verticalMargin - top;
	        }
	        // If width and height are not given
	        // 1. Graph should not exceeds the container
	        // 2. Aspect must be keeped
	        // 3. Graph should take the space as more as possible
	        if (isNaN(width) && isNaN(height)) {
	            if (aspect > containerWidth / containerHeight) {
	                width = containerWidth * 0.8;
	            } else {
	                height = containerHeight * 0.8;
	            }
	        }
	        if (aspect != null) {
	            // Calculate width or height with given aspect
	            if (isNaN(width)) {
	                width = aspect * height;
	            }
	            if (isNaN(height)) {
	                height = width / aspect;
	            }
	        }
	        // If left is not specified, calculate left from right and width
	        if (isNaN(left)) {
	            left = containerWidth - right - width - horizontalMargin;
	        }
	        if (isNaN(top)) {
	            top = containerHeight - bottom - height - verticalMargin;
	        }
	        // Align left and top
	        switch (positionInfo.left || positionInfo.right) {
	        case 'center':
	            left = containerWidth / 2 - width / 2 - margin[3];
	            break;
	        case 'right':
	            left = containerWidth - width - horizontalMargin;
	            break;
	        }
	        switch (positionInfo.top || positionInfo.bottom) {
	        case 'middle':
	        case 'center':
	            top = containerHeight / 2 - height / 2 - margin[0];
	            break;
	        case 'bottom':
	            top = containerHeight - height - verticalMargin;
	            break;
	        }
	        // If something is wrong and left, top, width, height are calculated as NaN
	        left = left || 0;
	        top = top || 0;
	        if (isNaN(width)) {
	            // Width may be NaN if only one value is given except width
	            width = containerWidth - left - (right || 0);
	        }
	        if (isNaN(height)) {
	            // Height may be NaN if only one value is given except height
	            height = containerHeight - top - (bottom || 0);
	        }
	        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	        rect.margin = margin;
	        return rect;
	    };
	    /**
	     * Position group of component in viewport
	     *  Group position is specified by either
	     *  {left, top}, {right, bottom}
	     *  If all properties exists, right and bottom will be igonred.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     */
	    layout.positionGroup = function (group, positionInfo, containerRect, margin) {
	        var groupRect = group.getBoundingRect();
	        positionInfo = zrUtil.extend(zrUtil.clone(positionInfo), {
	            width: groupRect.width,
	            height: groupRect.height
	        });
	        positionInfo = layout.getLayoutRect(positionInfo, containerRect, margin);
	        group.attr('position', [
	            positionInfo.x - groupRect.x,
	            positionInfo.y - groupRect.y
	        ]);
	    };
	    /**
	     * Consider Case:
	     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	     * through setOption or media query, using normal zrUtil.merge will cause
	     * {right: 0} does not take effect.
	     *
	     * @example
	     * ComponentModel.extend({
	     *     init: function () {
	     *         ...
	     *         var inputPositionParams = layout.getLayoutParams(option);
	     *         this.mergeOption(inputPositionParams);
	     *     },
	     *     mergeOption: function (newOption) {
	     *         newOption && zrUtil.merge(thisOption, newOption, true);
	     *         layout.mergeLayoutParam(thisOption, newOption);
	     *     }
	     * });
	     *
	     * @param {Object} targetOption
	     * @param {Object} newOption
	     * @param {Object|string} [opt]
	     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	     */
	    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	        !zrUtil.isObject(opt) && (opt = {});
	        var hNames = [
	                'width',
	                'left',
	                'right'
	            ];
	        // Order by priority.
	        var vNames = [
	                'height',
	                'top',
	                'bottom'
	            ];
	        // Order by priority.
	        var hResult = merge(hNames);
	        var vResult = merge(vNames);
	        copy(hNames, targetOption, hResult);
	        copy(vNames, targetOption, vResult);
	        function merge(names) {
	            var newParams = {};
	            var newValueCount = 0;
	            var merged = {};
	            var mergedValueCount = 0;
	            var enoughParamNumber = opt.ignoreSize ? 1 : 2;
	            each(names, function (name) {
	                merged[name] = targetOption[name];
	            });
	            each(names, function (name) {
	                // Consider case: newOption.width is null, which is
	                // set by user for removing width setting.
	                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	                hasValue(newParams, name) && newValueCount++;
	                hasValue(merged, name) && mergedValueCount++;
	            });
	            // Case: newOption: {width: ..., right: ...},
	            // or targetOption: {right: ...} and newOption: {width: ...},
	            // There is no conflict when merged only has params count
	            // little than enoughParamNumber.
	            if (mergedValueCount === enoughParamNumber || !newValueCount) {
	                return merged;
	            }    // Case: newOption: {width: ..., right: ...},
	                 // Than we can make sure user only want those two, and ignore
	                 // all origin params in targetOption.
	            else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            } else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	        }
	        function hasProp(obj, name) {
	            return obj.hasOwnProperty(name);
	        }
	        function hasValue(obj, name) {
	            return obj[name] != null && obj[name] !== 'auto';
	        }
	        function copy(names, target, source) {
	            each(names, function (name) {
	                target[name] = source[name];
	            });
	        }
	    };
	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.getLayoutParams = function (source) {
	        return layout.copyLayoutParams({}, source);
	    };
	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.copyLayoutParams = function (target, source) {
	        source && target && each(LOCATION_PARAMS, function (name) {
	            source.hasOwnProperty(name) && (target[name] = source[name]);
	        });
	        return target;
	    };
	    return layout;
	});
	define('echarts/chart/pie/PieSeries', ['require', '../../data/List', 'zrender/core/util', '../../util/model', '../../data/helper/completeDimensions', '../../component/helper/selectableMixin', '../../echarts'], function (require) {
	    'use strict';
	    var List = require('../../data/List');
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../../util/model');
	    var completeDimensions = require('../../data/helper/completeDimensions');
	    var dataSelectableMixin = require('../../component/helper/selectableMixin');
	    var PieSeries = require('../../echarts').extendSeriesModel({
	            type: 'series.pie',
	            init: function (option) {
	                PieSeries.superApply(this, 'init', arguments);
	                // Enable legend selection for each data item
	                // Use a function instead of direct access because data reference may changed
	                this.legendDataProvider = function () {
	                    return this._dataBeforeProcessed;
	                };
	                this.updateSelectedMap(option.data);
	                this._defaultLabelLine(option);
	            },
	            mergeOption: function (newOption) {
	                PieSeries.superCall(this, 'mergeOption', newOption);
	                this.updateSelectedMap(this.option.data);
	            },
	            getInitialData: function (option, ecModel) {
	                var dimensions = completeDimensions(['value'], option.data);
	                var list = new List(dimensions, this);
	                list.initData(option.data);
	                return list;
	            },
	            getDataParams: function (dataIndex) {
	                var data = this._data;
	                var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	                var sum = data.getSum('value');
	                // FIXME toFixed?
	                //
	                // Percent is 0 if sum is 0
	                params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);
	                params.$vars.push('percent');
	                return params;
	            },
	            _defaultLabelLine: function (option) {
	                // Extend labelLine emphasis
	                modelUtil.defaultEmphasis(option.labelLine, ['show']);
	                var labelLineNormalOpt = option.labelLine.normal;
	                var labelLineEmphasisOpt = option.labelLine.emphasis;
	                // Not show label line if `label.normal.show = false`
	                labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	                labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	            },
	            defaultOption: {
	                zlevel: 0,
	                z: 2,
	                legendHoverLink: true,
	                hoverAnimation: true,
	                center: [
	                    '50%',
	                    '50%'
	                ],
	                radius: [
	                    0,
	                    '75%'
	                ],
	                clockwise: true,
	                startAngle: 90,
	                minAngle: 0,
	                selectedOffset: 10,
	                avoidLabelOverlap: true,
	                label: {
	                    normal: {
	                        rotate: false,
	                        show: true,
	                        position: 'outer'
	                    },
	                    emphasis: {}
	                },
	                labelLine: {
	                    normal: {
	                        show: true,
	                        length: 15,
	                        length2: 15,
	                        smooth: false,
	                        lineStyle: {
	                            width: 1,
	                            type: 'solid'
	                        }
	                    }
	                },
	                itemStyle: {
	                    normal: { borderWidth: 1 },
	                    emphasis: {}
	                },
	                animationEasing: 'cubicOut',
	                data: []
	            }
	        });
	    zrUtil.mixin(PieSeries, dataSelectableMixin);
	    return PieSeries;
	});
	define('echarts/chart/pie/PieView', ['require', '../../util/graphic', 'zrender/core/util', '../../view/Chart'], function (require) {
	    var graphic = require('../../util/graphic');
	    var zrUtil = require('zrender/core/util');
	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	        var data = seriesModel.getData();
	        var dataIndex = this.dataIndex;
	        var name = data.getName(dataIndex);
	        var selectedOffset = seriesModel.get('selectedOffset');
	        api.dispatchAction({
	            type: 'pieToggleSelect',
	            from: uid,
	            name: name,
	            seriesId: seriesModel.id
	        });
	        data.each(function (idx) {
	            toggleItemSelected(data.getItemGraphicEl(idx), data.getItemLayout(idx), seriesModel.isSelected(data.getName(idx)), selectedOffset, hasAnimation);
	        });
	    }
	    /**
	     * @param {module:zrender/graphic/Sector} el
	     * @param {Object} layout
	     * @param {boolean} isSelected
	     * @param {number} selectedOffset
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	        var midAngle = (layout.startAngle + layout.endAngle) / 2;
	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);
	        var offset = isSelected ? selectedOffset : 0;
	        var position = [
	                dx * offset,
	                dy * offset
	            ];
	        hasAnimation ? el.animate().when(200, { position: position }).start('bounceOut') : el.attr('position', position);
	    }
	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function PiePiece(data, idx) {
	        graphic.Group.call(this);
	        var sector = new graphic.Sector({ z2: 2 });
	        var polyline = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(sector);
	        this.add(polyline);
	        this.add(text);
	        this.updateData(data, idx, true);
	        // Hover to change label and labelLine
	        function onEmphasis() {
	            polyline.ignore = polyline.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            polyline.ignore = polyline.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	    }
	    var piePieceProto = PiePiece.prototype;
	    function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	        return {
	            fill: textStyleModel.getTextColor() || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            opacity: data.getItemVisual(idx, 'opacity'),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(data.hostModel.getFormattedLabel(idx, state), data.getName(idx))
	        };
	    }
	    piePieceProto.updateData = function (data, idx, firstCreate) {
	        var sector = this.childAt(0);
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var sectorShape = zrUtil.extend({}, layout);
	        sectorShape.label = null;
	        if (firstCreate) {
	            sector.setShape(sectorShape);
	            sector.shape.endAngle = layout.startAngle;
	            graphic.updateProps(sector, { shape: { endAngle: layout.endAngle } }, seriesModel, idx);
	        } else {
	            graphic.updateProps(sector, { shape: sectorShape }, seriesModel, idx);
	        }
	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');
	        sector.useStyle(zrUtil.defaults({
	            lineJoin: 'bevel',
	            fill: visualColor
	        }, itemStyleModel.getModel('normal').getItemStyle()));
	        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	        // Toggle selected
	        toggleItemSelected(this, data.getItemLayout(idx), itemModel.get('selected'), seriesModel.get('selectedOffset'), seriesModel.get('animation'));
	        function onEmphasis() {
	            // Sector may has animation of updating data. Force to move to the last frame
	            // Or it may stopped on the wrong shape
	            sector.stopAnimation(true);
	            sector.animateTo({ shape: { r: layout.r + 10 } }, 300, 'elasticOut');
	        }
	        function onNormal() {
	            sector.stopAnimation(true);
	            sector.animateTo({ shape: { r: layout.r } }, 300, 'elasticOut');
	        }
	        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        if (itemModel.get('hoverAnimation') && seriesModel.ifEnableAnimation()) {
	            sector.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	        }
	        this._updateLabel(data, idx);
	        graphic.setHoverStyle(this);
	    };
	    piePieceProto._updateLabel = function (data, idx) {
	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');
	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || [
	                    [
	                        labelLayout.x,
	                        labelLayout.y
	                    ],
	                    [
	                        labelLayout.x,
	                        labelLayout.y
	                    ],
	                    [
	                        labelLayout.x,
	                        labelLayout.y
	                    ]
	                ]
	            }
	        }, seriesModel, idx);
	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel, idx);
	        labelText.attr({
	            style: {
	                textVerticalAlign: labelLayout.verticalAlign,
	                textAlign: labelLayout.textAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [
	                labelLayout.x,
	                labelLayout.y
	            ],
	            z2: 10
	        });
	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');
	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));
	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');
	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');
	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor,
	            opacity: data.getItemVisual(idx, 'opacity')
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	        var smooth = labelLineModel.get('smooth');
	        if (smooth && smooth === true) {
	            smooth = 0.4;
	        }
	        labelLine.setShape({ smooth: smooth });
	    };
	    zrUtil.inherits(PiePiece, graphic.Group);
	    // Pie view
	    var Pie = require('../../view/Chart').extend({
	            type: 'pie',
	            init: function () {
	                var sectorGroup = new graphic.Group();
	                this._sectorGroup = sectorGroup;
	            },
	            render: function (seriesModel, ecModel, api, payload) {
	                if (payload && payload.from === this.uid) {
	                    return;
	                }
	                var data = seriesModel.getData();
	                var oldData = this._data;
	                var group = this.group;
	                var hasAnimation = ecModel.get('animation');
	                var isFirstRender = !oldData;
	                var onSectorClick = zrUtil.curry(updateDataSelected, this.uid, seriesModel, hasAnimation, api);
	                var selectedMode = seriesModel.get('selectedMode');
	                data.diff(oldData).add(function (idx) {
	                    var piePiece = new PiePiece(data, idx);
	                    if (isFirstRender) {
	                        piePiece.eachChild(function (child) {
	                            child.stopAnimation(true);
	                        });
	                    }
	                    selectedMode && piePiece.on('click', onSectorClick);
	                    data.setItemGraphicEl(idx, piePiece);
	                    group.add(piePiece);
	                }).update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);
	                    piePiece.updateData(data, newIdx);
	                    piePiece.off('click');
	                    selectedMode && piePiece.on('click', onSectorClick);
	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                }).remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                }).execute();
	                if (hasAnimation && isFirstRender && data.count() > 0) {
	                    var shape = data.getItemLayout(0);
	                    var r = Math.max(api.getWidth(), api.getHeight()) / 2;
	                    var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	                    group.setClipPath(this._createClipPath(shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel));
	                }
	                this._data = data;
	            },
	            _createClipPath: function (cx, cy, r, startAngle, clockwise, cb, seriesModel) {
	                var clipPath = new graphic.Sector({
	                        shape: {
	                            cx: cx,
	                            cy: cy,
	                            r0: 0,
	                            r: r,
	                            startAngle: startAngle,
	                            endAngle: startAngle,
	                            clockwise: clockwise
	                        }
	                    });
	                graphic.initProps(clipPath, { shape: { endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2 } }, seriesModel, cb);
	                return clipPath;
	            }
	        });
	    return Pie;
	});
	define('echarts/visual/dataColor', ['require'], function (require) {
	    return function (seriesType, ecModel) {
	        // Pie and funnel may use diferrent scope
	        var paletteScope = {};
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var dataAll = seriesModel.getRawData();
	            var idxMap = {};
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                var data = seriesModel.getData();
	                data.each(function (idx) {
	                    var rawIdx = data.getRawIndex(idx);
	                    idxMap[rawIdx] = idx;
	                });
	                dataAll.each(function (rawIdx) {
	                    // FIXME Performance
	                    var itemModel = dataAll.getItemModel(rawIdx);
	                    var filteredIdx = idxMap[rawIdx];
	                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                    var singleDataColor = data.getItemVisual(filteredIdx, 'color', true);
	                    if (!singleDataColor) {
	                        var color = itemModel.get('itemStyle.normal.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);
	                        // Legend may use the visual info in data before processed
	                        dataAll.setItemVisual(rawIdx, 'color', color);
	                        data.setItemVisual(filteredIdx, 'color', color);
	                    } else {
	                        // Set data all color for legend
	                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                    }
	                });
	            }
	        });
	    };
	});
	define('echarts/action/createDataSelectAction', ['require', '../echarts', 'zrender/core/util'], function (require) {
	    var echarts = require('../echarts');
	    var zrUtil = require('zrender/core/util');
	    return function (seriesType, actionInfos) {
	        zrUtil.each(actionInfos, function (actionInfo) {
	            actionInfo.update = 'updateView';
	            /**
	             * @payload
	             * @property {string} seriesName
	             * @property {string} name
	             */
	            echarts.registerAction(actionInfo, function (payload, ecModel) {
	                var selected = {};
	                ecModel.eachComponent({
	                    mainType: 'series',
	                    subType: seriesType,
	                    query: payload
	                }, function (seriesModel) {
	                    if (seriesModel[actionInfo.method]) {
	                        seriesModel[actionInfo.method](payload.name);
	                    }
	                    var data = seriesModel.getData();
	                    // Create selected map
	                    data.each(function (idx) {
	                        var name = data.getName(idx);
	                        selected[name] = seriesModel.isSelected(name) || false;
	                    });
	                });
	                return {
	                    name: payload.name,
	                    selected: selected
	                };
	            });
	        });
	    };
	});
	define('echarts/chart/pie/pieLayout', ['require', '../../util/number', './labelLayout', 'zrender/core/util'], function (require) {
	    var numberUtil = require('../../util/number');
	    var parsePercent = numberUtil.parsePercent;
	    var labelLayout = require('./labelLayout');
	    var zrUtil = require('zrender/core/util');
	    var PI2 = Math.PI * 2;
	    var RADIAN = Math.PI / 180;
	    return function (seriesType, ecModel, api, payload) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var center = seriesModel.get('center');
	            var radius = seriesModel.get('radius');
	            if (!zrUtil.isArray(radius)) {
	                radius = [
	                    0,
	                    radius
	                ];
	            }
	            if (!zrUtil.isArray(center)) {
	                center = [
	                    center,
	                    center
	                ];
	            }
	            var width = api.getWidth();
	            var height = api.getHeight();
	            var size = Math.min(width, height);
	            var cx = parsePercent(center[0], width);
	            var cy = parsePercent(center[1], height);
	            var r0 = parsePercent(radius[0], size / 2);
	            var r = parsePercent(radius[1], size / 2);
	            var data = seriesModel.getData();
	            var startAngle = -seriesModel.get('startAngle') * RADIAN;
	            var minAngle = seriesModel.get('minAngle') * RADIAN;
	            var sum = data.getSum('value');
	            // Sum may be 0
	            var unitRadian = Math.PI / (sum || data.count()) * 2;
	            var clockwise = seriesModel.get('clockwise');
	            var roseType = seriesModel.get('roseType');
	            // [0...max]
	            var extent = data.getDataExtent('value');
	            extent[0] = 0;
	            // In the case some sector angle is smaller than minAngle
	            var restAngle = PI2;
	            var valueSumLargerThanMinAngle = 0;
	            var currentAngle = startAngle;
	            var dir = clockwise ? 1 : -1;
	            data.each('value', function (value, idx) {
	                var angle;
	                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	                if (roseType !== 'area') {
	                    angle = sum === 0 ? unitRadian : value * unitRadian;
	                } else {
	                    angle = PI2 / (data.count() || 1);
	                }
	                if (angle < minAngle) {
	                    angle = minAngle;
	                    restAngle -= minAngle;
	                } else {
	                    valueSumLargerThanMinAngle += value;
	                }
	                var endAngle = currentAngle + dir * angle;
	                data.setItemLayout(idx, {
	                    angle: angle,
	                    startAngle: currentAngle,
	                    endAngle: endAngle,
	                    clockwise: clockwise,
	                    cx: cx,
	                    cy: cy,
	                    r0: r0,
	                    r: roseType ? numberUtil.linearMap(value, extent, [
	                        r0,
	                        r
	                    ]) : r
	                });
	                currentAngle = endAngle;
	            }, true);
	            // Some sector is constrained by minAngle
	            // Rest sectors needs recalculate angle
	            if (restAngle < PI2) {
	                // Average the angle if rest angle is not enough after all angles is
	                // Constrained by minAngle
	                if (restAngle <= 0.001) {
	                    var angle = PI2 / data.count();
	                    data.each(function (idx) {
	                        var layout = data.getItemLayout(idx);
	                        layout.startAngle = startAngle + dir * idx * angle;
	                        layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                    });
	                } else {
	                    unitRadian = restAngle / valueSumLargerThanMinAngle;
	                    currentAngle = startAngle;
	                    data.each('value', function (value, idx) {
	                        var layout = data.getItemLayout(idx);
	                        var angle = layout.angle === minAngle ? minAngle : value * unitRadian;
	                        layout.startAngle = currentAngle;
	                        layout.endAngle = currentAngle + dir * angle;
	                        currentAngle += angle;
	                    });
	                }
	            }
	            labelLayout(seriesModel, r, width, height);
	        });
	    };
	});
	define('zrender/core/env', [], function () {
	    var env = {};
	    if (typeof navigator === 'undefined') {
	        // In node
	        env = {
	            browser: {},
	            os: {},
	            node: true,
	            canvasSupported: true
	        };
	    } else {
	        env = detect(navigator.userAgent);
	    }
	    return env;
	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.
	    function detect(ua) {
	        var os = {};
	        var browser = {};
	        // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        // var touchpad = webos && ua.match(/TouchPad/);
	        // var kindle = ua.match(/Kindle\/([\d.]+)/);
	        // var silk = ua.match(/Silk\/([\d._]+)/);
	        // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        // var playbook = ua.match(/PlayBook/);
	        // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/) || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	        var edge = ua.match(/Edge\/([\d.]+)/);
	        // IE 12 and 12+
	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes
	        // if (browser.webkit = !!webkit) browser.version = webkit[1];
	        // if (android) os.android = true, os.version = android[2];
	        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        // if (webos) os.webos = true, os.version = webos[2];
	        // if (touchpad) os.touchpad = true;
	        // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        // if (bb10) os.bb10 = true, os.version = bb10[2];
	        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        // if (playbook) browser.playbook = true;
	        // if (kindle) os.kindle = true, os.version = kindle[1];
	        // if (silk) browser.silk = true, browser.version = silk[1];
	        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        // if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox)
	            browser.firefox = true, browser.version = firefox[1];
	        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        // if (webview) browser.webview = true;
	        if (ie) {
	            browser.ie = true;
	            browser.version = ie[1];
	        }
	        if (ie) {
	            browser.ie = true;
	            browser.version = ie[1];
	        }
	        if (edge) {
	            browser.edge = true;
	            browser.version = edge[1];
	        }
	        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));
	        return {
	            browser: browser,
	            os: os,
	            node: false,
	            canvasSupported: document.createElement('canvas').getContext ? true : false,
	            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	            pointerEventsSupported: 'onpointerdown' in window && (browser.edge || browser.ie && browser.version >= 10)
	        };
	    }
	});
	define('echarts/processor/dataFilter', [], function () {
	    return function (seriesType, ecModel) {
	        var legendModels = ecModel.findComponents({ mainType: 'legend' });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType(seriesType, function (series) {
	            var data = series.getData();
	            data.filterSelf(function (idx) {
	                var name = data.getName(idx);
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(name)) {
	                        return false;
	                    }
	                }
	                return true;
	            }, this);
	        }, this);
	    };
	});
	define('echarts/ExtensionAPI', ['require', 'zrender/core/util'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var echartsAPIList = [
	            'getDom',
	            'getZr',
	            'getWidth',
	            'getHeight',
	            'dispatchAction',
	            'isDisposed',
	            'on',
	            'off',
	            'getDataURL',
	            'getConnectedDataURL',
	            'getModel',
	            'getOption'
	        ];
	    function ExtensionAPI(chartInstance) {
	        zrUtil.each(echartsAPIList, function (name) {
	            this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	        }, this);
	    }
	    return ExtensionAPI;
	});
	define('echarts/model/Global', ['require', 'zrender/core/util', '../util/model', './Model', './Component', './globalDefault', './mixin/colorPalette'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../util/model');
	    var Model = require('./Model');
	    var each = zrUtil.each;
	    var filter = zrUtil.filter;
	    var map = zrUtil.map;
	    var isArray = zrUtil.isArray;
	    var indexOf = zrUtil.indexOf;
	    var isObject = zrUtil.isObject;
	    var ComponentModel = require('./Component');
	    var globalDefault = require('./globalDefault');
	    var OPTION_INNER_KEY = ' _ec_inner';
	    /**
	     * @alias module:echarts/model/Global
	     *
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {Object} theme
	     */
	    var GlobalModel = Model.extend({
	            constructor: GlobalModel,
	            init: function (option, parentModel, theme, optionManager) {
	                theme = theme || {};
	                this.option = null;
	                // Mark as not initialized.
	                /**
	             * @type {module:echarts/model/Model}
	             * @private
	             */
	                this._theme = new Model(theme);
	                /**
	             * @type {module:echarts/model/OptionManager}
	             */
	                this._optionManager = optionManager;
	            },
	            setOption: function (option, optionPreprocessorFuncs) {
	                zrUtil.assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');
	                this._optionManager.setOption(option, optionPreprocessorFuncs);
	                this.resetOption();
	            },
	            resetOption: function (type) {
	                var optionChanged = false;
	                var optionManager = this._optionManager;
	                if (!type || type === 'recreate') {
	                    var baseOption = optionManager.mountOption(type === 'recreate');
	                    if (!this.option || type === 'recreate') {
	                        initBase.call(this, baseOption);
	                    } else {
	                        this.restoreData();
	                        this.mergeOption(baseOption);
	                    }
	                    optionChanged = true;
	                }
	                if (type === 'timeline' || type === 'media') {
	                    this.restoreData();
	                }
	                if (!type || type === 'recreate' || type === 'timeline') {
	                    var timelineOption = optionManager.getTimelineOption(this);
	                    timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	                }
	                if (!type || type === 'recreate' || type === 'media') {
	                    var mediaOptions = optionManager.getMediaOption(this, this._api);
	                    if (mediaOptions.length) {
	                        each(mediaOptions, function (mediaOption) {
	                            this.mergeOption(mediaOption, optionChanged = true);
	                        }, this);
	                    }
	                }
	                return optionChanged;
	            },
	            mergeOption: function (newOption) {
	                var option = this.option;
	                var componentsMap = this._componentsMap;
	                var newCptTypes = [];
	                // 如果不存在对应的 component model 则直接 merge
	                each(newOption, function (componentOption, mainType) {
	                    if (componentOption == null) {
	                        return;
	                    }
	                    if (!ComponentModel.hasClass(mainType)) {
	                        option[mainType] = option[mainType] == null ? zrUtil.clone(componentOption) : zrUtil.merge(option[mainType], componentOption, true);
	                    } else {
	                        newCptTypes.push(mainType);
	                    }
	                });
	                // FIXME OPTION 同步是否要改回原来的
	                ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);
	                function visitComponent(mainType, dependencies) {
	                    var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	                    var mapResult = modelUtil.mappingToExists(componentsMap[mainType], newCptOptionList);
	                    makeKeyInfo(mainType, mapResult);
	                    var dependentModels = getComponentsByTypes(componentsMap, dependencies);
	                    option[mainType] = [];
	                    componentsMap[mainType] = [];
	                    each(mapResult, function (resultItem, index) {
	                        var componentModel = resultItem.exist;
	                        var newCptOption = resultItem.option;
	                        zrUtil.assert(isObject(newCptOption) || componentModel, 'Empty component definition');
	                        // Consider where is no new option and should be merged using {},
	                        // see removeEdgeAndAdd in topologicalTravel and
	                        // ComponentModel.getAllClassMainTypes.
	                        if (!newCptOption) {
	                            componentModel.mergeOption({}, this);
	                            componentModel.optionUpdated({}, false);
	                        } else {
	                            var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);
	                            if (componentModel && componentModel instanceof ComponentModelClass) {
	                                componentModel.mergeOption(newCptOption, this);
	                                componentModel.optionUpdated(newCptOption, false);
	                            } else {
	                                // PENDING Global as parent ?
	                                var extraOpt = zrUtil.extend({
	                                        dependentModels: dependentModels,
	                                        componentIndex: index
	                                    }, resultItem.keyInfo);
	                                componentModel = new ComponentModelClass(newCptOption, this, this, extraOpt);
	                                componentModel.init(newCptOption, this, this, extraOpt);
	                                // Call optionUpdated after init.
	                                // newCptOption has been used as componentModel.option
	                                // and may be merged with theme and default, so pass null
	                                // to avoid confusion.
	                                componentModel.optionUpdated(null, true);
	                            }
	                        }
	                        componentsMap[mainType][index] = componentModel;
	                        option[mainType][index] = componentModel.option;
	                    }, this);
	                    // Backup series for filtering.
	                    if (mainType === 'series') {
	                        this._seriesIndices = createSeriesIndices(componentsMap.series);
	                    }
	                }
	            },
	            getOption: function () {
	                var option = zrUtil.clone(this.option);
	                each(option, function (opts, mainType) {
	                    if (ComponentModel.hasClass(mainType)) {
	                        var opts = modelUtil.normalizeToArray(opts);
	                        for (var i = opts.length - 1; i >= 0; i--) {
	                            // Remove options with inner id.
	                            if (modelUtil.isIdInner(opts[i])) {
	                                opts.splice(i, 1);
	                            }
	                        }
	                        option[mainType] = opts;
	                    }
	                });
	                delete option[OPTION_INNER_KEY];
	                return option;
	            },
	            getTheme: function () {
	                return this._theme;
	            },
	            getComponent: function (mainType, idx) {
	                var list = this._componentsMap[mainType];
	                if (list) {
	                    return list[idx || 0];
	                }
	            },
	            queryComponents: function (condition) {
	                var mainType = condition.mainType;
	                if (!mainType) {
	                    return [];
	                }
	                var index = condition.index;
	                var id = condition.id;
	                var name = condition.name;
	                var cpts = this._componentsMap[mainType];
	                if (!cpts || !cpts.length) {
	                    return [];
	                }
	                var result;
	                if (index != null) {
	                    if (!isArray(index)) {
	                        index = [index];
	                    }
	                    result = filter(map(index, function (idx) {
	                        return cpts[idx];
	                    }), function (val) {
	                        return !!val;
	                    });
	                } else if (id != null) {
	                    var isIdArray = isArray(id);
	                    result = filter(cpts, function (cpt) {
	                        return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	                    });
	                } else if (name != null) {
	                    var isNameArray = isArray(name);
	                    result = filter(cpts, function (cpt) {
	                        return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	                    });
	                }
	                return filterBySubType(result, condition);
	            },
	            findComponents: function (condition) {
	                var query = condition.query;
	                var mainType = condition.mainType;
	                var queryCond = getQueryCond(query);
	                var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap[mainType];
	                return doFilter(filterBySubType(result, condition));
	                function getQueryCond(q) {
	                    var indexAttr = mainType + 'Index';
	                    var idAttr = mainType + 'Id';
	                    var nameAttr = mainType + 'Name';
	                    return q && (q.hasOwnProperty(indexAttr) || q.hasOwnProperty(idAttr) || q.hasOwnProperty(nameAttr)) ? {
	                        mainType: mainType,
	                        index: q[indexAttr],
	                        id: q[idAttr],
	                        name: q[nameAttr]
	                    } : null;
	                }
	                function doFilter(res) {
	                    return condition.filter ? filter(res, condition.filter) : res;
	                }
	            },
	            eachComponent: function (mainType, cb, context) {
	                var componentsMap = this._componentsMap;
	                if (typeof mainType === 'function') {
	                    context = cb;
	                    cb = mainType;
	                    each(componentsMap, function (components, componentType) {
	                        each(components, function (component, index) {
	                            cb.call(context, componentType, component, index);
	                        });
	                    });
	                } else if (zrUtil.isString(mainType)) {
	                    each(componentsMap[mainType], cb, context);
	                } else if (isObject(mainType)) {
	                    var queryResult = this.findComponents(mainType);
	                    each(queryResult, cb, context);
	                }
	            },
	            getSeriesByName: function (name) {
	                var series = this._componentsMap.series;
	                return filter(series, function (oneSeries) {
	                    return oneSeries.name === name;
	                });
	            },
	            getSeriesByIndex: function (seriesIndex) {
	                return this._componentsMap.series[seriesIndex];
	            },
	            getSeriesByType: function (subType) {
	                var series = this._componentsMap.series;
	                return filter(series, function (oneSeries) {
	                    return oneSeries.subType === subType;
	                });
	            },
	            getSeries: function () {
	                return this._componentsMap.series.slice();
	            },
	            eachSeries: function (cb, context) {
	                assertSeriesInitialized(this);
	                each(this._seriesIndices, function (rawSeriesIndex) {
	                    var series = this._componentsMap.series[rawSeriesIndex];
	                    cb.call(context, series, rawSeriesIndex);
	                }, this);
	            },
	            eachRawSeries: function (cb, context) {
	                each(this._componentsMap.series, cb, context);
	            },
	            eachSeriesByType: function (subType, cb, context) {
	                assertSeriesInitialized(this);
	                each(this._seriesIndices, function (rawSeriesIndex) {
	                    var series = this._componentsMap.series[rawSeriesIndex];
	                    if (series.subType === subType) {
	                        cb.call(context, series, rawSeriesIndex);
	                    }
	                }, this);
	            },
	            eachRawSeriesByType: function (subType, cb, context) {
	                return each(this.getSeriesByType(subType), cb, context);
	            },
	            isSeriesFiltered: function (seriesModel) {
	                assertSeriesInitialized(this);
	                return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	            },
	            filterSeries: function (cb, context) {
	                assertSeriesInitialized(this);
	                var filteredSeries = filter(this._componentsMap.series, cb, context);
	                this._seriesIndices = createSeriesIndices(filteredSeries);
	            },
	            restoreData: function () {
	                var componentsMap = this._componentsMap;
	                this._seriesIndices = createSeriesIndices(componentsMap.series);
	                var componentTypes = [];
	                each(componentsMap, function (components, componentType) {
	                    componentTypes.push(componentType);
	                });
	                ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	                    each(componentsMap[componentType], function (component) {
	                        component.restoreData();
	                    });
	                });
	            }
	        });
	    /**
	     * @inner
	     */
	    function mergeTheme(option, theme) {
	        for (var name in theme) {
	            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	            if (!ComponentModel.hasClass(name)) {
	                if (typeof theme[name] === 'object') {
	                    option[name] = !option[name] ? zrUtil.clone(theme[name]) : zrUtil.merge(option[name], theme[name], false);
	                } else {
	                    if (option[name] == null) {
	                        option[name] = theme[name];
	                    }
	                }
	            }
	        }
	    }
	    function initBase(baseOption) {
	        baseOption = baseOption;
	        // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	        this.option = {};
	        this.option[OPTION_INNER_KEY] = 1;
	        /**
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @private
	         */
	        this._componentsMap = {};
	        /**
	         * Mapping between filtered series list and raw series list.
	         * key: filtered series indices, value: raw series indices.
	         * @type {Array.<nubmer>}
	         * @private
	         */
	        this._seriesIndices = null;
	        mergeTheme(baseOption, this._theme.option);
	        // TODO Needs clone when merging to the unexisted property
	        zrUtil.merge(baseOption, globalDefault, false);
	        this.mergeOption(baseOption);
	    }
	    /**
	     * @inner
	     * @param {Array.<string>|string} types model types
	     * @return {Object} key: {string} type, value: {Array.<Object>} models
	     */
	    function getComponentsByTypes(componentsMap, types) {
	        if (!zrUtil.isArray(types)) {
	            types = types ? [types] : [];
	        }
	        var ret = {};
	        each(types, function (type) {
	            ret[type] = (componentsMap[type] || []).slice();
	        });
	        return ret;
	    }
	    /**
	     * @inner
	     */
	    function makeKeyInfo(mainType, mapResult) {
	        // We use this id to hash component models and view instances
	        // in echarts. id can be specified by user, or auto generated.
	        // The id generation rule ensures new view instance are able
	        // to mapped to old instance when setOption are called in
	        // no-merge mode. So we generate model id by name and plus
	        // type in view id.
	        // name can be duplicated among components, which is convenient
	        // to specify multi components (like series) by one name.
	        // Ensure that each id is distinct.
	        var idMap = {};
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            existCpt && (idMap[existCpt.id] = item);
	        });
	        each(mapResult, function (item, index) {
	            var opt = item.option;
	            zrUtil.assert(!opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item, 'id duplicates: ' + (opt && opt.id));
	            opt && opt.id != null && (idMap[opt.id] = item);
	            // Complete subType
	            if (isObject(opt)) {
	                var subType = determineSubType(mainType, opt, item.exist);
	                item.keyInfo = {
	                    mainType: mainType,
	                    subType: subType
	                };
	            }
	        });
	        // Make name and id.
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            var opt = item.option;
	            var keyInfo = item.keyInfo;
	            if (!isObject(opt)) {
	                return;
	            }
	            // name can be overwitten. Consider case: axis.name = '20km'.
	            // But id generated by name will not be changed, which affect
	            // only in that case: setOption with 'not merge mode' and view
	            // instance will be recreated, which can be accepted.
	            keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name : ' -';
	            if (existCpt) {
	                keyInfo.id = existCpt.id;
	            } else if (opt.id != null) {
	                keyInfo.id = opt.id + '';
	            } else {
	                // Consider this situatoin:
	                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	                //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	                // Series with the same name between optionA and optionB
	                // should be mapped.
	                var idNum = 0;
	                do {
	                    keyInfo.id = ' ' + keyInfo.name + ' ' + idNum++;
	                } while (idMap[keyInfo.id]);
	            }
	            idMap[keyInfo.id] = item;
	        });
	    }
	    /**
	     * @inner
	     */
	    function determineSubType(mainType, newCptOption, existComponent) {
	        var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType : ComponentModel.determineSubType(mainType, newCptOption);
	        // tooltip, markline, markpoint may always has no subType
	        return subType;
	    }
	    /**
	     * @inner
	     */
	    function createSeriesIndices(seriesModels) {
	        return map(seriesModels, function (series) {
	            return series.componentIndex;
	        }) || [];
	    }
	    /**
	     * @inner
	     */
	    function filterBySubType(components, condition) {
	        // Using hasOwnProperty for restrict. Consider
	        // subType is undefined in user payload.
	        return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	            return cpt.subType === condition.subType;
	        }) : components;
	    }
	    /**
	     * @inner
	     */
	    function assertSeriesInitialized(ecModel) {
	        // Components that use _seriesIndices should depends on series component,
	        // which make sure that their initialization is after series.
	        if (true) {
	            if (!ecModel._seriesIndices) {
	                throw new Error('Series has not been initialized yet.');
	            }
	        }
	    }
	    zrUtil.mixin(GlobalModel, require('./mixin/colorPalette'));
	    return GlobalModel;
	});
	define('echarts/model/OptionManager', ['require', 'zrender/core/util', '../util/model', './Component'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../util/model');
	    var ComponentModel = require('./Component');
	    var each = zrUtil.each;
	    var clone = zrUtil.clone;
	    var map = zrUtil.map;
	    var merge = zrUtil.merge;
	    var QUERY_REG = /^(min|max)?(.+)$/;
	    /**
	     * TERM EXPLANATIONS:
	     *
	     * [option]:
	     *
	     *     An object that contains definitions of components. For example:
	     *     var option = {
	     *         title: {...},
	     *         legend: {...},
	     *         visualMap: {...},
	     *         series: [
	     *             {data: [...]},
	     *             {data: [...]},
	     *             ...
	     *         ]
	     *     };
	     *
	     * [rawOption]:
	     *
	     *     An object input to echarts.setOption. 'rawOption' may be an
	     *     'option', or may be an object contains multi-options. For example:
	     *     var option = {
	     *         baseOption: {
	     *             title: {...},
	     *             legend: {...},
	     *             series: [
	     *                 {data: [...]},
	     *                 {data: [...]},
	     *                 ...
	     *             ]
	     *         },
	     *         timeline: {...},
	     *         options: [
	     *             {title: {...}, series: {data: [...]}},
	     *             {title: {...}, series: {data: [...]}},
	     *             ...
	     *         ],
	     *         media: [
	     *             {
	     *                 query: {maxWidth: 320},
	     *                 option: {series: {x: 20}, visualMap: {show: false}}
	     *             },
	     *             {
	     *                 query: {minWidth: 320, maxWidth: 720},
	     *                 option: {series: {x: 500}, visualMap: {show: true}}
	     *             },
	     *             {
	     *                 option: {series: {x: 1200}, visualMap: {show: true}}
	     *             }
	     *         ]
	     *     };
	     *
	     * @alias module:echarts/model/OptionManager
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function OptionManager(api) {
	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._timelineOptions = [];
	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._mediaList = [];
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._mediaDefault;
	        /**
	         * -1, means default.
	         * empty means no media.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._currentMediaIndices = [];
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._optionBackup;
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._newBaseOption;
	    }
	    // timeline.notMerge is not supported in ec3. Firstly there is rearly
	    // case that notMerge is needed. Secondly supporting 'notMerge' requires
	    // rawOption cloned and backuped when timeline changed, which does no
	    // good to performance. What's more, that both timeline and setOption
	    // method supply 'notMerge' brings complex and some problems.
	    // Consider this case:
	    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);
	    OptionManager.prototype = {
	        constructor: OptionManager,
	        setOption: function (rawOption, optionPreprocessorFuncs) {
	            rawOption = clone(rawOption, true);
	            // FIXME
	            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。
	            var oldOptionBackup = this._optionBackup;
	            var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);
	            this._newBaseOption = newParsedOption.baseOption;
	            // For setOption at second time (using merge mode);
	            if (oldOptionBackup) {
	                // Only baseOption can be merged.
	                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);
	                // For simplicity, timeline options and media options do not support merge,
	                // that is, if you `setOption` twice and both has timeline options, the latter
	                // timeline opitons will not be merged to the formers, but just substitude them.
	                if (newParsedOption.timelineOptions.length) {
	                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	                }
	                if (newParsedOption.mediaList.length) {
	                    oldOptionBackup.mediaList = newParsedOption.mediaList;
	                }
	                if (newParsedOption.mediaDefault) {
	                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	                }
	            } else {
	                this._optionBackup = newParsedOption;
	            }
	        },
	        mountOption: function (isRecreate) {
	            var optionBackup = this._optionBackup;
	            // TODO
	            // 如果没有reset功能则不clone。
	            this._timelineOptions = map(optionBackup.timelineOptions, clone);
	            this._mediaList = map(optionBackup.mediaList, clone);
	            this._mediaDefault = clone(optionBackup.mediaDefault);
	            this._currentMediaIndices = [];
	            return clone(isRecreate ? optionBackup.baseOption : this._newBaseOption);
	        },
	        getTimelineOption: function (ecModel) {
	            var option;
	            var timelineOptions = this._timelineOptions;
	            if (timelineOptions.length) {
	                // getTimelineOption can only be called after ecModel inited,
	                // so we can get currentIndex from timelineModel.
	                var timelineModel = ecModel.getComponent('timeline');
	                if (timelineModel) {
	                    option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	                }
	            }
	            return option;
	        },
	        getMediaOption: function (ecModel) {
	            var ecWidth = this._api.getWidth();
	            var ecHeight = this._api.getHeight();
	            var mediaList = this._mediaList;
	            var mediaDefault = this._mediaDefault;
	            var indices = [];
	            var result = [];
	            // No media defined.
	            if (!mediaList.length && !mediaDefault) {
	                return result;
	            }
	            // Multi media may be applied, the latter defined media has higher priority.
	            for (var i = 0, len = mediaList.length; i < len; i++) {
	                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                    indices.push(i);
	                }
	            }
	            // FIXME
	            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	            if (!indices.length && mediaDefault) {
	                indices = [-1];
	            }
	            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	                result = map(indices, function (index) {
	                    return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	                });
	            }
	            // Otherwise return nothing.
	            this._currentMediaIndices = indices;
	            return result;
	        }
	    };
	    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	        var timelineOptions = [];
	        var mediaList = [];
	        var mediaDefault;
	        var baseOption;
	        // Compatible with ec2.
	        var timelineOpt = rawOption.timeline;
	        if (rawOption.baseOption) {
	            baseOption = rawOption.baseOption;
	        }
	        // For timeline
	        if (timelineOpt || rawOption.options) {
	            baseOption = baseOption || {};
	            timelineOptions = (rawOption.options || []).slice();
	        }
	        // For media query
	        if (rawOption.media) {
	            baseOption = baseOption || {};
	            var media = rawOption.media;
	            each(media, function (singleMedia) {
	                if (singleMedia && singleMedia.option) {
	                    if (singleMedia.query) {
	                        mediaList.push(singleMedia);
	                    } else if (!mediaDefault) {
	                        // Use the first media default.
	                        mediaDefault = singleMedia;
	                    }
	                }
	            });
	        }
	        // For normal option
	        if (!baseOption) {
	            baseOption = rawOption;
	        }
	        // Set timelineOpt to baseOption in ec3,
	        // which is convenient for merge option.
	        if (!baseOption.timeline) {
	            baseOption.timeline = timelineOpt;
	        }
	        // Preprocess.
	        each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	            return media.option;
	        })), function (option) {
	            each(optionPreprocessorFuncs, function (preProcess) {
	                preProcess(option, isNew);
	            });
	        });
	        return {
	            baseOption: baseOption,
	            timelineOptions: timelineOptions,
	            mediaDefault: mediaDefault,
	            mediaList: mediaList
	        };
	    }
	    /**
	     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	     * Support: width, height, aspectRatio
	     * Can use max or min as prefix.
	     */
	    function applyMediaQuery(query, ecWidth, ecHeight) {
	        var realMap = {
	                width: ecWidth,
	                height: ecHeight,
	                aspectratio: ecWidth / ecHeight
	            };
	        var applicatable = true;
	        zrUtil.each(query, function (value, attr) {
	            var matched = attr.match(QUERY_REG);
	            if (!matched || !matched[1] || !matched[2]) {
	                return;
	            }
	            var operator = matched[1];
	            var realAttr = matched[2].toLowerCase();
	            if (!compare(realMap[realAttr], value, operator)) {
	                applicatable = false;
	            }
	        });
	        return applicatable;
	    }
	    function compare(real, expect, operator) {
	        if (operator === 'min') {
	            return real >= expect;
	        } else if (operator === 'max') {
	            return real <= expect;
	        } else {
	            // Equals
	            return real === expect;
	        }
	    }
	    function indicesEquals(indices1, indices2) {
	        // indices is always order by asc and has only finite number.
	        return indices1.join(',') === indices2.join(',');
	    }
	    /**
	     * Consider case:
	     * `chart.setOption(opt1);`
	     * Then user do some interaction like dataZoom, dataView changing.
	     * `chart.setOption(opt2);`
	     * Then user press 'reset button' in toolbox.
	     *
	     * After doing that all of the interaction effects should be reset, the
	     * chart should be the same as the result of invoke
	     * `chart.setOption(opt1); chart.setOption(opt2);`.
	     *
	     * Although it is not able ensure that
	     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	     * `chart.setOption(merge(opt1, opt2));` exactly,
	     * this might be the only simple way to implement that feature.
	     *
	     * MEMO: We've considered some other approaches:
	     * 1. Each model handle its self restoration but not uniform treatment.
	     *     (Too complex in logic and error-prone)
	     * 2. Use a shadow ecModel. (Performace expensive)
	     */
	    function mergeOption(oldOption, newOption) {
	        newOption = newOption || {};
	        each(newOption, function (newCptOpt, mainType) {
	            if (newCptOpt == null) {
	                return;
	            }
	            var oldCptOpt = oldOption[mainType];
	            if (!ComponentModel.hasClass(mainType)) {
	                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	            } else {
	                newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	                oldOption[mainType] = map(mapResult, function (item) {
	                    return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	                });
	            }
	        });
	    }
	    return OptionManager;
	});
	define('echarts/CoordinateSystem', ['require'], function (require) {
	    'use strict';
	    var coordinateSystemCreators = {};
	    function CoordinateSystemManager() {
	        this._coordinateSystems = [];
	    }
	    CoordinateSystemManager.prototype = {
	        constructor: CoordinateSystemManager,
	        create: function (ecModel, api) {
	            var coordinateSystems = [];
	            for (var type in coordinateSystemCreators) {
	                var list = coordinateSystemCreators[type].create(ecModel, api);
	                list && (coordinateSystems = coordinateSystems.concat(list));
	            }
	            this._coordinateSystems = coordinateSystems;
	        },
	        update: function (ecModel, api) {
	            var coordinateSystems = this._coordinateSystems;
	            for (var i = 0; i < coordinateSystems.length; i++) {
	                // FIXME MUST have
	                coordinateSystems[i].update && coordinateSystems[i].update(ecModel, api);
	            }
	        }
	    };
	    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	        coordinateSystemCreators[type] = coordinateSystemCreator;
	    };
	    CoordinateSystemManager.get = function (type) {
	        return coordinateSystemCreators[type];
	    };
	    return CoordinateSystemManager;
	});
	define('echarts/model/Series', ['require', 'zrender/core/util', '../util/format', '../util/model', './Component', './mixin/colorPalette', 'zrender/core/env'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var formatUtil = require('../util/format');
	    var modelUtil = require('../util/model');
	    var ComponentModel = require('./Component');
	    var colorPaletteMixin = require('./mixin/colorPalette');
	    var env = require('zrender/core/env');
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;
	    var SeriesModel = ComponentModel.extend({
	            type: 'series.__base__',
	            seriesIndex: 0,
	            coordinateSystem: null,
	            defaultOption: null,
	            legendDataProvider: null,
	            visualColorAccessPath: 'itemStyle.normal.color',
	            init: function (option, parentModel, ecModel, extraOpt) {
	                /**
	             * @type {number}
	             * @readOnly
	             */
	                this.seriesIndex = this.componentIndex;
	                this.mergeDefaultAndTheme(option, ecModel);
	                /**
	             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	             * @private
	             */
	                this._dataBeforeProcessed = this.getInitialData(option, ecModel);
	                // If we reverse the order (make this._data firstly, and then make
	                // this._dataBeforeProcessed by cloneShallow), cloneShallow will
	                // cause this._data.graph.data !== this._data when using
	                // module:echarts/data/Graph or module:echarts/data/Tree.
	                // See module:echarts/data/helper/linkList
	                this._data = this._dataBeforeProcessed.cloneShallow();
	            },
	            mergeDefaultAndTheme: function (option, ecModel) {
	                zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	                zrUtil.merge(option, this.getDefaultOption());
	                // Default label emphasis `position` and `show`
	                // FIXME Set label in mergeOption
	                modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);
	                this.fillDataTextStyle(option.data);
	            },
	            mergeOption: function (newSeriesOption, ecModel) {
	                newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	                this.fillDataTextStyle(newSeriesOption.data);
	                var data = this.getInitialData(newSeriesOption, ecModel);
	                // TODO Merge data?
	                if (data) {
	                    this._data = data;
	                    this._dataBeforeProcessed = data.cloneShallow();
	                }
	            },
	            fillDataTextStyle: function (data) {
	                // Default data label emphasis `position` and `show`
	                // FIXME Tree structure data ?
	                // FIXME Performance ?
	                if (data) {
	                    for (var i = 0; i < data.length; i++) {
	                        if (data[i] && data[i].label) {
	                            modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);
	                        }
	                    }
	                }
	            },
	            getInitialData: function () {
	            },
	            getData: function (dataType) {
	                return dataType == null ? this._data : this._data.getLinkedData(dataType);
	            },
	            setData: function (data) {
	                this._data = data;
	            },
	            getRawData: function () {
	                return this._dataBeforeProcessed;
	            },
	            coordDimToDataDim: function (coordDim) {
	                return [coordDim];
	            },
	            dataDimToCoordDim: function (dataDim) {
	                return dataDim;
	            },
	            getBaseAxis: function () {
	                var coordSys = this.coordinateSystem;
	                return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	            },
	            formatTooltip: function (dataIndex, multipleSeries, dataType) {
	                function formatArrayValue(value) {
	                    return zrUtil.map(value, function (val, idx) {
	                        var dimInfo = data.getDimensionInfo(idx);
	                        var dimType = dimInfo && dimInfo.type;
	                        if (dimType === 'ordinal') {
	                            return val;
	                        } else if (dimType === 'time') {
	                            return multipleSeries ? '' : formatUtil.formatTime('yyyy/mm/dd hh:mm:ss', val);
	                        } else {
	                            return addCommas(val);
	                        }
	                    }).filter(function (val) {
	                        return !!val;
	                    }).join(', ');
	                }
	                var data = this._data;
	                var value = this.getRawValue(dataIndex);
	                var formattedValue = zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value);
	                var name = data.getName(dataIndex);
	                var color = data.getItemVisual(dataIndex, 'color');
	                var colorEl = '<span style="display:inline-block;margin-right:5px;' + 'border-radius:10px;width:9px;height:9px;background-color:' + color + '"></span>';
	                var seriesName = this.name;
	                // FIXME
	                if (seriesName === ' -') {
	                    // Not show '-'
	                    seriesName = '';
	                }
	                return !multipleSeries ? (seriesName && encodeHTML(seriesName) + '<br />') + colorEl + (name ? encodeHTML(name) + ' : ' + formattedValue : formattedValue) : colorEl + encodeHTML(this.name) + ' : ' + formattedValue;
	            },
	            ifEnableAnimation: function () {
	                if (env.node) {
	                    return false;
	                }
	                var animationEnabled = this.getShallow('animation');
	                if (animationEnabled) {
	                    if (this.getData().count() > this.getShallow('animationThreshold')) {
	                        animationEnabled = false;
	                    }
	                }
	                return animationEnabled;
	            },
	            restoreData: function () {
	                this._data = this._dataBeforeProcessed.cloneShallow();
	            },
	            getColorFromPalette: function (name, scope) {
	                var ecModel = this.ecModel;
	                // PENDING
	                var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);
	                if (!color) {
	                    color = ecModel.getColorFromPalette(name, scope);
	                }
	                return color;
	            },
	            getAxisTooltipDataIndex: null
	        });
	    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	    zrUtil.mixin(SeriesModel, colorPaletteMixin);
	    return SeriesModel;
	});
	define('echarts/model/Component', ['require', './Model', 'zrender/core/util', '../util/component', '../util/clazz', '../util/layout', './mixin/boxLayout'], function (require) {
	    var Model = require('./Model');
	    var zrUtil = require('zrender/core/util');
	    var arrayPush = Array.prototype.push;
	    var componentUtil = require('../util/component');
	    var clazzUtil = require('../util/clazz');
	    var layout = require('../util/layout');
	    /**
	     * @alias module:echarts/model/Component
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {module:echarts/model/Model} ecModel
	     */
	    var ComponentModel = Model.extend({
	            type: 'component',
	            id: '',
	            name: '',
	            mainType: '',
	            subType: '',
	            componentIndex: 0,
	            defaultOption: null,
	            ecModel: null,
	            dependentModels: [],
	            uid: null,
	            layoutMode: null,
	            $constructor: function (option, parentModel, ecModel, extraOpt) {
	                Model.call(this, option, parentModel, ecModel, extraOpt);
	                // Set dependentModels, componentIndex, name, id, mainType, subType.
	                zrUtil.extend(this, extraOpt);
	                this.uid = componentUtil.getUID('componentModel');
	            },
	            init: function (option, parentModel, ecModel, extraOpt) {
	                this.mergeDefaultAndTheme(option, ecModel);
	            },
	            mergeDefaultAndTheme: function (option, ecModel) {
	                var layoutMode = this.layoutMode;
	                var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	                var themeModel = ecModel.getTheme();
	                zrUtil.merge(option, themeModel.get(this.mainType));
	                zrUtil.merge(option, this.getDefaultOption());
	                if (layoutMode) {
	                    layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                }
	            },
	            mergeOption: function (option) {
	                zrUtil.merge(this.option, option, true);
	                var layoutMode = this.layoutMode;
	                if (layoutMode) {
	                    layout.mergeLayoutParam(this.option, option, layoutMode);
	                }
	            },
	            optionUpdated: function (newCptOption, isInit) {
	            },
	            getDefaultOption: function () {
	                if (!this.hasOwnProperty('__defaultOption')) {
	                    var optList = [];
	                    var Class = this.constructor;
	                    while (Class) {
	                        var opt = Class.prototype.defaultOption;
	                        opt && optList.push(opt);
	                        Class = Class.superClass;
	                    }
	                    var defaultOption = {};
	                    for (var i = optList.length - 1; i >= 0; i--) {
	                        defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	                    }
	                    this.__defaultOption = defaultOption;
	                }
	                return this.__defaultOption;
	            }
	        });
	    // Reset ComponentModel.extend, add preConstruct.
	    // clazzUtil.enableClassExtend(
	    //     ComponentModel,
	    //     function (option, parentModel, ecModel, extraOpt) {
	    //         // Set dependentModels, componentIndex, name, id, mainType, subType.
	    //         zrUtil.extend(this, extraOpt);
	    //         this.uid = componentUtil.getUID('componentModel');
	    //         // this.setReadOnly([
	    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	    //         //     'dependentModels', 'componentIndex'
	    //         // ]);
	    //     }
	    // );
	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(ComponentModel, { registerWhenExtend: true });
	    componentUtil.enableSubTypeDefaulter(ComponentModel);
	    // Add capability of ComponentModel.topologicalTravel.
	    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);
	    function getDependencies(componentType) {
	        var deps = [];
	        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	            arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	        });
	        // Ensure main type
	        return zrUtil.map(deps, function (type) {
	            return clazzUtil.parseClassType(type).main;
	        });
	    }
	    zrUtil.mixin(ComponentModel, require('./mixin/boxLayout'));
	    return ComponentModel;
	});
	define('echarts/view/Component', ['require', 'zrender/container/Group', '../util/component', '../util/clazz'], function (require) {
	    var Group = require('zrender/container/Group');
	    var componentUtil = require('../util/component');
	    var clazzUtil = require('../util/clazz');
	    var Component = function () {
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewComponent');
	    };
	    Component.prototype = {
	        constructor: Component,
	        init: function (ecModel, api) {
	        },
	        render: function (componentModel, ecModel, api, payload) {
	        },
	        dispose: function () {
	        }
	    };
	    var componentProto = Component.prototype;
	    componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	    };
	    // Enable Component.extend.
	    clazzUtil.enableClassExtend(Component);
	    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Component, { registerWhenExtend: true });
	    return Component;
	});
	define('echarts/view/Chart', ['require', 'zrender/container/Group', '../util/component', '../util/clazz'], function (require) {
	    var Group = require('zrender/container/Group');
	    var componentUtil = require('../util/component');
	    var clazzUtil = require('../util/clazz');
	    function Chart() {
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewChart');
	    }
	    Chart.prototype = {
	        type: 'chart',
	        init: function (ecModel, api) {
	        },
	        render: function (seriesModel, ecModel, api, payload) {
	        },
	        highlight: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	        },
	        downplay: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'normal');
	        },
	        remove: function (ecModel, api) {
	            this.group.removeAll();
	        },
	        dispose: function () {
	        }
	    };
	    var chartProto = Chart.prototype;
	    chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	        this.render(seriesModel, ecModel, api, payload);
	    };
	    /**
	     * Set state of single element
	     * @param  {module:zrender/Element} el
	     * @param  {string} state
	     */
	    function elSetState(el, state) {
	        if (el) {
	            el.trigger(state);
	            if (el.type === 'group') {
	                for (var i = 0; i < el.childCount(); i++) {
	                    elSetState(el.childAt(i), state);
	                }
	            }
	        }
	    }
	    /**
	     * @param  {module:echarts/data/List} data
	     * @param  {Object} payload
	     * @param  {string} state 'normal'|'emphasis'
	     * @inner
	     */
	    function toggleHighlight(data, payload, state) {
	        var dataIndex = payload && payload.dataIndex;
	        var name = payload && payload.name;
	        if (dataIndex != null) {
	            var dataIndices = dataIndex instanceof Array ? dataIndex : [dataIndex];
	            for (var i = 0, len = dataIndices.length; i < len; i++) {
	                elSetState(data.getItemGraphicEl(dataIndices[i]), state);
	            }
	        } else if (name) {
	            var names = name instanceof Array ? name : [name];
	            for (var i = 0, len = names.length; i < len; i++) {
	                var dataIndex = data.indexOfName(names[i]);
	                elSetState(data.getItemGraphicEl(dataIndex), state);
	            }
	        } else {
	            data.eachItemGraphicEl(function (el) {
	                elSetState(el, state);
	            });
	        }
	    }
	    // Enable Chart.extend.
	    clazzUtil.enableClassExtend(Chart);
	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Chart, { registerWhenExtend: true });
	    return Chart;
	});
	define('zrender/zrender', ['require', './core/guid', './core/env', './Handler', './Storage', './animation/Animation', './dom/HandlerProxy', './Painter'], function (require) {
	    var guid = require('./core/guid');
	    var env = require('./core/env');
	    var Handler = require('./Handler');
	    var Storage = require('./Storage');
	    var Animation = require('./animation/Animation');
	    var HandlerProxy = require('./dom/HandlerProxy');
	    var useVML = !env.canvasSupported;
	    var painterCtors = { canvas: require('./Painter') };
	    var instances = {};
	    // ZRender实例map索引
	    var zrender = {};
	    /**
	     * @type {string}
	     */
	    zrender.version = '3.1.2';
	    /**
	     * Initializing a zrender instance
	     * @param {HTMLElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @return {module:zrender/ZRender}
	     */
	    zrender.init = function (dom, opts) {
	        var zr = new ZRender(guid(), dom, opts);
	        instances[zr.id] = zr;
	        return zr;
	    };
	    /**
	     * Dispose zrender instance
	     * @param {module:zrender/ZRender} zr
	     */
	    zrender.dispose = function (zr) {
	        if (zr) {
	            zr.dispose();
	        } else {
	            for (var key in instances) {
	                instances[key].dispose();
	            }
	            instances = {};
	        }
	        return zrender;
	    };
	    /**
	     * Get zrender instance by id
	     * @param {string} id zrender instance id
	     * @return {module:zrender/ZRender}
	     */
	    zrender.getInstance = function (id) {
	        return instances[id];
	    };
	    zrender.registerPainter = function (name, Ctor) {
	        painterCtors[name] = Ctor;
	    };
	    function delInstance(id) {
	        delete instances[id];
	    }
	    /**
	     * @module zrender/ZRender
	     */
	    /**
	     * @constructor
	     * @alias module:zrender/ZRender
	     * @param {string} id
	     * @param {HTMLDomElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     */
	    var ZRender = function (id, dom, opts) {
	        opts = opts || {};
	        /**
	         * @type {HTMLDomElement}
	         */
	        this.dom = dom;
	        /**
	         * @type {string}
	         */
	        this.id = id;
	        var self = this;
	        var storage = new Storage();
	        var rendererType = opts.renderer;
	        if (useVML) {
	            if (!painterCtors.vml) {
	                throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	            }
	            rendererType = 'vml';
	        } else if (!rendererType || !painterCtors[rendererType]) {
	            rendererType = 'canvas';
	        }
	        var painter = new painterCtors[rendererType](dom, storage, opts);
	        this.storage = storage;
	        this.painter = painter;
	        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;
	        this.handler = new Handler(storage, painter, handerProxy);
	        /**
	         * @type {module:zrender/animation/Animation}
	         */
	        this.animation = new Animation({
	            stage: {
	                update: function () {
	                    if (self._needsRefresh) {
	                        self.refreshImmediately();
	                    }
	                    if (self._needsRefreshHover) {
	                        self.refreshHoverImmediately();
	                    }
	                }
	            }
	        });
	        this.animation.start();
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._needsRefresh;
	        // 修改 storage.delFromMap, 每次删除元素之前删除动画
	        // FIXME 有点ugly
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;
	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);
	            oldDelFromMap.call(storage, elId);
	            el && el.removeSelfFromZr(self);
	        };
	        storage.addToMap = function (el) {
	            oldAddToMap.call(storage, el);
	            el.addSelfToZr(self);
	        };
	    };
	    ZRender.prototype = {
	        constructor: ZRender,
	        getId: function () {
	            return this.id;
	        },
	        add: function (el) {
	            this.storage.addRoot(el);
	            this._needsRefresh = true;
	        },
	        remove: function (el) {
	            this.storage.delRoot(el);
	            this._needsRefresh = true;
	        },
	        configLayer: function (zLevel, config) {
	            this.painter.configLayer(zLevel, config);
	            this._needsRefresh = true;
	        },
	        refreshImmediately: function () {
	            // Clear needsRefresh ahead to avoid something wrong happens in refresh
	            // Or it will cause zrender refreshes again and again.
	            this._needsRefresh = false;
	            this.painter.refresh();
	            /**
	             * Avoid trigger zr.refresh in Element#beforeUpdate hook
	             */
	            this._needsRefresh = false;
	        },
	        refresh: function () {
	            this._needsRefresh = true;
	        },
	        addHover: function (el, style) {
	            if (this.painter.addHover) {
	                this.painter.addHover(el, style);
	                this.refreshHover();
	            }
	        },
	        removeHover: function (el) {
	            if (this.painter.removeHover) {
	                this.painter.removeHover(el);
	                this.refreshHover();
	            }
	        },
	        clearHover: function () {
	            if (this.painter.clearHover) {
	                this.painter.clearHover();
	                this.refreshHover();
	            }
	        },
	        refreshHover: function () {
	            this._needsRefreshHover = true;
	        },
	        refreshHoverImmediately: function () {
	            this._needsRefreshHover = false;
	            this.painter.refreshHover && this.painter.refreshHover();
	        },
	        resize: function () {
	            this.painter.resize();
	            this.handler.resize();
	        },
	        clearAnimation: function () {
	            this.animation.clear();
	        },
	        getWidth: function () {
	            return this.painter.getWidth();
	        },
	        getHeight: function () {
	            return this.painter.getHeight();
	        },
	        pathToImage: function (e, width, height) {
	            var id = guid();
	            return this.painter.pathToImage(id, e, width, height);
	        },
	        setCursorStyle: function (cursorStyle) {
	            this.handler.setCursorStyle(cursorStyle);
	        },
	        on: function (eventName, eventHandler, context) {
	            this.handler.on(eventName, eventHandler, context);
	        },
	        off: function (eventName, eventHandler) {
	            this.handler.off(eventName, eventHandler);
	        },
	        trigger: function (eventName, event) {
	            this.handler.trigger(eventName, event);
	        },
	        clear: function () {
	            this.storage.delRoot();
	            this.painter.clear();
	        },
	        dispose: function () {
	            this.animation.stop();
	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler.dispose();
	            this.animation = this.storage = this.painter = this.handler = null;
	            delInstance(this.id);
	        }
	    };
	    return zrender;
	});
	define('zrender/mixin/Eventful', ['require'], function (require) {
	    var arrySlice = Array.prototype.slice;
	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._$handlers = {};
	    };
	    Eventful.prototype = {
	        constructor: Eventful,
	        one: function (event, handler, context) {
	            var _h = this._$handlers;
	            if (!handler || !event) {
	                return this;
	            }
	            if (!_h[event]) {
	                _h[event] = [];
	            }
	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }
	            _h[event].push({
	                h: handler,
	                one: true,
	                ctx: context || this
	            });
	            return this;
	        },
	        on: function (event, handler, context) {
	            var _h = this._$handlers;
	            if (!handler || !event) {
	                return this;
	            }
	            if (!_h[event]) {
	                _h[event] = [];
	            }
	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }
	            _h[event].push({
	                h: handler,
	                one: false,
	                ctx: context || this
	            });
	            return this;
	        },
	        isSilent: function (event) {
	            var _h = this._$handlers;
	            return _h[event] && _h[event].length;
	        },
	        off: function (event, handler) {
	            var _h = this._$handlers;
	            if (!event) {
	                this._$handlers = {};
	                return this;
	            }
	            if (handler) {
	                if (_h[event]) {
	                    var newList = [];
	                    for (var i = 0, l = _h[event].length; i < l; i++) {
	                        if (_h[event][i]['h'] != handler) {
	                            newList.push(_h[event][i]);
	                        }
	                    }
	                    _h[event] = newList;
	                }
	                if (_h[event] && _h[event].length === 0) {
	                    delete _h[event];
	                }
	            } else {
	                delete _h[event];
	            }
	            return this;
	        },
	        trigger: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;
	                if (argLen > 3) {
	                    args = arrySlice.call(args, 1);
	                }
	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(_h[i]['ctx']);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(_h[i]['ctx'], args);
	                        break;
	                    }
	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    } else {
	                        i++;
	                    }
	                }
	            }
	            return this;
	        },
	        triggerWithContext: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;
	                if (argLen > 4) {
	                    args = arrySlice.call(args, 1, args.length - 1);
	                }
	                var ctx = args[args.length - 1];
	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(ctx);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(ctx, args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(ctx, args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(ctx, args);
	                        break;
	                    }
	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    } else {
	                        i++;
	                    }
	                }
	            }
	            return this;
	        }
	    };
	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */
	    return Eventful;
	});
	define('zrender/tool/color', ['require'], function (require) {
	    var kCSSColorTable = {
	            'transparent': [
	                0,
	                0,
	                0,
	                0
	            ],
	            'aliceblue': [
	                240,
	                248,
	                255,
	                1
	            ],
	            'antiquewhite': [
	                250,
	                235,
	                215,
	                1
	            ],
	            'aqua': [
	                0,
	                255,
	                255,
	                1
	            ],
	            'aquamarine': [
	                127,
	                255,
	                212,
	                1
	            ],
	            'azure': [
	                240,
	                255,
	                255,
	                1
	            ],
	            'beige': [
	                245,
	                245,
	                220,
	                1
	            ],
	            'bisque': [
	                255,
	                228,
	                196,
	                1
	            ],
	            'black': [
	                0,
	                0,
	                0,
	                1
	            ],
	            'blanchedalmond': [
	                255,
	                235,
	                205,
	                1
	            ],
	            'blue': [
	                0,
	                0,
	                255,
	                1
	            ],
	            'blueviolet': [
	                138,
	                43,
	                226,
	                1
	            ],
	            'brown': [
	                165,
	                42,
	                42,
	                1
	            ],
	            'burlywood': [
	                222,
	                184,
	                135,
	                1
	            ],
	            'cadetblue': [
	                95,
	                158,
	                160,
	                1
	            ],
	            'chartreuse': [
	                127,
	                255,
	                0,
	                1
	            ],
	            'chocolate': [
	                210,
	                105,
	                30,
	                1
	            ],
	            'coral': [
	                255,
	                127,
	                80,
	                1
	            ],
	            'cornflowerblue': [
	                100,
	                149,
	                237,
	                1
	            ],
	            'cornsilk': [
	                255,
	                248,
	                220,
	                1
	            ],
	            'crimson': [
	                220,
	                20,
	                60,
	                1
	            ],
	            'cyan': [
	                0,
	                255,
	                255,
	                1
	            ],
	            'darkblue': [
	                0,
	                0,
	                139,
	                1
	            ],
	            'darkcyan': [
	                0,
	                139,
	                139,
	                1
	            ],
	            'darkgoldenrod': [
	                184,
	                134,
	                11,
	                1
	            ],
	            'darkgray': [
	                169,
	                169,
	                169,
	                1
	            ],
	            'darkgreen': [
	                0,
	                100,
	                0,
	                1
	            ],
	            'darkgrey': [
	                169,
	                169,
	                169,
	                1
	            ],
	            'darkkhaki': [
	                189,
	                183,
	                107,
	                1
	            ],
	            'darkmagenta': [
	                139,
	                0,
	                139,
	                1
	            ],
	            'darkolivegreen': [
	                85,
	                107,
	                47,
	                1
	            ],
	            'darkorange': [
	                255,
	                140,
	                0,
	                1
	            ],
	            'darkorchid': [
	                153,
	                50,
	                204,
	                1
	            ],
	            'darkred': [
	                139,
	                0,
	                0,
	                1
	            ],
	            'darksalmon': [
	                233,
	                150,
	                122,
	                1
	            ],
	            'darkseagreen': [
	                143,
	                188,
	                143,
	                1
	            ],
	            'darkslateblue': [
	                72,
	                61,
	                139,
	                1
	            ],
	            'darkslategray': [
	                47,
	                79,
	                79,
	                1
	            ],
	            'darkslategrey': [
	                47,
	                79,
	                79,
	                1
	            ],
	            'darkturquoise': [
	                0,
	                206,
	                209,
	                1
	            ],
	            'darkviolet': [
	                148,
	                0,
	                211,
	                1
	            ],
	            'deeppink': [
	                255,
	                20,
	                147,
	                1
	            ],
	            'deepskyblue': [
	                0,
	                191,
	                255,
	                1
	            ],
	            'dimgray': [
	                105,
	                105,
	                105,
	                1
	            ],
	            'dimgrey': [
	                105,
	                105,
	                105,
	                1
	            ],
	            'dodgerblue': [
	                30,
	                144,
	                255,
	                1
	            ],
	            'firebrick': [
	                178,
	                34,
	                34,
	                1
	            ],
	            'floralwhite': [
	                255,
	                250,
	                240,
	                1
	            ],
	            'forestgreen': [
	                34,
	                139,
	                34,
	                1
	            ],
	            'fuchsia': [
	                255,
	                0,
	                255,
	                1
	            ],
	            'gainsboro': [
	                220,
	                220,
	                220,
	                1
	            ],
	            'ghostwhite': [
	                248,
	                248,
	                255,
	                1
	            ],
	            'gold': [
	                255,
	                215,
	                0,
	                1
	            ],
	            'goldenrod': [
	                218,
	                165,
	                32,
	                1
	            ],
	            'gray': [
	                128,
	                128,
	                128,
	                1
	            ],
	            'green': [
	                0,
	                128,
	                0,
	                1
	            ],
	            'greenyellow': [
	                173,
	                255,
	                47,
	                1
	            ],
	            'grey': [
	                128,
	                128,
	                128,
	                1
	            ],
	            'honeydew': [
	                240,
	                255,
	                240,
	                1
	            ],
	            'hotpink': [
	                255,
	                105,
	                180,
	                1
	            ],
	            'indianred': [
	                205,
	                92,
	                92,
	                1
	            ],
	            'indigo': [
	                75,
	                0,
	                130,
	                1
	            ],
	            'ivory': [
	                255,
	                255,
	                240,
	                1
	            ],
	            'khaki': [
	                240,
	                230,
	                140,
	                1
	            ],
	            'lavender': [
	                230,
	                230,
	                250,
	                1
	            ],
	            'lavenderblush': [
	                255,
	                240,
	                245,
	                1
	            ],
	            'lawngreen': [
	                124,
	                252,
	                0,
	                1
	            ],
	            'lemonchiffon': [
	                255,
	                250,
	                205,
	                1
	            ],
	            'lightblue': [
	                173,
	                216,
	                230,
	                1
	            ],
	            'lightcoral': [
	                240,
	                128,
	                128,
	                1
	            ],
	            'lightcyan': [
	                224,
	                255,
	                255,
	                1
	            ],
	            'lightgoldenrodyellow': [
	                250,
	                250,
	                210,
	                1
	            ],
	            'lightgray': [
	                211,
	                211,
	                211,
	                1
	            ],
	            'lightgreen': [
	                144,
	                238,
	                144,
	                1
	            ],
	            'lightgrey': [
	                211,
	                211,
	                211,
	                1
	            ],
	            'lightpink': [
	                255,
	                182,
	                193,
	                1
	            ],
	            'lightsalmon': [
	                255,
	                160,
	                122,
	                1
	            ],
	            'lightseagreen': [
	                32,
	                178,
	                170,
	                1
	            ],
	            'lightskyblue': [
	                135,
	                206,
	                250,
	                1
	            ],
	            'lightslategray': [
	                119,
	                136,
	                153,
	                1
	            ],
	            'lightslategrey': [
	                119,
	                136,
	                153,
	                1
	            ],
	            'lightsteelblue': [
	                176,
	                196,
	                222,
	                1
	            ],
	            'lightyellow': [
	                255,
	                255,
	                224,
	                1
	            ],
	            'lime': [
	                0,
	                255,
	                0,
	                1
	            ],
	            'limegreen': [
	                50,
	                205,
	                50,
	                1
	            ],
	            'linen': [
	                250,
	                240,
	                230,
	                1
	            ],
	            'magenta': [
	                255,
	                0,
	                255,
	                1
	            ],
	            'maroon': [
	                128,
	                0,
	                0,
	                1
	            ],
	            'mediumaquamarine': [
	                102,
	                205,
	                170,
	                1
	            ],
	            'mediumblue': [
	                0,
	                0,
	                205,
	                1
	            ],
	            'mediumorchid': [
	                186,
	                85,
	                211,
	                1
	            ],
	            'mediumpurple': [
	                147,
	                112,
	                219,
	                1
	            ],
	            'mediumseagreen': [
	                60,
	                179,
	                113,
	                1
	            ],
	            'mediumslateblue': [
	                123,
	                104,
	                238,
	                1
	            ],
	            'mediumspringgreen': [
	                0,
	                250,
	                154,
	                1
	            ],
	            'mediumturquoise': [
	                72,
	                209,
	                204,
	                1
	            ],
	            'mediumvioletred': [
	                199,
	                21,
	                133,
	                1
	            ],
	            'midnightblue': [
	                25,
	                25,
	                112,
	                1
	            ],
	            'mintcream': [
	                245,
	                255,
	                250,
	                1
	            ],
	            'mistyrose': [
	                255,
	                228,
	                225,
	                1
	            ],
	            'moccasin': [
	                255,
	                228,
	                181,
	                1
	            ],
	            'navajowhite': [
	                255,
	                222,
	                173,
	                1
	            ],
	            'navy': [
	                0,
	                0,
	                128,
	                1
	            ],
	            'oldlace': [
	                253,
	                245,
	                230,
	                1
	            ],
	            'olive': [
	                128,
	                128,
	                0,
	                1
	            ],
	            'olivedrab': [
	                107,
	                142,
	                35,
	                1
	            ],
	            'orange': [
	                255,
	                165,
	                0,
	                1
	            ],
	            'orangered': [
	                255,
	                69,
	                0,
	                1
	            ],
	            'orchid': [
	                218,
	                112,
	                214,
	                1
	            ],
	            'palegoldenrod': [
	                238,
	                232,
	                170,
	                1
	            ],
	            'palegreen': [
	                152,
	                251,
	                152,
	                1
	            ],
	            'paleturquoise': [
	                175,
	                238,
	                238,
	                1
	            ],
	            'palevioletred': [
	                219,
	                112,
	                147,
	                1
	            ],
	            'papayawhip': [
	                255,
	                239,
	                213,
	                1
	            ],
	            'peachpuff': [
	                255,
	                218,
	                185,
	                1
	            ],
	            'peru': [
	                205,
	                133,
	                63,
	                1
	            ],
	            'pink': [
	                255,
	                192,
	                203,
	                1
	            ],
	            'plum': [
	                221,
	                160,
	                221,
	                1
	            ],
	            'powderblue': [
	                176,
	                224,
	                230,
	                1
	            ],
	            'purple': [
	                128,
	                0,
	                128,
	                1
	            ],
	            'red': [
	                255,
	                0,
	                0,
	                1
	            ],
	            'rosybrown': [
	                188,
	                143,
	                143,
	                1
	            ],
	            'royalblue': [
	                65,
	                105,
	                225,
	                1
	            ],
	            'saddlebrown': [
	                139,
	                69,
	                19,
	                1
	            ],
	            'salmon': [
	                250,
	                128,
	                114,
	                1
	            ],
	            'sandybrown': [
	                244,
	                164,
	                96,
	                1
	            ],
	            'seagreen': [
	                46,
	                139,
	                87,
	                1
	            ],
	            'seashell': [
	                255,
	                245,
	                238,
	                1
	            ],
	            'sienna': [
	                160,
	                82,
	                45,
	                1
	            ],
	            'silver': [
	                192,
	                192,
	                192,
	                1
	            ],
	            'skyblue': [
	                135,
	                206,
	                235,
	                1
	            ],
	            'slateblue': [
	                106,
	                90,
	                205,
	                1
	            ],
	            'slategray': [
	                112,
	                128,
	                144,
	                1
	            ],
	            'slategrey': [
	                112,
	                128,
	                144,
	                1
	            ],
	            'snow': [
	                255,
	                250,
	                250,
	                1
	            ],
	            'springgreen': [
	                0,
	                255,
	                127,
	                1
	            ],
	            'steelblue': [
	                70,
	                130,
	                180,
	                1
	            ],
	            'tan': [
	                210,
	                180,
	                140,
	                1
	            ],
	            'teal': [
	                0,
	                128,
	                128,
	                1
	            ],
	            'thistle': [
	                216,
	                191,
	                216,
	                1
	            ],
	            'tomato': [
	                255,
	                99,
	                71,
	                1
	            ],
	            'turquoise': [
	                64,
	                224,
	                208,
	                1
	            ],
	            'violet': [
	                238,
	                130,
	                238,
	                1
	            ],
	            'wheat': [
	                245,
	                222,
	                179,
	                1
	            ],
	            'white': [
	                255,
	                255,
	                255,
	                1
	            ],
	            'whitesmoke': [
	                245,
	                245,
	                245,
	                1
	            ],
	            'yellow': [
	                255,
	                255,
	                0,
	                1
	            ],
	            'yellowgreen': [
	                154,
	                205,
	                50,
	                1
	            ]
	        };
	    function clampCssByte(i) {
	        // Clamp to integer 0 .. 255.
	        i = Math.round(i);
	        // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 255 ? 255 : i;
	    }
	    function clampCssAngle(i) {
	        // Clamp to integer 0 .. 360.
	        i = Math.round(i);
	        // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 360 ? 360 : i;
	    }
	    function clampCssFloat(f) {
	        // Clamp to float 0.0 .. 1.0.
	        return f < 0 ? 0 : f > 1 ? 1 : f;
	    }
	    function parseCssInt(str) {
	        // int or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssByte(parseFloat(str) / 100 * 255);
	        }
	        return clampCssByte(parseInt(str, 10));
	    }
	    function parseCssFloat(str) {
	        // float or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssFloat(parseFloat(str) / 100);
	        }
	        return clampCssFloat(parseFloat(str));
	    }
	    function cssHueToRgb(m1, m2, h) {
	        if (h < 0) {
	            h += 1;
	        } else if (h > 1) {
	            h -= 1;
	        }
	        if (h * 6 < 1) {
	            return m1 + (m2 - m1) * h * 6;
	        }
	        if (h * 2 < 1) {
	            return m2;
	        }
	        if (h * 3 < 2) {
	            return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	        }
	        return m1;
	    }
	    function lerp(a, b, p) {
	        return a + (b - a) * p;
	    }
	    /**
	     * @param {string} colorStr
	     * @return {Array.<number>}
	     * @memberOf module:zrender/util/color
	     */
	    function parse(colorStr) {
	        if (!colorStr) {
	            return;
	        }
	        // colorStr may be not string
	        colorStr = colorStr + '';
	        // Remove all whitespace, not compliant, but should just be more accepting.
	        var str = colorStr.replace(/ /g, '').toLowerCase();
	        // Color keywords (and transparent) lookup.
	        if (str in kCSSColorTable) {
	            return kCSSColorTable[str].slice();    // dup.
	        }
	        // #abc and #abc123 syntax.
	        if (str.charAt(0) === '#') {
	            if (str.length === 4) {
	                var iv = parseInt(str.substr(1), 16);
	                // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 4095)) {
	                    return;    // Covers NaN.
	                }
	                return [
	                    (iv & 3840) >> 4 | (iv & 3840) >> 8,
	                    iv & 240 | (iv & 240) >> 4,
	                    iv & 15 | (iv & 15) << 4,
	                    1
	                ];
	            } else if (str.length === 7) {
	                var iv = parseInt(str.substr(1), 16);
	                // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 16777215)) {
	                    return;    // Covers NaN.
	                }
	                return [
	                    (iv & 16711680) >> 16,
	                    (iv & 65280) >> 8,
	                    iv & 255,
	                    1
	                ];
	            }
	            return;
	        }
	        var op = str.indexOf('('), ep = str.indexOf(')');
	        if (op !== -1 && ep + 1 === str.length) {
	            var fname = str.substr(0, op);
	            var params = str.substr(op + 1, ep - (op + 1)).split(',');
	            var alpha = 1;
	            // To allow case fallthrough.
	            switch (fname) {
	            case 'rgba':
	                if (params.length !== 4) {
	                    return;
	                }
	                alpha = parseCssFloat(params.pop());
	            // jshint ignore:line
	            // Fall through.
	            case 'rgb':
	                if (params.length !== 3) {
	                    return;
	                }
	                return [
	                    parseCssInt(params[0]),
	                    parseCssInt(params[1]),
	                    parseCssInt(params[2]),
	                    alpha
	                ];
	            case 'hsla':
	                if (params.length !== 4) {
	                    return;
	                }
	                params[3] = parseCssFloat(params[3]);
	                return hsla2rgba(params);
	            case 'hsl':
	                if (params.length !== 3) {
	                    return;
	                }
	                return hsla2rgba(params);
	            default:
	                return;
	            }
	        }
	        return;
	    }
	    /**
	     * @param {Array.<number>} hsla
	     * @return {Array.<number>} rgba
	     */
	    function hsla2rgba(hsla) {
	        var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360;
	        // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parseCssFloat(hsla[1]);
	        var l = parseCssFloat(hsla[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;
	        var rgba = [
	                clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
	                clampCssByte(cssHueToRgb(m1, m2, h) * 255),
	                clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)
	            ];
	        if (hsla.length === 4) {
	            rgba[3] = hsla[3];
	        }
	        return rgba;
	    }
	    /**
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} hsla
	     */
	    function rgba2hsla(rgba) {
	        if (!rgba) {
	            return;
	        }
	        // RGB from 0 to 255
	        var R = rgba[0] / 255;
	        var G = rgba[1] / 255;
	        var B = rgba[2] / 255;
	        var vMin = Math.min(R, G, B);
	        // Min. value of RGB
	        var vMax = Math.max(R, G, B);
	        // Max. value of RGB
	        var delta = vMax - vMin;
	        // Delta RGB value
	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        } else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            } else {
	                S = delta / (2 - vMax - vMin);
	            }
	            var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	            var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	            var deltaB = ((vMax - B) / 6 + delta / 2) / delta;
	            if (R === vMax) {
	                H = deltaB - deltaG;
	            } else if (G === vMax) {
	                H = 1 / 3 + deltaR - deltaB;
	            } else if (B === vMax) {
	                H = 2 / 3 + deltaG - deltaR;
	            }
	            if (H < 0) {
	                H += 1;
	            }
	            if (H > 1) {
	                H -= 1;
	            }
	        }
	        var hsla = [
	                H * 360,
	                S,
	                L
	            ];
	        if (rgba[3] != null) {
	            hsla.push(rgba[3]);
	        }
	        return hsla;
	    }
	    /**
	     * @param {string} color
	     * @param {number} level
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function lift(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            for (var i = 0; i < 3; i++) {
	                if (level < 0) {
	                    colorArr[i] = colorArr[i] * (1 - level) | 0;
	                } else {
	                    colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	                }
	            }
	            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	        }
	    }
	    /**
	     * @param {string} color
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function toHex(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	        }
	    }
	    /**
	     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<Array.<number>>} colors List of rgba color array
	     * @param {Array.<number>} [out] Mapped gba color array
	     * @return {Array.<number>}
	     */
	    function fastMapToColor(normalizedValue, colors, out) {
	        if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	            return;
	        }
	        out = out || [
	            0,
	            0,
	            0,
	            0
	        ];
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = colors[leftIndex];
	        var rightColor = colors[rightIndex];
	        var dv = value - leftIndex;
	        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	        return out;
	    }
	    /**
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<string>} colors Color list.
	     * @param {boolean=} fullOutput Default false.
	     * @return {(string|Object)} Result color. If fullOutput,
	     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	     * @memberOf module:zrender/util/color
	     */
	    function mapToColor(normalizedValue, colors, fullOutput) {
	        if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	            return;
	        }
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = parse(colors[leftIndex]);
	        var rightColor = parse(colors[rightIndex]);
	        var dv = value - leftIndex;
	        var color = stringify([
	                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
	                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
	                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
	                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
	            ], 'rgba');
	        return fullOutput ? {
	            color: color,
	            leftIndex: leftIndex,
	            rightIndex: rightIndex,
	            value: value
	        } : color;
	    }
	    /**
	     * @param {string} color
	     * @param {number=} h 0 ~ 360, ignore when null.
	     * @param {number=} s 0 ~ 1, ignore when null.
	     * @param {number=} l 0 ~ 1, ignore when null.
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyHSL(color, h, s, l) {
	        color = parse(color);
	        if (color) {
	            color = rgba2hsla(color);
	            h != null && (color[0] = clampCssAngle(h));
	            s != null && (color[1] = parseCssFloat(s));
	            l != null && (color[2] = parseCssFloat(l));
	            return stringify(hsla2rgba(color), 'rgba');
	        }
	    }
	    /**
	     * @param {string} color
	     * @param {number=} alpha 0 ~ 1
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyAlpha(color, alpha) {
	        color = parse(color);
	        if (color && alpha != null) {
	            color[3] = clampCssFloat(alpha);
	            return stringify(color, 'rgba');
	        }
	    }
	    /**
	     * @param {Array.<string>} colors Color list.
	     * @param {string} type 'rgba', 'hsva', ...
	     * @return {string} Result color.
	     */
	    function stringify(arrColor, type) {
	        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	            colorStr += ',' + arrColor[3];
	        }
	        return type + '(' + colorStr + ')';
	    }
	    return {
	        parse: parse,
	        lift: lift,
	        toHex: toHex,
	        fastMapToColor: fastMapToColor,
	        mapToColor: mapToColor,
	        modifyHSL: modifyHSL,
	        modifyAlpha: modifyAlpha,
	        stringify: stringify
	    };
	});
	define('zrender/core/timsort', [], function () {
	    var DEFAULT_MIN_MERGE = 32;
	    var DEFAULT_MIN_GALLOPING = 7;
	    var DEFAULT_TMP_STORAGE_LENGTH = 256;
	    function minRunLength(n) {
	        var r = 0;
	        while (n >= DEFAULT_MIN_MERGE) {
	            r |= n & 1;
	            n >>= 1;
	        }
	        return n + r;
	    }
	    function makeAscendingRun(array, lo, hi, compare) {
	        var runHi = lo + 1;
	        if (runHi === hi) {
	            return 1;
	        }
	        if (compare(array[runHi++], array[lo]) < 0) {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	                runHi++;
	            }
	            reverseRun(array, lo, runHi);
	        } else {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	                runHi++;
	            }
	        }
	        return runHi - lo;
	    }
	    function reverseRun(array, lo, hi) {
	        hi--;
	        while (lo < hi) {
	            var t = array[lo];
	            array[lo++] = array[hi];
	            array[hi--] = t;
	        }
	    }
	    function binaryInsertionSort(array, lo, hi, start, compare) {
	        if (start === lo) {
	            start++;
	        }
	        for (; start < hi; start++) {
	            var pivot = array[start];
	            var left = lo;
	            var right = start;
	            var mid;
	            while (left < right) {
	                mid = left + right >>> 1;
	                if (compare(pivot, array[mid]) < 0) {
	                    right = mid;
	                } else {
	                    left = mid + 1;
	                }
	            }
	            var n = start - left;
	            switch (n) {
	            case 3:
	                array[left + 3] = array[left + 2];
	            case 2:
	                array[left + 2] = array[left + 1];
	            case 1:
	                array[left + 1] = array[left];
	                break;
	            default:
	                while (n > 0) {
	                    array[left + n] = array[left + n - 1];
	                    n--;
	                }
	            }
	            array[left] = pivot;
	        }
	    }
	    function gallopLeft(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;
	        if (compare(value, array[start + hint]) > 0) {
	            maxOffset = length - hint;
	            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	            lastOffset += hint;
	            offset += hint;
	        } else {
	            maxOffset = hint + 1;
	            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        }
	        lastOffset++;
	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);
	            if (compare(value, array[start + m]) > 0) {
	                lastOffset = m + 1;
	            } else {
	                offset = m;
	            }
	        }
	        return offset;
	    }
	    function gallopRight(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;
	        if (compare(value, array[start + hint]) < 0) {
	            maxOffset = hint + 1;
	            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        } else {
	            maxOffset = length - hint;
	            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	            lastOffset += hint;
	            offset += hint;
	        }
	        lastOffset++;
	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);
	            if (compare(value, array[start + m]) < 0) {
	                offset = m;
	            } else {
	                lastOffset = m + 1;
	            }
	        }
	        return offset;
	    }
	    function TimSort(array, compare) {
	        var minGallop = DEFAULT_MIN_GALLOPING;
	        var length = 0;
	        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	        var stackLength = 0;
	        var runStart;
	        var runLength;
	        var stackSize = 0;
	        length = array.length;
	        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	            tmpStorageLength = length >>> 1;
	        }
	        var tmp = [];
	        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;
	        runStart = [];
	        runLength = [];
	        function pushRun(_runStart, _runLength) {
	            runStart[stackSize] = _runStart;
	            runLength[stackSize] = _runLength;
	            stackSize += 1;
	        }
	        function mergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;
	                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	                    if (runLength[n - 1] < runLength[n + 1]) {
	                        n--;
	                    }
	                } else if (runLength[n] > runLength[n + 1]) {
	                    break;
	                }
	                mergeAt(n);
	            }
	        }
	        function forceMergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;
	                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	                    n--;
	                }
	                mergeAt(n);
	            }
	        }
	        function mergeAt(i) {
	            var start1 = runStart[i];
	            var length1 = runLength[i];
	            var start2 = runStart[i + 1];
	            var length2 = runLength[i + 1];
	            runLength[i] = length1 + length2;
	            if (i === stackSize - 3) {
	                runStart[i + 1] = runStart[i + 2];
	                runLength[i + 1] = runLength[i + 2];
	            }
	            stackSize--;
	            var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	            start1 += k;
	            length1 -= k;
	            if (length1 === 0) {
	                return;
	            }
	            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
	            if (length2 === 0) {
	                return;
	            }
	            if (length1 <= length2) {
	                mergeLow(start1, length1, start2, length2);
	            } else {
	                mergeHigh(start1, length1, start2, length2);
	            }
	        }
	        function mergeLow(start1, length1, start2, length2) {
	            var i = 0;
	            for (i = 0; i < length1; i++) {
	                tmp[i] = array[start1 + i];
	            }
	            var cursor1 = 0;
	            var cursor2 = start2;
	            var dest = start1;
	            array[dest++] = array[cursor2++];
	            if (--length2 === 0) {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	                return;
	            }
	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	                return;
	            }
	            var _minGallop = minGallop;
	            var count1, count2, exit;
	            while (1) {
	                count1 = 0;
	                count2 = 0;
	                exit = false;
	                do {
	                    if (compare(array[cursor2], tmp[cursor1]) < 0) {
	                        array[dest++] = array[cursor2++];
	                        count2++;
	                        count1 = 0;
	                        if (--length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    } else {
	                        array[dest++] = tmp[cursor1++];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);
	                if (exit) {
	                    break;
	                }
	                do {
	                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
	                    if (count1 !== 0) {
	                        for (i = 0; i < count1; i++) {
	                            array[dest + i] = tmp[cursor1 + i];
	                        }
	                        dest += count1;
	                        cursor1 += count1;
	                        length1 -= count1;
	                        if (length1 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest++] = array[cursor2++];
	                    if (--length2 === 0) {
	                        exit = true;
	                        break;
	                    }
	                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
	                    if (count2 !== 0) {
	                        for (i = 0; i < count2; i++) {
	                            array[dest + i] = array[cursor2 + i];
	                        }
	                        dest += count2;
	                        cursor2 += count2;
	                        length2 -= count2;
	                        if (length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest++] = tmp[cursor1++];
	                    if (--length1 === 1) {
	                        exit = true;
	                        break;
	                    }
	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	                if (exit) {
	                    break;
	                }
	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }
	                _minGallop += 2;
	            }
	            minGallop = _minGallop;
	            minGallop < 1 && (minGallop = 1);
	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	            } else if (length1 === 0) {
	                throw new Error();    // throw new Error('mergeLow preconditions were not respected');
	            } else {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	            }
	        }
	        function mergeHigh(start1, length1, start2, length2) {
	            var i = 0;
	            for (i = 0; i < length2; i++) {
	                tmp[i] = array[start2 + i];
	            }
	            var cursor1 = start1 + length1 - 1;
	            var cursor2 = length2 - 1;
	            var dest = start2 + length2 - 1;
	            var customCursor = 0;
	            var customDest = 0;
	            array[dest--] = array[cursor1--];
	            if (--length1 === 0) {
	                customCursor = dest - (length2 - 1);
	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }
	                return;
	            }
	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;
	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }
	                array[dest] = tmp[cursor2];
	                return;
	            }
	            var _minGallop = minGallop;
	            while (true) {
	                var count1 = 0;
	                var count2 = 0;
	                var exit = false;
	                do {
	                    if (compare(tmp[cursor2], array[cursor1]) < 0) {
	                        array[dest--] = array[cursor1--];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    } else {
	                        array[dest--] = tmp[cursor2--];
	                        count2++;
	                        count1 = 0;
	                        if (--length2 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);
	                if (exit) {
	                    break;
	                }
	                do {
	                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
	                    if (count1 !== 0) {
	                        dest -= count1;
	                        cursor1 -= count1;
	                        length1 -= count1;
	                        customDest = dest + 1;
	                        customCursor = cursor1 + 1;
	                        for (i = count1 - 1; i >= 0; i--) {
	                            array[customDest + i] = array[customCursor + i];
	                        }
	                        if (length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest--] = tmp[cursor2--];
	                    if (--length2 === 1) {
	                        exit = true;
	                        break;
	                    }
	                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
	                    if (count2 !== 0) {
	                        dest -= count2;
	                        cursor2 -= count2;
	                        length2 -= count2;
	                        customDest = dest + 1;
	                        customCursor = cursor2 + 1;
	                        for (i = 0; i < count2; i++) {
	                            array[customDest + i] = tmp[customCursor + i];
	                        }
	                        if (length2 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest--] = array[cursor1--];
	                    if (--length1 === 0) {
	                        exit = true;
	                        break;
	                    }
	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	                if (exit) {
	                    break;
	                }
	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }
	                _minGallop += 2;
	            }
	            minGallop = _minGallop;
	            if (minGallop < 1) {
	                minGallop = 1;
	            }
	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;
	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }
	                array[dest] = tmp[cursor2];
	            } else if (length2 === 0) {
	                throw new Error();    // throw new Error('mergeHigh preconditions were not respected');
	            } else {
	                customCursor = dest - (length2 - 1);
	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }
	            }
	        }
	        this.mergeRuns = mergeRuns;
	        this.forceMergeRuns = forceMergeRuns;
	        this.pushRun = pushRun;
	    }
	    function sort(array, compare, lo, hi) {
	        if (!lo) {
	            lo = 0;
	        }
	        if (!hi) {
	            hi = array.length;
	        }
	        var remaining = hi - lo;
	        if (remaining < 2) {
	            return;
	        }
	        var runLength = 0;
	        if (remaining < DEFAULT_MIN_MERGE) {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	            return;
	        }
	        var ts = new TimSort(array, compare);
	        var minRun = minRunLength(remaining);
	        do {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            if (runLength < minRun) {
	                var force = remaining;
	                if (force > minRun) {
	                    force = minRun;
	                }
	                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	                runLength = force;
	            }
	            ts.pushRun(lo, runLength);
	            ts.mergeRuns();
	            remaining -= runLength;
	            lo += runLength;
	        } while (remaining !== 0);
	        ts.forceMergeRuns();
	    }
	    return sort;
	});
	define('echarts/loading/default', ['require', '../util/graphic', 'zrender/core/util'], function (require) {
	    var graphic = require('../util/graphic');
	    var zrUtil = require('zrender/core/util');
	    var PI = Math.PI;
	    /**
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} [opts]
	     * @param {string} [opts.text]
	     * @param {string} [opts.color]
	     * @param {string} [opts.textColor]
	     * @return {module:zrender/Element}
	     */
	    return function (api, opts) {
	        opts = opts || {};
	        zrUtil.defaults(opts, {
	            text: 'loading',
	            color: '#c23531',
	            textColor: '#000',
	            maskColor: 'rgba(255, 255, 255, 0.8)',
	            zlevel: 0
	        });
	        var mask = new graphic.Rect({
	                style: { fill: opts.maskColor },
	                zlevel: opts.zlevel,
	                z: 10000
	            });
	        var arc = new graphic.Arc({
	                shape: {
	                    startAngle: -PI / 2,
	                    endAngle: -PI / 2 + 0.1,
	                    r: 10
	                },
	                style: {
	                    stroke: opts.color,
	                    lineCap: 'round',
	                    lineWidth: 5
	                },
	                zlevel: opts.zlevel,
	                z: 10001
	            });
	        var labelRect = new graphic.Rect({
	                style: {
	                    fill: 'none',
	                    text: opts.text,
	                    textPosition: 'right',
	                    textDistance: 10,
	                    textFill: opts.textColor
	                },
	                zlevel: opts.zlevel,
	                z: 10001
	            });
	        arc.animateShape(true).when(1000, { endAngle: PI * 3 / 2 }).start('circularInOut');
	        arc.animateShape(true).when(1000, { startAngle: PI * 3 / 2 }).delay(300).start('circularInOut');
	        var group = new graphic.Group();
	        group.add(arc);
	        group.add(labelRect);
	        group.add(mask);
	        // Inject resize
	        group.resize = function () {
	            var cx = api.getWidth() / 2;
	            var cy = api.getHeight() / 2;
	            arc.setShape({
	                cx: cx,
	                cy: cy
	            });
	            var r = arc.shape.r;
	            labelRect.setShape({
	                x: cx - r,
	                y: cy - r,
	                width: r * 2,
	                height: r * 2
	            });
	            mask.setShape({
	                x: 0,
	                y: 0,
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	        };
	        group.resize();
	        return group;
	    };
	});
	define('echarts/visual/seriesColor', ['require', 'zrender/graphic/Gradient'], function (require) {
	    var Gradient = require('zrender/graphic/Gradient');
	    return function (ecModel) {
	        function encodeColor(seriesModel) {
	            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');
	            var data = seriesModel.getData();
	            var color = seriesModel.get(colorAccessPath) || seriesModel.getColorFromPalette(seriesModel.get('name'));
	            // Default color
	            // FIXME Set color function or use the platte color
	            data.setVisual('color', color);
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof color === 'function' && !(color instanceof Gradient)) {
	                    data.each(function (idx) {
	                        data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	                    });
	                }
	                // itemStyle in each data item
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var color = itemModel.get(colorAccessPath, true);
	                    if (color != null) {
	                        data.setItemVisual(idx, 'color', color);
	                    }
	                });
	            }
	        }
	        ecModel.eachRawSeries(encodeColor);
	    };
	});
	define('echarts/preprocessor/backwardCompat', ['require', 'zrender/core/util', './helper/compatStyle'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var compatStyle = require('./helper/compatStyle');
	    function get(opt, path) {
	        path = path.split(',');
	        var obj = opt;
	        for (var i = 0; i < path.length; i++) {
	            obj = obj && obj[path[i]];
	            if (obj == null) {
	                break;
	            }
	        }
	        return obj;
	    }
	    function set(opt, path, val, overwrite) {
	        path = path.split(',');
	        var obj = opt;
	        var key;
	        for (var i = 0; i < path.length - 1; i++) {
	            key = path[i];
	            if (obj[key] == null) {
	                obj[key] = {};
	            }
	            obj = obj[key];
	        }
	        if (overwrite || obj[path[i]] == null) {
	            obj[path[i]] = val;
	        }
	    }
	    function compatLayoutProperties(option) {
	        each(LAYOUT_PROPERTIES, function (prop) {
	            if (prop[0] in option && !(prop[1] in option)) {
	                option[prop[1]] = option[prop[0]];
	            }
	        });
	    }
	    var LAYOUT_PROPERTIES = [
	            [
	                'x',
	                'left'
	            ],
	            [
	                'y',
	                'top'
	            ],
	            [
	                'x2',
	                'right'
	            ],
	            [
	                'y2',
	                'bottom'
	            ]
	        ];
	    var COMPATITABLE_COMPONENTS = [
	            'grid',
	            'geo',
	            'parallel',
	            'legend',
	            'toolbox',
	            'title',
	            'visualMap',
	            'dataZoom',
	            'timeline'
	        ];
	    var COMPATITABLE_SERIES = [
	            'bar',
	            'boxplot',
	            'candlestick',
	            'chord',
	            'effectScatter',
	            'funnel',
	            'gauge',
	            'lines',
	            'graph',
	            'heatmap',
	            'line',
	            'map',
	            'parallel',
	            'pie',
	            'radar',
	            'sankey',
	            'scatter',
	            'treemap'
	        ];
	    var each = zrUtil.each;
	    return function (option) {
	        each(option.series, function (seriesOpt) {
	            if (!zrUtil.isObject(seriesOpt)) {
	                return;
	            }
	            var seriesType = seriesOpt.type;
	            compatStyle(seriesOpt);
	            if (seriesType === 'pie' || seriesType === 'gauge') {
	                if (seriesOpt.clockWise != null) {
	                    seriesOpt.clockwise = seriesOpt.clockWise;
	                }
	            }
	            if (seriesType === 'gauge') {
	                var pointerColor = get(seriesOpt, 'pointer.color');
	                pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	            }
	            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                    compatLayoutProperties(seriesOpt);
	                    break;
	                }
	            }
	        });
	        // dataRange has changed to visualMap
	        if (option.dataRange) {
	            option.visualMap = option.dataRange;
	        }
	        each(COMPATITABLE_COMPONENTS, function (componentName) {
	            var options = option[componentName];
	            if (options) {
	                if (!zrUtil.isArray(options)) {
	                    options = [options];
	                }
	                each(options, function (option) {
	                    compatLayoutProperties(option);
	                });
	            }
	        });
	    };
	});
	define('echarts/util/format', ['require', 'zrender/core/util', './number', 'zrender/contain/text'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('./number');
	    var textContain = require('zrender/contain/text');
	    /**
	     * 每三位默认加,格式化
	     * @type {string|number} x
	     */
	    function addCommas(x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	    }
	    /**
	     * @param {string} str
	     * @return {string} str
	     */
	    function toCamelCase(str) {
	        return str.toLowerCase().replace(/-(.)/g, function (match, group1) {
	            return group1.toUpperCase();
	        });
	    }
	    /**
	     * Normalize css liked array configuration
	     * e.g.
	     *  3 => [3, 3, 3, 3]
	     *  [4, 2] => [4, 2, 4, 2]
	     *  [4, 3, 2] => [4, 3, 2, 3]
	     * @param {number|Array.<number>} val
	     */
	    function normalizeCssArray(val) {
	        var len = val.length;
	        if (typeof val === 'number') {
	            return [
	                val,
	                val,
	                val,
	                val
	            ];
	        } else if (len === 2) {
	            // vertical | horizontal
	            return [
	                val[0],
	                val[1],
	                val[0],
	                val[1]
	            ];
	        } else if (len === 3) {
	            // top | horizontal | bottom
	            return [
	                val[0],
	                val[1],
	                val[2],
	                val[1]
	            ];
	        }
	        return val;
	    }
	    function encodeHTML(source) {
	        return String(source).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
	    }
	    var TPL_VAR_ALIAS = [
	            'a',
	            'b',
	            'c',
	            'd',
	            'e',
	            'f',
	            'g'
	        ];
	    function wrapVar(varName, seriesIdx) {
	        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	    }
	    /**
	     * Template formatter
	     * @param  {string} tpl
	     * @param  {Array.<Object>|Object} paramsList
	     * @return {string}
	     */
	    function formatTpl(tpl, paramsList) {
	        if (!zrUtil.isArray(paramsList)) {
	            paramsList = [paramsList];
	        }
	        var seriesLen = paramsList.length;
	        if (!seriesLen) {
	            return '';
	        }
	        var $vars = paramsList[0].$vars || [];
	        for (var i = 0; i < $vars.length; i++) {
	            var alias = TPL_VAR_ALIAS[i];
	            tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
	        }
	        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	            for (var k = 0; k < $vars.length; k++) {
	                tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), paramsList[seriesIdx][$vars[k]]);
	            }
	        }
	        return tpl;
	    }
	    /**
	     * ISO Date format
	     * @param {string} tpl
	     * @param {number} value
	     * @inner
	     */
	    function formatTime(tpl, value) {
	        if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	            tpl = 'MM-dd\nyyyy';
	        }
	        var date = numberUtil.parseDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();
	        tpl = tpl.replace('MM', s2d(M)).toLowerCase().replace('yyyy', y).replace('yy', y % 100).replace('dd', s2d(d)).replace('d', d).replace('hh', s2d(h)).replace('h', h).replace('mm', s2d(m)).replace('m', m).replace('ss', s2d(s)).replace('s', s);
	        return tpl;
	    }
	    /**
	     * @param {string} str
	     * @return {string}
	     * @inner
	     */
	    function s2d(str) {
	        return str < 10 ? '0' + str : str;
	    }
	    return {
	        normalizeCssArray: normalizeCssArray,
	        addCommas: addCommas,
	        toCamelCase: toCamelCase,
	        encodeHTML: encodeHTML,
	        formatTpl: formatTpl,
	        formatTime: formatTime,
	        truncateText: textContain.truncateText
	    };
	});
	define('echarts/util/number', ['require'], function (require) {
	    var number = {};
	    var RADIAN_EPSILON = 0.0001;
	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }
	    /**
	     * Linear mapping a value from domain to range
	     * @memberOf module:echarts/util/number
	     * @param  {(number|Array.<number>)} val
	     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	     * @param  {boolean} clamp
	     * @return {(number|Array.<number>}
	     */
	    number.linearMap = function (val, domain, range, clamp) {
	        var subDomain = domain[1] - domain[0];
	        var subRange = range[1] - range[0];
	        if (subDomain === 0) {
	            return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
	        }
	        // Avoid accuracy problem in edge, such as
	        // 146.39 - 62.83 === 83.55999999999999.
	        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	        // It is a little verbose for efficiency considering this method
	        // is a hotspot.
	        if (clamp) {
	            if (subDomain > 0) {
	                if (val <= domain[0]) {
	                    return range[0];
	                } else if (val >= domain[1]) {
	                    return range[1];
	                }
	            } else {
	                if (val >= domain[0]) {
	                    return range[0];
	                } else if (val <= domain[1]) {
	                    return range[1];
	                }
	            }
	        } else {
	            if (val === domain[0]) {
	                return range[0];
	            }
	            if (val === domain[1]) {
	                return range[1];
	            }
	        }
	        return (val - domain[0]) / subDomain * subRange + range[0];
	    };
	    /**
	     * Convert a percent string to absolute number.
	     * Returns NaN if percent is not a valid string or number
	     * @memberOf module:echarts/util/number
	     * @param {string|number} percent
	     * @param {number} all
	     * @return {number}
	     */
	    number.parsePercent = function (percent, all) {
	        switch (percent) {
	        case 'center':
	        case 'middle':
	            percent = '50%';
	            break;
	        case 'left':
	        case 'top':
	            percent = '0%';
	            break;
	        case 'right':
	        case 'bottom':
	            percent = '100%';
	            break;
	        }
	        if (typeof percent === 'string') {
	            if (_trim(percent).match(/%$/)) {
	                return parseFloat(percent) / 100 * all;
	            }
	            return parseFloat(percent);
	        }
	        return percent == null ? NaN : +percent;
	    };
	    /**
	     * Fix rounding error of float numbers
	     * @param {number} x
	     * @return {number}
	     */
	    number.round = function (x) {
	        // PENDING
	        return +(+x).toFixed(10);
	    };
	    number.asc = function (arr) {
	        arr.sort(function (a, b) {
	            return a - b;
	        });
	        return arr;
	    };
	    /**
	     * Get precision
	     * @param {number} val
	     */
	    number.getPrecision = function (val) {
	        val = +val;
	        if (isNaN(val)) {
	            return 0;
	        }
	        // It is much faster than methods converting number to string as follows
	        //      var tmp = val.toString();
	        //      return tmp.length - 1 - tmp.indexOf('.');
	        // especially when precision is low
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    };
	    /**
	     * @param {Array.<number>} dataExtent
	     * @param {Array.<number>} pixelExtent
	     * @return {number}  precision
	     */
	    number.getPixelPrecision = function (dataExtent, pixelExtent) {
	        var log = Math.log;
	        var LN10 = Math.LN10;
	        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	        return Math.max(-dataQuantity + sizeQuantity, 0);
	    };
	    // Number.MAX_SAFE_INTEGER, ie do not support.
	    number.MAX_SAFE_INTEGER = 9007199254740991;
	    /**
	     * To 0 - 2 * PI, considering negative radian.
	     * @param {number} radian
	     * @return {number}
	     */
	    number.remRadian = function (radian) {
	        var pi2 = Math.PI * 2;
	        return (radian % pi2 + pi2) % pi2;
	    };
	    /**
	     * @param {type} radian
	     * @return {boolean}
	     */
	    number.isRadianAroundZero = function (val) {
	        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	    };
	    /**
	     * @param {string|Date|number} value
	     * @return {number} timestamp
	     */
	    number.parseDate = function (value) {
	        return value instanceof Date ? value : new Date(typeof value === 'string' ? new Date(value.replace(/-/g, '/')) - new Date('1970/01/01') : Math.round(value));
	    };
	    /**
	     * Quantity of a number. e.g. 0.1, 1, 10, 100
	     * @param  {number} val
	     * @return {number}
	     */
	    number.quantity = function (val) {
	        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));
	    };
	    // "Nice Numbers for Graph Labels" of Graphic Gems
	    /**
	     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	     * @param  {number} val
	     * @param  {boolean} round
	     * @return {number}
	     */
	    number.nice = function (val, round) {
	        var exp10 = number.quantity(val);
	        var f = val / exp10;
	        // between 1 and 10
	        var nf;
	        if (round) {
	            if (f < 1.5) {
	                nf = 1;
	            } else if (f < 2.5) {
	                nf = 2;
	            } else if (f < 4) {
	                nf = 3;
	            } else if (f < 7) {
	                nf = 5;
	            } else {
	                nf = 10;
	            }
	        } else {
	            if (f < 1) {
	                nf = 1;
	            } else if (f < 2) {
	                nf = 2;
	            } else if (f < 3) {
	                nf = 3;
	            } else if (f < 5) {
	                nf = 5;
	            } else {
	                nf = 10;
	            }
	        }
	        return nf * exp10;
	    };
	    return number;
	});
	define('zrender/core/matrix', [], function () {
	    var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	    /**
	     * 3x2矩阵操作类
	     * @exports zrender/tool/matrix
	     */
	    var matrix = {
	            create: function () {
	                var out = new ArrayCtor(6);
	                matrix.identity(out);
	                return out;
	            },
	            identity: function (out) {
	                out[0] = 1;
	                out[1] = 0;
	                out[2] = 0;
	                out[3] = 1;
	                out[4] = 0;
	                out[5] = 0;
	                return out;
	            },
	            copy: function (out, m) {
	                out[0] = m[0];
	                out[1] = m[1];
	                out[2] = m[2];
	                out[3] = m[3];
	                out[4] = m[4];
	                out[5] = m[5];
	                return out;
	            },
	            mul: function (out, m1, m2) {
	                // Consider matrix.mul(m, m2, m);
	                // where out is the same as m2.
	                // So use temp variable to escape error.
	                var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	                var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	                var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	                var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	                var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	                var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	                out[0] = out0;
	                out[1] = out1;
	                out[2] = out2;
	                out[3] = out3;
	                out[4] = out4;
	                out[5] = out5;
	                return out;
	            },
	            translate: function (out, a, v) {
	                out[0] = a[0];
	                out[1] = a[1];
	                out[2] = a[2];
	                out[3] = a[3];
	                out[4] = a[4] + v[0];
	                out[5] = a[5] + v[1];
	                return out;
	            },
	            rotate: function (out, a, rad) {
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];
	                var st = Math.sin(rad);
	                var ct = Math.cos(rad);
	                out[0] = aa * ct + ab * st;
	                out[1] = -aa * st + ab * ct;
	                out[2] = ac * ct + ad * st;
	                out[3] = -ac * st + ct * ad;
	                out[4] = ct * atx + st * aty;
	                out[5] = ct * aty - st * atx;
	                return out;
	            },
	            scale: function (out, a, v) {
	                var vx = v[0];
	                var vy = v[1];
	                out[0] = a[0] * vx;
	                out[1] = a[1] * vy;
	                out[2] = a[2] * vx;
	                out[3] = a[3] * vy;
	                out[4] = a[4] * vx;
	                out[5] = a[5] * vy;
	                return out;
	            },
	            invert: function (out, a) {
	                var aa = a[0];
	                var ac = a[2];
	                var atx = a[4];
	                var ab = a[1];
	                var ad = a[3];
	                var aty = a[5];
	                var det = aa * ad - ab * ac;
	                if (!det) {
	                    return null;
	                }
	                det = 1 / det;
	                out[0] = ad * det;
	                out[1] = -ab * det;
	                out[2] = -ac * det;
	                out[3] = aa * det;
	                out[4] = (ac * aty - ad * atx) * det;
	                out[5] = (ab * atx - aa * aty) * det;
	                return out;
	            }
	        };
	    return matrix;
	});
	define('echarts/data/List', ['require', '../model/Model', './DataDiffer', 'zrender/core/util', '../util/model'], function (require) {
	    var UNDEFINED = 'undefined';
	    var globalObj = typeof window === 'undefined' ? global : window;
	    var Float64Array = typeof globalObj.Float64Array === UNDEFINED ? Array : globalObj.Float64Array;
	    var Int32Array = typeof globalObj.Int32Array === UNDEFINED ? Array : globalObj.Int32Array;
	    var dataCtors = {
	            'float': Float64Array,
	            'int': Int32Array,
	            'ordinal': Array,
	            'number': Array,
	            'time': Array
	        };
	    var Model = require('../model/Model');
	    var DataDiffer = require('./DataDiffer');
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../util/model');
	    var isObject = zrUtil.isObject;
	    var TRANSFERABLE_PROPERTIES = [
	            'stackedOn',
	            'hasItemOption',
	            '_nameList',
	            '_idList',
	            '_rawData'
	        ];
	    var transferProperties = function (a, b) {
	        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {
	            if (b.hasOwnProperty(propName)) {
	                a[propName] = b[propName];
	            }
	        });
	        a.__wrappedMethods = b.__wrappedMethods;
	    };
	    /**
	     * @constructor
	     * @alias module:echarts/data/List
	     *
	     * @param {Array.<string>} dimensions
	     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	     * @param {module:echarts/model/Model} hostModel
	     */
	    var List = function (dimensions, hostModel) {
	        dimensions = dimensions || [
	            'x',
	            'y'
	        ];
	        var dimensionInfos = {};
	        var dimensionNames = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimensionName;
	            var dimensionInfo = {};
	            if (typeof dimensions[i] === 'string') {
	                dimensionName = dimensions[i];
	                dimensionInfo = {
	                    name: dimensionName,
	                    stackable: false,
	                    type: 'number'
	                };
	            } else {
	                dimensionInfo = dimensions[i];
	                dimensionName = dimensionInfo.name;
	                dimensionInfo.type = dimensionInfo.type || 'number';
	            }
	            dimensionNames.push(dimensionName);
	            dimensionInfos[dimensionName] = dimensionInfo;
	        }
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        this.dimensions = dimensionNames;
	        /**
	         * Infomation of each data dimension, like data type.
	         * @type {Object}
	         */
	        this._dimensionInfos = dimensionInfos;
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.dataType;
	        /**
	         * Indices stores the indices of data subset after filtered.
	         * This data subset will be used in chart.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        this.indices = [];
	        /**
	         * Data storage
	         * @type {Object.<key, TypedArray|Array>}
	         * @private
	         */
	        this._storage = {};
	        /**
	         * @type {Array.<string>}
	         */
	        this._nameList = [];
	        /**
	         * @type {Array.<string>}
	         */
	        this._idList = [];
	        /**
	         * Models of data option is stored sparse for optimizing memory cost
	         * @type {Array.<module:echarts/model/Model>}
	         * @private
	         */
	        this._optionModels = [];
	        /**
	         * @param {module:echarts/data/List}
	         */
	        this.stackedOn = null;
	        /**
	         * Global visual properties after visual coding
	         * @type {Object}
	         * @private
	         */
	        this._visual = {};
	        /**
	         * Globel layout properties.
	         * @type {Object}
	         * @private
	         */
	        this._layout = {};
	        /**
	         * Item visual properties after visual coding
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemVisuals = [];
	        /**
	         * Item layout properties after layout
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemLayouts = [];
	        /**
	         * Graphic elemnents
	         * @type {Array.<module:zrender/Element>}
	         * @private
	         */
	        this._graphicEls = [];
	        /**
	         * @type {Array.<Array|Object>}
	         * @private
	         */
	        this._rawData;
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._extent;
	    };
	    var listProto = List.prototype;
	    listProto.type = 'list';
	    /**
	     * If each data item has it's own option
	     * @type {boolean}
	     */
	    listProto.hasItemOption = true;
	    /**
	     * Get dimension name
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     * @return {string} Concrete dim name.
	     */
	    listProto.getDimension = function (dim) {
	        if (!isNaN(dim)) {
	            dim = this.dimensions[dim] || dim;
	        }
	        return dim;
	    };
	    /**
	     * Get type and stackable info of particular dimension
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     */
	    listProto.getDimensionInfo = function (dim) {
	        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	    };
	    /**
	     * Initialize from data
	     * @param {Array.<Object|number|Array>} data
	     * @param {Array.<string>} [nameList]
	     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	     */
	    listProto.initData = function (data, nameList, dimValueGetter) {
	        data = data || [];
	        if (true) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }
	        this._rawData = data;
	        // Clear
	        var storage = this._storage = {};
	        var indices = this.indices = [];
	        var dimensions = this.dimensions;
	        var size = data.length;
	        var dimensionInfoMap = this._dimensionInfos;
	        var idList = [];
	        var nameRepeatCount = {};
	        nameList = nameList || [];
	        // Init storage
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimInfo = dimensionInfoMap[dimensions[i]];
	            var DataCtor = dataCtors[dimInfo.type];
	            storage[dimensions[i]] = new DataCtor(size);
	        }
	        var self = this;
	        if (!dimValueGetter) {
	            self.hasItemOption = false;
	        }
	        // Default dim value getter
	        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	            var value = modelUtil.getDataItemValue(dataItem);
	            // If any dataItem is like { value: 10 }
	            if (modelUtil.isDataItemOption(dataItem)) {
	                self.hasItemOption = true;
	            }
	            return modelUtil.converDataValue(value instanceof Array ? value[dimIndex] : value, dimensionInfoMap[dimName]);
	        };
	        for (var idx = 0; idx < data.length; idx++) {
	            var dataItem = data[idx];
	            // Each data item is value
	            // [1, 2]
	            // 2
	            // Bar chart, line chart which uses category axis
	            // only gives the 'y' value. 'x' value is the indices of cateogry
	            // Use a tempValue to normalize the value to be a (x, y) value
	            // Store the data by dimensions
	            for (var k = 0; k < dimensions.length; k++) {
	                var dim = dimensions[k];
	                var dimStorage = storage[dim];
	                // PENDING NULL is empty or zero
	                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	            }
	            indices.push(idx);
	        }
	        // Use the name in option and create id
	        for (var i = 0; i < data.length; i++) {
	            if (!nameList[i]) {
	                if (data[i] && data[i].name != null) {
	                    nameList[i] = data[i].name;
	                }
	            }
	            var name = nameList[i] || '';
	            // Try using the id in option
	            var id = data[i] && data[i].id;
	            if (!id && name) {
	                // Use name as id and add counter to avoid same name
	                nameRepeatCount[name] = nameRepeatCount[name] || 0;
	                id = name;
	                if (nameRepeatCount[name] > 0) {
	                    id += '__ec__' + nameRepeatCount[name];
	                }
	                nameRepeatCount[name]++;
	            }
	            id && (idList[i] = id);
	        }
	        this._nameList = nameList;
	        this._idList = idList;
	    };
	    /**
	     * @return {number}
	     */
	    listProto.count = function () {
	        return this.indices.length;
	    };
	    /**
	     * Get value. Return NaN if idx is out of range.
	     * @param {string} dim Dim must be concrete name.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.get = function (dim, idx, stack) {
	        var storage = this._storage;
	        var dataIndex = this.indices[idx];
	        // If value not exists
	        if (dataIndex == null) {
	            return NaN;
	        }
	        var value = storage[dim] && storage[dim][dataIndex];
	        // FIXME ordinal data type is not stackable
	        if (stack) {
	            var dimensionInfo = this._dimensionInfos[dim];
	            if (dimensionInfo && dimensionInfo.stackable) {
	                var stackedOn = this.stackedOn;
	                while (stackedOn) {
	                    // Get no stacked data of stacked on
	                    var stackedValue = stackedOn.get(dim, idx);
	                    // Considering positive stack, negative stack and empty data
	                    if (value >= 0 && stackedValue > 0 || value <= 0 && stackedValue < 0) {
	                        value += stackedValue;
	                    }
	                    stackedOn = stackedOn.stackedOn;
	                }
	            }
	        }
	        return value;
	    };
	    /**
	     * Get value for multi dimensions.
	     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.getValues = function (dimensions, idx, stack) {
	        var values = [];
	        if (!zrUtil.isArray(dimensions)) {
	            stack = idx;
	            idx = dimensions;
	            dimensions = this.dimensions;
	        }
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            values.push(this.get(dimensions[i], idx, stack));
	        }
	        return values;
	    };
	    /**
	     * If value is NaN. Inlcuding '-'
	     * @param {string} dim
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.hasValue = function (idx) {
	        var dimensions = this.dimensions;
	        var dimensionInfos = this._dimensionInfos;
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            if (dimensionInfos[dimensions[i]].type !== 'ordinal' && isNaN(this.get(dimensions[i], idx))) {
	                return false;
	            }
	        }
	        return true;
	    };
	    /**
	     * Get extent of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getDataExtent = function (dim, stack) {
	        dim = this.getDimension(dim);
	        var dimData = this._storage[dim];
	        var dimInfo = this.getDimensionInfo(dim);
	        stack = dimInfo && dimInfo.stackable && stack;
	        var dimExtent = (this._extent || (this._extent = {}))[dim + !!stack];
	        var value;
	        if (dimExtent) {
	            return dimExtent;
	        }
	        // var dimInfo = this._dimensionInfos[dim];
	        if (dimData) {
	            var min = Infinity;
	            var max = -Infinity;
	            // var isOrdinal = dimInfo.type === 'ordinal';
	            for (var i = 0, len = this.count(); i < len; i++) {
	                value = this.get(dim, i, stack);
	                // FIXME
	                // if (isOrdinal && typeof value === 'string') {
	                //     value = zrUtil.indexOf(dimData, value);
	                // }
	                value < min && (min = value);
	                value > max && (max = value);
	            }
	            return this._extent[dim + !!stack] = [
	                min,
	                max
	            ];
	        } else {
	            return [
	                Infinity,
	                -Infinity
	            ];
	        }
	    };
	    /**
	     * Get sum of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getSum = function (dim, stack) {
	        var dimData = this._storage[dim];
	        var sum = 0;
	        if (dimData) {
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var value = this.get(dim, i, stack);
	                if (!isNaN(value)) {
	                    sum += value;
	                }
	            }
	        }
	        return sum;
	    };
	    /**
	     * Retreive the index with given value
	     * @param {number} idx
	     * @param {number} value
	     * @return {number}
	     */
	    // FIXME Precision of float value
	    listProto.indexOf = function (dim, value) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	        var indices = this.indices;
	        if (dimData) {
	            for (var i = 0, len = indices.length; i < len; i++) {
	                var rawIndex = indices[i];
	                if (dimData[rawIndex] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    };
	    /**
	     * Retreive the index with given name
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfName = function (name) {
	        var indices = this.indices;
	        var nameList = this._nameList;
	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (nameList[rawIndex] === name) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    /**
	     * Retreive the index with given raw data index
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfRawIndex = function (rawIndex) {
	        // Indices are ascending
	        var indices = this.indices;
	        var left = 0;
	        var right = indices.length - 1;
	        while (left <= right) {
	            var mid = (left + right) / 2 | 0;
	            if (indices[mid] < rawIndex) {
	                left = mid + 1;
	            } else if (indices[mid] > rawIndex) {
	                right = mid - 1;
	            } else {
	                return mid;
	            }
	        }
	        return -1;
	    };
	    /**
	     * Retreive the index of nearest value
	     * @param {string} dim
	     * @param {number} value
	     * @param {boolean} stack If given value is after stacked
	     * @param {number} [maxDistance=Infinity]
	     * @return {number}
	     */
	    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	        if (maxDistance == null) {
	            maxDistance = Infinity;
	        }
	        var nearestIdx = -1;
	        if (dimData) {
	            var minDist = Number.MAX_VALUE;
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var diff = value - this.get(dim, i, stack);
	                var dist = Math.abs(diff);
	                if (diff <= maxDistance && (dist < minDist || dist === minDist && diff > 0)) {
	                    minDist = dist;
	                    nearestIdx = i;
	                }
	            }
	        }
	        return nearestIdx;
	    };
	    /**
	     * Get raw data index
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawIndex = function (idx) {
	        var rawIdx = this.indices[idx];
	        return rawIdx == null ? -1 : rawIdx;
	    };
	    /**
	     * Get raw data item
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawDataItem = function (idx) {
	        return this._rawData[this.getRawIndex(idx)];
	    };
	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getName = function (idx) {
	        return this._nameList[this.indices[idx]] || '';
	    };
	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getId = function (idx) {
	        return this._idList[this.indices[idx]] || this.getRawIndex(idx) + '';
	    };
	    function normalizeDimensions(dimensions) {
	        if (!zrUtil.isArray(dimensions)) {
	            dimensions = [dimensions];
	        }
	        return dimensions;
	    }
	    /**
	     * Data iteration
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     *
	     * @example
	     *  list.each('x', function (x, idx) {});
	     *  list.each(['x', 'y'], function (x, y, idx) {});
	     *  list.each(function (idx) {})
	     */
	    listProto.each = function (dims, cb, stack, context) {
	        if (typeof dims === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dims;
	            dims = [];
	        }
	        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);
	        var value = [];
	        var dimSize = dims.length;
	        var indices = this.indices;
	        context = context || this;
	        for (var i = 0; i < indices.length; i++) {
	            // Simple optimization
	            switch (dimSize) {
	            case 0:
	                cb.call(context, i);
	                break;
	            case 1:
	                cb.call(context, this.get(dims[0], i, stack), i);
	                break;
	            case 2:
	                cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);
	                break;
	            default:
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dims[k], i, stack);
	                }
	                // Index
	                value[k] = i;
	                cb.apply(context, value);
	            }
	        }
	    };
	    /**
	     * Data filter
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     */
	    listProto.filterSelf = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }
	        dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	        var newIndices = [];
	        var value = [];
	        var dimSize = dimensions.length;
	        var indices = this.indices;
	        context = context || this;
	        for (var i = 0; i < indices.length; i++) {
	            var keep;
	            // Simple optimization
	            if (dimSize === 1) {
	                keep = cb.call(context, this.get(dimensions[0], i, stack), i);
	            } else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                value[k] = i;
	                keep = cb.apply(context, value);
	            }
	            if (keep) {
	                newIndices.push(indices[i]);
	            }
	        }
	        this.indices = newIndices;
	        // Reset data extent
	        this._extent = {};
	        return this;
	    };
	    /**
	     * Data mapping to a plain array
	     * @param {string|Array.<string>} [dimensions]
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.mapArray = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }
	        var result = [];
	        this.each(dimensions, function () {
	            result.push(cb && cb.apply(this, arguments));
	        }, stack, context);
	        return result;
	    };
	    function cloneListForMapAndSample(original, excludeDimensions) {
	        var allDimensions = original.dimensions;
	        var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel);
	        // FIXME If needs stackedOn, value may already been stacked
	        transferProperties(list, original);
	        var storage = list._storage = {};
	        var originalStorage = original._storage;
	        // Init storage
	        for (var i = 0; i < allDimensions.length; i++) {
	            var dim = allDimensions[i];
	            var dimStore = originalStorage[dim];
	            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	                storage[dim] = new dimStore.constructor(originalStorage[dim].length);
	            } else {
	                // Direct reference for other dimensions
	                storage[dim] = originalStorage[dim];
	            }
	        }
	        return list;
	    }
	    /**
	     * Data mapping to a new List with given dimensions
	     * @param {string|Array.<string>} dimensions
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.map = function (dimensions, cb, stack, context) {
	        dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	        var list = cloneListForMapAndSample(this, dimensions);
	        // Following properties are all immutable.
	        // So we can reference to the same value
	        var indices = list.indices = this.indices;
	        var storage = list._storage;
	        var tmpRetValue = [];
	        this.each(dimensions, function () {
	            var idx = arguments[arguments.length - 1];
	            var retValue = cb && cb.apply(this, arguments);
	            if (retValue != null) {
	                // a number
	                if (typeof retValue === 'number') {
	                    tmpRetValue[0] = retValue;
	                    retValue = tmpRetValue;
	                }
	                for (var i = 0; i < retValue.length; i++) {
	                    var dim = dimensions[i];
	                    var dimStore = storage[dim];
	                    var rawIdx = indices[idx];
	                    if (dimStore) {
	                        dimStore[rawIdx] = retValue[i];
	                    }
	                }
	            }
	        }, stack, context);
	        return list;
	    };
	    /**
	     * Large data down sampling on given dimension
	     * @param {string} dimension
	     * @param {number} rate
	     * @param {Function} sampleValue
	     * @param {Function} sampleIndex Sample index for name and id
	     */
	    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	        var list = cloneListForMapAndSample(this, [dimension]);
	        var storage = this._storage;
	        var targetStorage = list._storage;
	        var originalIndices = this.indices;
	        var indices = list.indices = [];
	        var frameValues = [];
	        var frameIndices = [];
	        var frameSize = Math.floor(1 / rate);
	        var dimStore = targetStorage[dimension];
	        var len = this.count();
	        // Copy data from original data
	        for (var i = 0; i < storage[dimension].length; i++) {
	            targetStorage[dimension][i] = storage[dimension][i];
	        }
	        for (var i = 0; i < len; i += frameSize) {
	            // Last frame
	            if (frameSize > len - i) {
	                frameSize = len - i;
	                frameValues.length = frameSize;
	            }
	            for (var k = 0; k < frameSize; k++) {
	                var idx = originalIndices[i + k];
	                frameValues[k] = dimStore[idx];
	                frameIndices[k] = idx;
	            }
	            var value = sampleValue(frameValues);
	            var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	            // Only write value on the filtered data
	            dimStore[idx] = value;
	            indices.push(idx);
	        }
	        return list;
	    };
	    /**
	     * Get model of one data item.
	     *
	     * @param {number} idx
	     */
	    // FIXME Model proxy ?
	    listProto.getItemModel = function (idx) {
	        var hostModel = this.hostModel;
	        idx = this.indices[idx];
	        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);
	    };
	    /**
	     * Create a data differ
	     * @param {module:echarts/data/List} otherList
	     * @return {module:echarts/data/DataDiffer}
	     */
	    listProto.diff = function (otherList) {
	        var idList = this._idList;
	        var otherIdList = otherList && otherList._idList;
	        return new DataDiffer(otherList ? otherList.indices : [], this.indices, function (idx) {
	            return otherIdList[idx] || idx + '';
	        }, function (idx) {
	            return idList[idx] || idx + '';
	        });
	    };
	    /**
	     * Get visual property.
	     * @param {string} key
	     */
	    listProto.getVisual = function (key) {
	        var visual = this._visual;
	        return visual && visual[key];
	    };
	    /**
	     * Set visual property
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setVisual('color', color);
	     *  setVisual({
	     *      'color': color
	     *  });
	     */
	    listProto.setVisual = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setVisual(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._visual = this._visual || {};
	        this._visual[key] = val;
	    };
	    /**
	     * Set layout property.
	     * @param {string} key
	     * @param {*} [val]
	     */
	    listProto.setLayout = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setLayout(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._layout[key] = val;
	    };
	    /**
	     * Get layout property.
	     * @param  {string} key.
	     * @return {*}
	     */
	    listProto.getLayout = function (key) {
	        return this._layout[key];
	    };
	    /**
	     * Get layout of single data item
	     * @param {number} idx
	     */
	    listProto.getItemLayout = function (idx) {
	        return this._itemLayouts[idx];
	    };
	    /**
	     * Set layout of single data item
	     * @param {number} idx
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    listProto.setItemLayout = function (idx, layout, merge) {
	        this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	    };
	    /**
	     * Clear all layout of single data item
	     */
	    listProto.clearItemLayouts = function () {
	        this._itemLayouts.length = 0;
	    };
	    /**
	     * Get visual property of single data item
	     * @param {number} idx
	     * @param {string} key
	     * @param {boolean} ignoreParent
	     */
	    listProto.getItemVisual = function (idx, key, ignoreParent) {
	        var itemVisual = this._itemVisuals[idx];
	        var val = itemVisual && itemVisual[key];
	        if (val == null && !ignoreParent) {
	            // Use global visual property
	            return this.getVisual(key);
	        }
	        return val;
	    };
	    /**
	     * Set visual property of single data item
	     *
	     * @param {number} idx
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setItemVisual(0, 'color', color);
	     *  setItemVisual(0, {
	     *      'color': color
	     *  });
	     */
	    listProto.setItemVisual = function (idx, key, value) {
	        var itemVisual = this._itemVisuals[idx] || {};
	        this._itemVisuals[idx] = itemVisual;
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    itemVisual[name] = key[name];
	                }
	            }
	            return;
	        }
	        itemVisual[key] = value;
	    };
	    /**
	     * Clear itemVisuals and list visual.
	     */
	    listProto.clearAllVisual = function () {
	        this._visual = {};
	        this._itemVisuals = [];
	    };
	    var setItemDataAndSeriesIndex = function (child) {
	        child.seriesIndex = this.seriesIndex;
	        child.dataIndex = this.dataIndex;
	        child.dataType = this.dataType;
	    };
	    /**
	     * Set graphic element relative to data. It can be set as null
	     * @param {number} idx
	     * @param {module:zrender/Element} [el]
	     */
	    listProto.setItemGraphicEl = function (idx, el) {
	        var hostModel = this.hostModel;
	        if (el) {
	            // Add data index and series index for indexing the data by element
	            // Useful in tooltip
	            el.dataIndex = idx;
	            el.dataType = this.dataType;
	            el.seriesIndex = hostModel && hostModel.seriesIndex;
	            if (el.type === 'group') {
	                el.traverse(setItemDataAndSeriesIndex, el);
	            }
	        }
	        this._graphicEls[idx] = el;
	    };
	    /**
	     * @param {number} idx
	     * @return {module:zrender/Element}
	     */
	    listProto.getItemGraphicEl = function (idx) {
	        return this._graphicEls[idx];
	    };
	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    listProto.eachItemGraphicEl = function (cb, context) {
	        zrUtil.each(this._graphicEls, function (el, idx) {
	            if (el) {
	                cb && cb.call(context, el, idx);
	            }
	        });
	    };
	    /**
	     * Shallow clone a new list except visual and layout properties, and graph elements.
	     * New list only change the indices.
	     */
	    listProto.cloneShallow = function () {
	        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	        var list = new List(dimensionInfoList, this.hostModel);
	        // FIXME
	        list._storage = this._storage;
	        transferProperties(list, this);
	        // Clone will not change the data extent and indices
	        list.indices = this.indices.slice();
	        if (this._extent) {
	            list._extent = zrUtil.extend({}, this._extent);
	        }
	        return list;
	    };
	    /**
	     * Wrap some method to add more feature
	     * @param {string} methodName
	     * @param {Function} injectFunction
	     */
	    listProto.wrapMethod = function (methodName, injectFunction) {
	        var originalMethod = this[methodName];
	        if (typeof originalMethod !== 'function') {
	            return;
	        }
	        this.__wrappedMethods = this.__wrappedMethods || [];
	        this.__wrappedMethods.push(methodName);
	        this[methodName] = function () {
	            var res = originalMethod.apply(this, arguments);
	            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	        };
	    };
	    // Methods that create a new list based on this list should be listed here.
	    // Notice that those method should `RETURN` the new list.
	    listProto.TRANSFERABLE_METHODS = [
	        'cloneShallow',
	        'downSample',
	        'map'
	    ];
	    // Methods that change indices of this list should be listed here.
	    listProto.CHANGABLE_METHODS = ['filterSelf'];
	    return List;
	});
	define('echarts/component/legend/LegendModel', ['require', 'zrender/core/util', '../../model/Model', '../../echarts'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var Model = require('../../model/Model');
	    var LegendModel = require('../../echarts').extendComponentModel({
	            type: 'legend',
	            dependencies: ['series'],
	            layoutMode: {
	                type: 'box',
	                ignoreSize: true
	            },
	            init: function (option, parentModel, ecModel) {
	                this.mergeDefaultAndTheme(option, ecModel);
	                option.selected = option.selected || {};
	            },
	            mergeOption: function (option) {
	                LegendModel.superCall(this, 'mergeOption', option);
	            },
	            optionUpdated: function () {
	                this._updateData(this.ecModel);
	                var legendData = this._data;
	                // If selectedMode is single, try to select one
	                if (legendData[0] && this.get('selectedMode') === 'single') {
	                    var hasSelected = false;
	                    // If has any selected in option.selected
	                    for (var i = 0; i < legendData.length; i++) {
	                        var name = legendData[i].get('name');
	                        if (this.isSelected(name)) {
	                            // Force to unselect others
	                            this.select(name);
	                            hasSelected = true;
	                            break;
	                        }
	                    }
	                    // Try select the first if selectedMode is single
	                    !hasSelected && this.select(legendData[0].get('name'));
	                }
	            },
	            _updateData: function (ecModel) {
	                var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	                        // Can be string or number
	                        if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	                            dataItem = { name: dataItem };
	                        }
	                        return new Model(dataItem, this, this.ecModel);
	                    }, this);
	                this._data = legendData;
	                var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	                        return series.name;
	                    });
	                ecModel.eachSeries(function (seriesModel) {
	                    if (seriesModel.legendDataProvider) {
	                        var data = seriesModel.legendDataProvider();
	                        availableNames = availableNames.concat(data.mapArray(data.getName));
	                    }
	                });
	                /**
	             * @type {Array.<string>}
	             * @private
	             */
	                this._availableNames = availableNames;
	            },
	            getData: function () {
	                return this._data;
	            },
	            select: function (name) {
	                var selected = this.option.selected;
	                var selectedMode = this.get('selectedMode');
	                if (selectedMode === 'single') {
	                    var data = this._data;
	                    zrUtil.each(data, function (dataItem) {
	                        selected[dataItem.get('name')] = false;
	                    });
	                }
	                selected[name] = true;
	            },
	            unSelect: function (name) {
	                if (this.get('selectedMode') !== 'single') {
	                    this.option.selected[name] = false;
	                }
	            },
	            toggleSelected: function (name) {
	                var selected = this.option.selected;
	                // Default is true
	                if (!(name in selected)) {
	                    selected[name] = true;
	                }
	                this[selected[name] ? 'unSelect' : 'select'](name);
	            },
	            isSelected: function (name) {
	                var selected = this.option.selected;
	                return !(name in selected && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	            },
	            defaultOption: {
	                zlevel: 0,
	                z: 4,
	                show: true,
	                orient: 'horizontal',
	                left: 'center',
	                top: 'top',
	                align: 'auto',
	                backgroundColor: 'rgba(0,0,0,0)',
	                borderColor: '#ccc',
	                borderWidth: 0,
	                padding: 5,
	                itemGap: 10,
	                itemWidth: 25,
	                itemHeight: 14,
	                inactiveColor: '#ccc',
	                textStyle: { color: '#333' },
	                selectedMode: true,
	                tooltip: { show: false }
	            }
	        });
	    return LegendModel;
	});
	define('echarts/component/axis', ['require', '../coord/cartesian/AxisModel', './axis/AxisView'], function (require) {
	    'use strict';
	    require('../coord/cartesian/AxisModel');
	    require('./axis/AxisView');
	});
	define('echarts/component/legend/legendAction', ['require', '../../echarts', 'zrender/core/util'], function (require) {
	    var echarts = require('../../echarts');
	    var zrUtil = require('zrender/core/util');
	    function legendSelectActionHandler(methodName, payload, ecModel) {
	        var selectedMap = {};
	        var isToggleSelect = methodName === 'toggleSelected';
	        var isSelected;
	        // Update all legend components
	        ecModel.eachComponent('legend', function (legendModel) {
	            if (isToggleSelect && isSelected != null) {
	                // Force other legend has same selected status
	                // Or the first is toggled to true and other are toggled to false
	                // In the case one legend has some item unSelected in option. And if other legend
	                // doesn't has the item, they will assume it is selected.
	                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	            } else {
	                legendModel[methodName](payload.name);
	                isSelected = legendModel.isSelected(payload.name);
	            }
	            var legendData = legendModel.getData();
	            zrUtil.each(legendData, function (model) {
	                var name = model.get('name');
	                // Wrap element
	                if (name === '\n' || name === '') {
	                    return;
	                }
	                var isItemSelected = legendModel.isSelected(name);
	                if (name in selectedMap) {
	                    // Unselected if any legend is unselected
	                    selectedMap[name] = selectedMap[name] && isItemSelected;
	                } else {
	                    selectedMap[name] = isItemSelected;
	                }
	            });
	        });
	        // Return the event explicitly
	        return {
	            name: payload.name,
	            selected: selectedMap
	        };
	    }
	    /**
	     * @event legendToggleSelect
	     * @type {Object}
	     * @property {string} type 'legendToggleSelect'
	     * @property {string} [from]
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));
	    /**
	     * @event legendSelect
	     * @type {Object}
	     * @property {string} type 'legendSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));
	    /**
	     * @event legendUnSelect
	     * @type {Object}
	     * @property {string} type 'legendUnSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));
	});
	define('zrender/core/vector', [], function () {
	    var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	    /**
	     * @typedef {Float32Array|Array.<number>} Vector2
	     */
	    /**
	     * 二维向量类
	     * @exports zrender/tool/vector
	     */
	    var vector = {
	            create: function (x, y) {
	                var out = new ArrayCtor(2);
	                if (x == null) {
	                    x = 0;
	                }
	                if (y == null) {
	                    y = 0;
	                }
	                out[0] = x;
	                out[1] = y;
	                return out;
	            },
	            copy: function (out, v) {
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },
	            clone: function (v) {
	                var out = new ArrayCtor(2);
	                out[0] = v[0];
	                out[1] = v[1];
	                return out;
	            },
	            set: function (out, a, b) {
	                out[0] = a;
	                out[1] = b;
	                return out;
	            },
	            add: function (out, v1, v2) {
	                out[0] = v1[0] + v2[0];
	                out[1] = v1[1] + v2[1];
	                return out;
	            },
	            scaleAndAdd: function (out, v1, v2, a) {
	                out[0] = v1[0] + v2[0] * a;
	                out[1] = v1[1] + v2[1] * a;
	                return out;
	            },
	            sub: function (out, v1, v2) {
	                out[0] = v1[0] - v2[0];
	                out[1] = v1[1] - v2[1];
	                return out;
	            },
	            len: function (v) {
	                return Math.sqrt(this.lenSquare(v));
	            },
	            lenSquare: function (v) {
	                return v[0] * v[0] + v[1] * v[1];
	            },
	            mul: function (out, v1, v2) {
	                out[0] = v1[0] * v2[0];
	                out[1] = v1[1] * v2[1];
	                return out;
	            },
	            div: function (out, v1, v2) {
	                out[0] = v1[0] / v2[0];
	                out[1] = v1[1] / v2[1];
	                return out;
	            },
	            dot: function (v1, v2) {
	                return v1[0] * v2[0] + v1[1] * v2[1];
	            },
	            scale: function (out, v, s) {
	                out[0] = v[0] * s;
	                out[1] = v[1] * s;
	                return out;
	            },
	            normalize: function (out, v) {
	                var d = vector.len(v);
	                if (d === 0) {
	                    out[0] = 0;
	                    out[1] = 0;
	                } else {
	                    out[0] = v[0] / d;
	                    out[1] = v[1] / d;
	                }
	                return out;
	            },
	            distance: function (v1, v2) {
	                return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	            },
	            distanceSquare: function (v1, v2) {
	                return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	            },
	            negate: function (out, v) {
	                out[0] = -v[0];
	                out[1] = -v[1];
	                return out;
	            },
	            lerp: function (out, v1, v2, t) {
	                out[0] = v1[0] + t * (v2[0] - v1[0]);
	                out[1] = v1[1] + t * (v2[1] - v1[1]);
	                return out;
	            },
	            applyTransform: function (out, v, m) {
	                var x = v[0];
	                var y = v[1];
	                out[0] = m[0] * x + m[2] * y + m[4];
	                out[1] = m[1] * x + m[3] * y + m[5];
	                return out;
	            },
	            min: function (out, v1, v2) {
	                out[0] = Math.min(v1[0], v2[0]);
	                out[1] = Math.min(v1[1], v2[1]);
	                return out;
	            },
	            max: function (out, v1, v2) {
	                out[0] = Math.max(v1[0], v2[0]);
	                out[1] = Math.max(v1[1], v2[1]);
	                return out;
	            }
	        };
	    vector.length = vector.len;
	    vector.lengthSquare = vector.lenSquare;
	    vector.dist = vector.distance;
	    vector.distSquare = vector.distanceSquare;
	    return vector;
	});
	define('echarts/component/legend/LegendView', ['require', 'zrender/core/util', '../../util/symbol', '../../util/graphic', '../helper/listComponent', '../../echarts'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var symbolCreator = require('../../util/symbol');
	    var graphic = require('../../util/graphic');
	    var listComponentHelper = require('../helper/listComponent');
	    var curry = zrUtil.curry;
	    function dispatchSelectAction(name, api) {
	        api.dispatchAction({
	            type: 'legendToggleSelect',
	            name: name
	        });
	    }
	    function dispatchHighlightAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'highlight',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }
	    function dispatchDownplayAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'downplay',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }
	    return require('../../echarts').extendComponentView({
	        type: 'legend',
	        init: function () {
	            this._symbolTypeStore = {};
	        },
	        render: function (legendModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();
	            if (!legendModel.get('show')) {
	                return;
	            }
	            var selectMode = legendModel.get('selectedMode');
	            var itemAlign = legendModel.get('align');
	            if (itemAlign === 'auto') {
	                itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	            }
	            var legendDrawedMap = {};
	            zrUtil.each(legendModel.getData(), function (itemModel) {
	                var name = itemModel.get('name');
	                // Use empty string or \n as a newline string
	                if (name === '' || name === '\n') {
	                    group.add(new graphic.Group({ newline: true }));
	                    return;
	                }
	                var seriesModel = ecModel.getSeriesByName(name)[0];
	                if (legendDrawedMap[name]) {
	                    // Have been drawed
	                    return;
	                }
	                // Series legend
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var color = data.getVisual('color');
	                    // If color is a callback function
	                    if (typeof color === 'function') {
	                        // Use the first data
	                        color = color(seriesModel.getDataParams(0));
	                    }
	                    // Using rect symbol defaultly
	                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	                    var symbolType = data.getVisual('symbol');
	                    var itemGroup = this._createItem(name, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);
	                    itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, '', api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, '', api));
	                    legendDrawedMap[name] = true;
	                } else {
	                    // Data legend of pie, funnel
	                    ecModel.eachRawSeries(function (seriesModel) {
	                        // In case multiple series has same data name
	                        if (legendDrawedMap[name]) {
	                            return;
	                        }
	                        if (seriesModel.legendDataProvider) {
	                            var data = seriesModel.legendDataProvider();
	                            var idx = data.indexOfName(name);
	                            if (idx < 0) {
	                                return;
	                            }
	                            var color = data.getItemVisual(idx, 'color');
	                            var legendSymbolType = 'roundRect';
	                            var itemGroup = this._createItem(name, itemModel, legendModel, legendSymbolType, null, itemAlign, color, selectMode);
	                            itemGroup.on('click', curry(dispatchSelectAction, name, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));
	                            legendDrawedMap[name] = true;
	                        }
	                    }, this);
	                }
	                if (true) {
	                    if (!legendDrawedMap[name]) {
	                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');
	                    }
	                }
	            }, this);
	            listComponentHelper.layout(group, legendModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, legendModel);
	        },
	        _createItem: function (name, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	            var itemWidth = legendModel.get('itemWidth');
	            var itemHeight = legendModel.get('itemHeight');
	            var inactiveColor = legendModel.get('inactiveColor');
	            var isSelected = legendModel.isSelected(name);
	            var itemGroup = new graphic.Group();
	            var textStyleModel = itemModel.getModel('textStyle');
	            var itemIcon = itemModel.get('icon');
	            var tooltipModel = itemModel.getModel('tooltip');
	            // Use user given icon first
	            legendSymbolType = itemIcon || legendSymbolType;
	            itemGroup.add(symbolCreator.createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor));
	            // Compose symbols
	            // PENDING
	            if (!itemIcon && symbolType && (symbolType !== legendSymbolType || symbolType == 'none')) {
	                var size = itemHeight * 0.8;
	                if (symbolType === 'none') {
	                    symbolType = 'circle';
	                }
	                // Put symbol in the center
	                itemGroup.add(symbolCreator.createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : inactiveColor));
	            }
	            // Text
	            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	            var textAlign = itemAlign;
	            var formatter = legendModel.get('formatter');
	            var content = name;
	            if (typeof formatter === 'string' && formatter) {
	                content = formatter.replace('{name}', name);
	            } else if (typeof formatter === 'function') {
	                content = formatter(name);
	            }
	            var text = new graphic.Text({
	                    style: {
	                        text: content,
	                        x: textX,
	                        y: itemHeight / 2,
	                        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	                        textFont: textStyleModel.getFont(),
	                        textAlign: textAlign,
	                        textVerticalAlign: 'middle'
	                    }
	                });
	            itemGroup.add(text);
	            // Add a invisible rect to increase the area of mouse hover
	            var hitRect = new graphic.Rect({
	                    shape: itemGroup.getBoundingRect(),
	                    invisible: true,
	                    tooltip: tooltipModel.get('show') ? zrUtil.extend({
	                        content: name,
	                        formatter: function () {
	                            return name;
	                        },
	                        formatterParams: {
	                            componentType: 'legend',
	                            legendIndex: legendModel.componentIndex,
	                            name: name,
	                            $vars: ['name']
	                        }
	                    }, tooltipModel.option) : null
	                });
	            itemGroup.add(hitRect);
	            itemGroup.eachChild(function (child) {
	                child.silent = true;
	            });
	            hitRect.silent = !selectMode;
	            this.group.add(itemGroup);
	            graphic.setHoverStyle(itemGroup);
	            return itemGroup;
	        }
	    });
	});
	define('echarts/component/legend/legendFilter', [], function () {
	    return function (ecModel) {
	        var legendModels = ecModel.findComponents({ mainType: 'legend' });
	        if (legendModels && legendModels.length) {
	            ecModel.filterSeries(function (series) {
	                // If in any legend component the status is not selected.
	                // Because in legend series is assumed selected when it is not in the legend data.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(series.name)) {
	                        return false;
	                    }
	                }
	                return true;
	            });
	        }
	    };
	});
	define('echarts/component/tooltip/TooltipModel', ['require', '../../echarts'], function (require) {
	    require('../../echarts').extendComponentModel({
	        type: 'tooltip',
	        defaultOption: {
	            zlevel: 0,
	            z: 8,
	            show: true,
	            showContent: true,
	            trigger: 'item',
	            triggerOn: 'mousemove',
	            alwaysShowContent: false,
	            showDelay: 0,
	            hideDelay: 100,
	            transitionDuration: 0.4,
	            enterable: false,
	            backgroundColor: 'rgba(50,50,50,0.7)',
	            borderColor: '#333',
	            borderRadius: 4,
	            borderWidth: 0,
	            padding: 5,
	            extraCssText: '',
	            axisPointer: {
	                type: 'line',
	                axis: 'auto',
	                animation: true,
	                animationDurationUpdate: 200,
	                animationEasingUpdate: 'exponentialOut',
	                lineStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'solid'
	                },
	                crossStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'dashed',
	                    textStyle: {}
	                },
	                shadowStyle: { color: 'rgba(150,150,150,0.3)' }
	            },
	            textStyle: {
	                color: '#fff',
	                fontSize: 14
	            }
	        }
	    });
	});
	define('echarts/component/toolbox/ToolboxModel', ['require', './featureManager', 'zrender/core/util', '../../echarts'], function (require) {
	    var featureManager = require('./featureManager');
	    var zrUtil = require('zrender/core/util');
	    var ToolboxModel = require('../../echarts').extendComponentModel({
	            type: 'toolbox',
	            layoutMode: {
	                type: 'box',
	                ignoreSize: true
	            },
	            mergeDefaultAndTheme: function (option) {
	                ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);
	                zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	                    var Feature = featureManager.get(featureName);
	                    Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	                });
	            },
	            defaultOption: {
	                show: true,
	                z: 6,
	                zlevel: 0,
	                orient: 'horizontal',
	                left: 'right',
	                top: 'top',
	                backgroundColor: 'transparent',
	                borderColor: '#ccc',
	                borderWidth: 0,
	                padding: 5,
	                itemSize: 15,
	                itemGap: 8,
	                showTitle: true,
	                iconStyle: {
	                    normal: {
	                        borderColor: '#666',
	                        color: 'none'
	                    },
	                    emphasis: { borderColor: '#3E98C5' }
	                }
	            }
	        });
	    return ToolboxModel;
	});
	define('echarts/component/toolbox/ToolboxView', ['require', './featureManager', 'zrender/core/util', '../../util/graphic', '../../model/Model', '../../data/DataDiffer', '../helper/listComponent', 'zrender/contain/text', '../../echarts'], function (require) {
	    var featureManager = require('./featureManager');
	    var zrUtil = require('zrender/core/util');
	    var graphic = require('../../util/graphic');
	    var Model = require('../../model/Model');
	    var DataDiffer = require('../../data/DataDiffer');
	    var listComponentHelper = require('../helper/listComponent');
	    var textContain = require('zrender/contain/text');
	    return require('../../echarts').extendComponentView({
	        type: 'toolbox',
	        render: function (toolboxModel, ecModel, api, payload) {
	            var group = this.group;
	            group.removeAll();
	            if (!toolboxModel.get('show')) {
	                return;
	            }
	            var itemSize = +toolboxModel.get('itemSize');
	            var featureOpts = toolboxModel.get('feature') || {};
	            var features = this._features || (this._features = {});
	            var featureNames = [];
	            zrUtil.each(featureOpts, function (opt, name) {
	                featureNames.push(name);
	            });
	            new DataDiffer(this._featureNames || [], featureNames).add(process).update(process).remove(zrUtil.curry(process, null)).execute();
	            // Keep for diff.
	            this._featureNames = featureNames;
	            function process(newIndex, oldIndex) {
	                var featureName = featureNames[newIndex];
	                var oldName = featureNames[oldIndex];
	                var featureOpt = featureOpts[featureName];
	                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	                var feature;
	                if (featureName && !oldName) {
	                    // Create
	                    if (isUserFeatureName(featureName)) {
	                        feature = {
	                            model: featureModel,
	                            onclick: featureModel.option.onclick,
	                            featureName: featureName
	                        };
	                    } else {
	                        var Feature = featureManager.get(featureName);
	                        if (!Feature) {
	                            return;
	                        }
	                        feature = new Feature(featureModel, ecModel, api);
	                    }
	                    features[featureName] = feature;
	                } else {
	                    feature = features[oldName];
	                    // If feature does not exsit.
	                    if (!feature) {
	                        return;
	                    }
	                    feature.model = featureModel;
	                    feature.ecModel = ecModel;
	                    feature.api = api;
	                }
	                if (!featureName && oldName) {
	                    feature.dispose && feature.dispose(ecModel, api);
	                    return;
	                }
	                if (!featureModel.get('show') || feature.unusable) {
	                    feature.remove && feature.remove(ecModel, api);
	                    return;
	                }
	                createIconPaths(featureModel, feature, featureName);
	                featureModel.setIconStatus = function (iconName, status) {
	                    var option = this.option;
	                    var iconPaths = this.iconPaths;
	                    option.iconStatus = option.iconStatus || {};
	                    option.iconStatus[iconName] = status;
	                    // FIXME
	                    iconPaths[iconName] && iconPaths[iconName].trigger(status);
	                };
	                if (feature.render) {
	                    feature.render(featureModel, ecModel, api, payload);
	                }
	            }
	            function createIconPaths(featureModel, feature, featureName) {
	                var iconStyleModel = featureModel.getModel('iconStyle');
	                // If one feature has mutiple icon. they are orginaized as
	                // {
	                //     icon: {
	                //         foo: '',
	                //         bar: ''
	                //     },
	                //     title: {
	                //         foo: '',
	                //         bar: ''
	                //     }
	                // }
	                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	                var titles = featureModel.get('title') || {};
	                if (typeof icons === 'string') {
	                    var icon = icons;
	                    var title = titles;
	                    icons = {};
	                    titles = {};
	                    icons[featureName] = icon;
	                    titles[featureName] = title;
	                }
	                var iconPaths = featureModel.iconPaths = {};
	                zrUtil.each(icons, function (icon, iconName) {
	                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
	                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	                    var style = {
	                            x: -itemSize / 2,
	                            y: -itemSize / 2,
	                            width: itemSize,
	                            height: itemSize
	                        };
	                    var path = icon.indexOf('image://') === 0 ? (style.image = icon.slice(8), new graphic.Image({ style: style })) : graphic.makePath(icon.replace('path://', ''), {
	                            style: normalStyle,
	                            hoverStyle: hoverStyle,
	                            rectHover: true
	                        }, style, 'center');
	                    graphic.setHoverStyle(path);
	                    if (toolboxModel.get('showTitle')) {
	                        path.__title = titles[iconName];
	                        path.on('mouseover', function () {
	                            path.setStyle({
	                                text: titles[iconName],
	                                textPosition: hoverStyle.textPosition || 'bottom',
	                                textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	                                textAlign: hoverStyle.textAlign || 'center'
	                            });
	                        }).on('mouseout', function () {
	                            path.setStyle({ textFill: null });
	                        });
	                    }
	                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');
	                    group.add(path);
	                    path.on('click', zrUtil.bind(feature.onclick, feature, ecModel, api, iconName));
	                    iconPaths[iconName] = path;
	                });
	            }
	            listComponentHelper.layout(group, toolboxModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, toolboxModel);
	            // Adjust icon title positions to avoid them out of screen
	            group.eachChild(function (icon) {
	                var titleText = icon.__title;
	                var hoverStyle = icon.hoverStyle;
	                // May be background element
	                if (hoverStyle && titleText) {
	                    var rect = textContain.getBoundingRect(titleText, hoverStyle.font);
	                    var offsetX = icon.position[0] + group.position[0];
	                    var offsetY = icon.position[1] + group.position[1] + itemSize;
	                    var needPutOnTop = false;
	                    if (offsetY + rect.height > api.getHeight()) {
	                        hoverStyle.textPosition = 'top';
	                        needPutOnTop = true;
	                    }
	                    var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;
	                    if (offsetX + rect.width / 2 > api.getWidth()) {
	                        hoverStyle.textPosition = [
	                            '100%',
	                            topOffset
	                        ];
	                        hoverStyle.textAlign = 'right';
	                    } else if (offsetX - rect.width / 2 < 0) {
	                        hoverStyle.textPosition = [
	                            0,
	                            topOffset
	                        ];
	                        hoverStyle.textAlign = 'left';
	                    }
	                }
	            });
	        },
	        updateView: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	            });
	        },
	        updateLayout: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	            });
	        },
	        remove: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.remove && feature.remove(ecModel, api);
	            });
	            this.group.removeAll();
	        },
	        dispose: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.dispose && feature.dispose(ecModel, api);
	            });
	        }
	    });
	    function isUserFeatureName(featureName) {
	        return featureName.indexOf('my') === 0;
	    }
	});
	define('echarts/component/toolbox/feature/MagicType', ['require', 'zrender/core/util', '../../../echarts', '../featureManager'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    function MagicType(model) {
	        this.model = model;
	    }
	    MagicType.defaultOption = {
	        show: true,
	        type: [],
	        icon: {
	            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z',
	            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	        },
	        title: {
	            line: '切换为折线图',
	            bar: '切换为柱状图',
	            stack: '切换为堆叠',
	            tiled: '切换为平铺'
	        },
	        option: {},
	        seriesIndex: {}
	    };
	    var proto = MagicType.prototype;
	    proto.getIcons = function () {
	        var model = this.model;
	        var availableIcons = model.get('icon');
	        var icons = {};
	        zrUtil.each(model.get('type'), function (type) {
	            if (availableIcons[type]) {
	                icons[type] = availableIcons[type];
	            }
	        });
	        return icons;
	    };
	    var seriesOptGenreator = {
	            'line': function (seriesType, seriesId, seriesModel, model) {
	                if (seriesType === 'bar') {
	                    return zrUtil.merge({
	                        id: seriesId,
	                        type: 'line',
	                        data: seriesModel.get('data'),
	                        stack: seriesModel.get('stack'),
	                        markPoint: seriesModel.get('markPoint'),
	                        markLine: seriesModel.get('markLine')
	                    }, model.get('option.line') || {}, true);
	                }
	            },
	            'bar': function (seriesType, seriesId, seriesModel, model) {
	                if (seriesType === 'line') {
	                    return zrUtil.merge({
	                        id: seriesId,
	                        type: 'bar',
	                        data: seriesModel.get('data'),
	                        stack: seriesModel.get('stack'),
	                        markPoint: seriesModel.get('markPoint'),
	                        markLine: seriesModel.get('markLine')
	                    }, model.get('option.bar') || {}, true);
	                }
	            },
	            'stack': function (seriesType, seriesId, seriesModel, model) {
	                if (seriesType === 'line' || seriesType === 'bar') {
	                    return zrUtil.merge({
	                        id: seriesId,
	                        stack: '__ec_magicType_stack__'
	                    }, model.get('option.stack') || {}, true);
	                }
	            },
	            'tiled': function (seriesType, seriesId, seriesModel, model) {
	                if (seriesType === 'line' || seriesType === 'bar') {
	                    return zrUtil.merge({
	                        id: seriesId,
	                        stack: ''
	                    }, model.get('option.tiled') || {}, true);
	                }
	            }
	        };
	    var radioTypes = [
	            [
	                'line',
	                'bar'
	            ],
	            [
	                'stack',
	                'tiled'
	            ]
	        ];
	    proto.onclick = function (ecModel, api, type) {
	        var model = this.model;
	        var seriesIndex = model.get('seriesIndex.' + type);
	        // Not supported magicType
	        if (!seriesOptGenreator[type]) {
	            return;
	        }
	        var newOption = { series: [] };
	        var generateNewSeriesTypes = function (seriesModel) {
	            var seriesType = seriesModel.subType;
	            var seriesId = seriesModel.id;
	            var newSeriesOpt = seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);
	            if (newSeriesOpt) {
	                // PENDING If merge original option?
	                zrUtil.defaults(newSeriesOpt, seriesModel.option);
	                newOption.series.push(newSeriesOpt);
	            }
	            // Modify boundaryGap
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	                if (categoryAxis) {
	                    var axisDim = categoryAxis.dim;
	                    var axisIndex = seriesModel.get(axisDim + 'AxisIndex');
	                    var axisKey = axisDim + 'Axis';
	                    newOption[axisKey] = newOption[axisKey] || [];
	                    for (var i = 0; i <= axisIndex; i++) {
	                        newOption[axisKey][axisIndex] = newOption[axisKey][axisIndex] || {};
	                    }
	                    newOption[axisKey][axisIndex].boundaryGap = type === 'bar' ? true : false;
	                }
	            }
	        };
	        zrUtil.each(radioTypes, function (radio) {
	            if (zrUtil.indexOf(radio, type) >= 0) {
	                zrUtil.each(radio, function (item) {
	                    model.setIconStatus(item, 'normal');
	                });
	            }
	        });
	        model.setIconStatus(type, 'emphasis');
	        ecModel.eachComponent({
	            mainType: 'series',
	            query: seriesIndex == null ? null : { seriesIndex: seriesIndex }
	        }, generateNewSeriesTypes);
	        api.dispatchAction({
	            type: 'changeMagicType',
	            currentType: type,
	            newOption: newOption
	        });
	    };
	    var echarts = require('../../../echarts');
	    echarts.registerAction({
	        type: 'changeMagicType',
	        event: 'magicTypeChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        ecModel.mergeOption(payload.newOption);
	    });
	    require('../featureManager').register('magicType', MagicType);
	    return MagicType;
	});
	define('echarts/component/toolbox/feature/SaveAsImage', ['require', 'zrender/core/env', '../featureManager'], function (require) {
	    var env = require('zrender/core/env');
	    function SaveAsImage(model) {
	        this.model = model;
	    }
	    SaveAsImage.defaultOption = {
	        show: true,
	        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	        title: '保存为图片',
	        type: 'png',
	        name: '',
	        excludeComponents: ['toolbox'],
	        pixelRatio: 1,
	        lang: ['右键另存为图片']
	    };
	    SaveAsImage.prototype.unusable = !env.canvasSupported;
	    var proto = SaveAsImage.prototype;
	    proto.onclick = function (ecModel, api) {
	        var model = this.model;
	        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	        var $a = document.createElement('a');
	        var type = model.get('type', true) || 'png';
	        $a.download = title + '.' + type;
	        $a.target = '_blank';
	        var url = api.getConnectedDataURL({
	                type: type,
	                backgroundColor: model.get('backgroundColor', true) || ecModel.get('backgroundColor') || '#fff',
	                excludeComponents: model.get('excludeComponents'),
	                pixelRatio: model.get('pixelRatio')
	            });
	        $a.href = url;
	        // Chrome and Firefox
	        if (typeof MouseEvent === 'function') {
	            var evt = new MouseEvent('click', {
	                    view: window,
	                    bubbles: true,
	                    cancelable: false
	                });
	            $a.dispatchEvent(evt);
	        }    // IE
	        else {
	            var lang = model.get('lang');
	            var html = '' + '<body style="margin:0;">' + '<img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || '') + '" />' + '</body>';
	            var tab = window.open();
	            tab.document.write(html);
	        }
	    };
	    require('../featureManager').register('saveAsImage', SaveAsImage);
	    return SaveAsImage;
	});
	define('echarts/component/toolbox/feature/Restore', ['require', '../../dataZoom/history', '../featureManager', '../../../echarts'], function (require) {
	    'use strict';
	    var history = require('../../dataZoom/history');
	    function Restore(model) {
	        this.model = model;
	    }
	    Restore.defaultOption = {
	        show: true,
	        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	        title: '还原'
	    };
	    var proto = Restore.prototype;
	    proto.onclick = function (ecModel, api, type) {
	        history.clear(ecModel);
	        api.dispatchAction({
	            type: 'restore',
	            from: this.uid
	        });
	    };
	    require('../featureManager').register('restore', Restore);
	    require('../../../echarts').registerAction({
	        type: 'restore',
	        event: 'restore',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        ecModel.resetOption('recreate');
	    });
	    return Restore;
	});
	define('echarts/component/toolbox/feature/DataZoom', ['require', 'zrender/core/util', '../../helper/BrushController', '../../helper/brushHelper', '../../dataZoom/history', '../../dataZoomSelect', '../featureManager', '../../../echarts'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var BrushController = require('../../helper/BrushController');
	    var brushHelper = require('../../helper/brushHelper');
	    var history = require('../../dataZoom/history');
	    var each = zrUtil.each;
	    // Use dataZoomSelect
	    require('../../dataZoomSelect');
	    // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
	    var DATA_ZOOM_ID_BASE = ' _ec_ toolbox-dataZoom_';
	    function DataZoom(model, ecModel, api) {
	        /**
	         * @private
	         * @type {module:echarts/component/helper/BrushController}
	         */
	        (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._isZoomActive;
	    }
	    DataZoom.defaultOption = {
	        show: true,
	        icon: {
	            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	        },
	        title: {
	            zoom: '区域缩放',
	            back: '区域缩放还原'
	        }
	    };
	    var proto = DataZoom.prototype;
	    proto.render = function (featureModel, ecModel, api, payload) {
	        this.model = featureModel;
	        this.ecModel = ecModel;
	        this.api = api;
	        updateZoomBtnStatus(featureModel, ecModel, this, payload);
	        updateBackBtnStatus(featureModel, ecModel);
	    };
	    proto.onclick = function (ecModel, api, type) {
	        handlers[type].call(this);
	    };
	    proto.remove = function (ecModel, api) {
	        this._brushController.unmount();
	    };
	    proto.dispose = function (ecModel, api) {
	        this._brushController.dispose();
	    };
	    /**
	     * @private
	     */
	    var handlers = {
	            zoom: function () {
	                var nextActive = !this._isZoomActive;
	                this.api.dispatchAction({
	                    type: 'takeGlobalCursor',
	                    key: 'dataZoomSelect',
	                    dataZoomSelectActive: nextActive
	                });
	            },
	            back: function () {
	                this._dispatchZoomAction(history.pop(this.ecModel));
	            }
	        };
	    /**
	     * @private
	     */
	    proto._onBrush = function (areas, opt) {
	        if (!opt.isEnd || !areas.length) {
	            return;
	        }
	        var snapshot = {};
	        var ecModel = this.ecModel;
	        this._brushController.updateCovers([]);
	        // remove cover
	        var coordInfoList = brushHelper.makeCoordInfoList(retrieveAxisSetting(this.model.option), ecModel);
	        var rangesCoordInfoList = [];
	        brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);
	        var area = areas[0];
	        // dataZoom can not multiple area.
	        var coordInfo = rangesCoordInfoList[0];
	        var coordRange = area.coordRange;
	        var brushType = area.brushType;
	        if (coordInfo && coordRange) {
	            if (brushType === 'rect') {
	                setBatch('xAxis', coordRange[0], coordInfo);
	                setBatch('yAxis', coordRange[1], coordInfo);
	            } else {
	                var axisNames = {
	                        lineX: 'xAxis',
	                        lineY: 'yAxis'
	                    };
	                setBatch(axisNames[brushType], coordRange, coordInfo);
	            }
	        }
	        history.push(ecModel, snapshot);
	        this._dispatchZoomAction(snapshot);
	        function setBatch(axisName, minMax, coordInfo) {
	            var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);
	            if (dataZoomModel) {
	                snapshot[dataZoomModel.id] = {
	                    dataZoomId: dataZoomModel.id,
	                    startValue: minMax[0],
	                    endValue: minMax[1]
	                };
	            }
	        }
	        function findDataZoom(axisName, axisModel, ecModel) {
	            var dataZoomModel;
	            ecModel.eachComponent({
	                mainType: 'dataZoom',
	                subType: 'select'
	            }, function (dzModel, dataZoomIndex) {
	                var axisIndex = dzModel.get(axisName + 'Index');
	                if (axisIndex != null && ecModel.getComponent(axisName, axisIndex) === axisModel) {
	                    dataZoomModel = dzModel;
	                }
	            });
	            return dataZoomModel;
	        }
	    };
	    /**
	     * @private
	     */
	    proto._dispatchZoomAction = function (snapshot) {
	        var batch = [];
	        // Convert from hash map to array.
	        each(snapshot, function (batchItem, dataZoomId) {
	            batch.push(zrUtil.clone(batchItem));
	        });
	        batch.length && this.api.dispatchAction({
	            type: 'dataZoom',
	            from: this.uid,
	            batch: batch
	        });
	    };
	    function retrieveAxisSetting(option) {
	        var setting = {};
	        // Compatible with previous setting: null => all axis, false => no axis.
	        zrUtil.each([
	            'xAxisIndex',
	            'yAxisIndex'
	        ], function (name) {
	            setting[name] = option[name];
	            setting[name] == null && (setting[name] = 'all');
	            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	        });
	        return setting;
	    }
	    function updateBackBtnStatus(featureModel, ecModel) {
	        featureModel.setIconStatus('back', history.count(ecModel) > 1 ? 'emphasis' : 'normal');
	    }
	    function updateZoomBtnStatus(featureModel, ecModel, view, payload) {
	        var zoomActive = view._isZoomActive;
	        if (payload && payload.type === 'takeGlobalCursor') {
	            zoomActive = payload.key === 'dataZoomSelect' ? payload.dataZoomSelectActive : false;
	        }
	        view._isZoomActive = zoomActive;
	        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');
	        var coordInfoList = brushHelper.makeCoordInfoList(retrieveAxisSetting(featureModel.option), ecModel);
	        var brushType = coordInfoList.xAxisHas && !coordInfoList.yAxisHas ? 'lineX' : !coordInfoList.xAxisHas && coordInfoList.yAxisHas ? 'lineY' : 'rect';
	        view._brushController.setPanels(brushHelper.makePanelOpts(coordInfoList)).enableBrush(zoomActive ? {
	            brushType: brushType,
	            brushStyle: {
	                lineWidth: 0,
	                fill: 'rgba(0,0,0,0.2)'
	            }
	        } : false);
	    }
	    require('../featureManager').register('dataZoom', DataZoom);
	    // Create special dataZoom option for select
	    require('../../../echarts').registerPreprocessor(function (option) {
	        if (!option) {
	            return;
	        }
	        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
	        if (!zrUtil.isArray(dataZoomOpts)) {
	            option.dataZoom = dataZoomOpts = [dataZoomOpts];
	        }
	        var toolboxOpt = option.toolbox;
	        if (toolboxOpt) {
	            // Assume there is only one toolbox
	            if (zrUtil.isArray(toolboxOpt)) {
	                toolboxOpt = toolboxOpt[0];
	            }
	            if (toolboxOpt && toolboxOpt.feature) {
	                var dataZoomOpt = toolboxOpt.feature.dataZoom;
	                addForAxis('xAxis', dataZoomOpt);
	                addForAxis('yAxis', dataZoomOpt);
	            }
	        }
	        function addForAxis(axisName, dataZoomOpt) {
	            if (!dataZoomOpt) {
	                return;
	            }
	            // Try not to modify model, because it is not merged yet.
	            var axisIndicesName = axisName + 'Index';
	            var givenAxisIndices = dataZoomOpt[axisIndicesName];
	            if (givenAxisIndices != null && givenAxisIndices != 'all' && !zrUtil.isArray(givenAxisIndices)) {
	                givenAxisIndices = givenAxisIndices === false || givenAxisIndices === 'none' ? [] : [givenAxisIndices];
	            }
	            forEachComponent(axisName, function (axisOpt, axisIndex) {
	                if (givenAxisIndices != null && givenAxisIndices != 'all' && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1) {
	                    return;
	                }
	                var newOpt = {
	                        type: 'select',
	                        $fromToolbox: true,
	                        id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	                    };
	                // FIXME
	                // Only support one axis now.
	                newOpt[axisIndicesName] = axisIndex;
	                dataZoomOpts.push(newOpt);
	            });
	        }
	        function forEachComponent(mainType, cb) {
	            var opts = option[mainType];
	            if (!zrUtil.isArray(opts)) {
	                opts = opts ? [opts] : [];
	            }
	            each(opts, cb);
	        }
	    });
	    return DataZoom;
	});
	define('echarts/component/marker/MarkLineModel', ['require', './MarkerModel'], function (require) {
	    return require('./MarkerModel').extend({
	        type: 'markLine',
	        defaultOption: {
	            zlevel: 0,
	            z: 5,
	            symbol: [
	                'circle',
	                'arrow'
	            ],
	            symbolSize: [
	                8,
	                16
	            ],
	            precision: 2,
	            tooltip: { trigger: 'item' },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'end'
	                },
	                emphasis: { show: true }
	            },
	            lineStyle: {
	                normal: { type: 'dashed' },
	                emphasis: { width: 3 }
	            },
	            animationEasing: 'linear'
	        }
	    });
	});
	define('echarts/scale/Interval', ['require', '../util/number', '../util/format', './Scale'], function (require) {
	    var numberUtil = require('../util/number');
	    var formatUtil = require('../util/format');
	    var Scale = require('./Scale');
	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    /**
	     * @alias module:echarts/coord/scale/Interval
	     * @constructor
	     */
	    var IntervalScale = Scale.extend({
	            type: 'interval',
	            _interval: 0,
	            setExtent: function (start, end) {
	                var thisExtent = this._extent;
	                //start,end may be a Number like '25',so...
	                if (!isNaN(start)) {
	                    thisExtent[0] = parseFloat(start);
	                }
	                if (!isNaN(end)) {
	                    thisExtent[1] = parseFloat(end);
	                }
	            },
	            unionExtent: function (other) {
	                var extent = this._extent;
	                other[0] < extent[0] && (extent[0] = other[0]);
	                other[1] > extent[1] && (extent[1] = other[1]);
	                // unionExtent may called by it's sub classes
	                IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	            },
	            getInterval: function () {
	                if (!this._interval) {
	                    this.niceTicks();
	                }
	                return this._interval;
	            },
	            setInterval: function (interval) {
	                this._interval = interval;
	                // Dropped auto calculated niceExtent and use user setted extent
	                // We assume user wan't to set both interval, min, max to get a better result
	                this._niceExtent = this._extent.slice();
	            },
	            getTicks: function () {
	                if (!this._interval) {
	                    this.niceTicks();
	                }
	                var interval = this._interval;
	                var extent = this._extent;
	                var ticks = [];
	                // Consider this case: using dataZoom toolbox, zoom and zoom.
	                var safeLimit = 10000;
	                if (interval) {
	                    var niceExtent = this._niceExtent;
	                    if (extent[0] < niceExtent[0]) {
	                        ticks.push(extent[0]);
	                    }
	                    var tick = niceExtent[0];
	                    while (tick <= niceExtent[1]) {
	                        ticks.push(tick);
	                        // Avoid rounding error
	                        tick = numberUtil.round(tick + interval);
	                        if (ticks.length > safeLimit) {
	                            return [];
	                        }
	                    }
	                    if (extent[1] > niceExtent[1]) {
	                        ticks.push(extent[1]);
	                    }
	                }
	                return ticks;
	            },
	            getTicksLabels: function () {
	                var labels = [];
	                var ticks = this.getTicks();
	                for (var i = 0; i < ticks.length; i++) {
	                    labels.push(this.getLabel(ticks[i]));
	                }
	                return labels;
	            },
	            getLabel: function (data) {
	                return formatUtil.addCommas(data);
	            },
	            niceTicks: function (splitNumber) {
	                splitNumber = splitNumber || 5;
	                var extent = this._extent;
	                var span = extent[1] - extent[0];
	                if (!isFinite(span)) {
	                    return;
	                }
	                // User may set axis min 0 and data are all negative
	                // FIXME If it needs to reverse ?
	                if (span < 0) {
	                    span = -span;
	                    extent.reverse();
	                }
	                // From "Nice Numbers for Graph Labels" of Graphic Gems
	                // var niceSpan = numberUtil.nice(span, false);
	                var step = numberUtil.nice(span / splitNumber, true);
	                // Niced extent inside original extent
	                var niceExtent = [
	                        numberUtil.round(mathCeil(extent[0] / step) * step),
	                        numberUtil.round(mathFloor(extent[1] / step) * step)
	                    ];
	                this._interval = step;
	                this._niceExtent = niceExtent;
	            },
	            niceExtent: function (splitNumber, fixMin, fixMax) {
	                var extent = this._extent;
	                // If extent start and end are same, expand them
	                if (extent[0] === extent[1]) {
	                    if (extent[0] !== 0) {
	                        // Expand extent
	                        var expandSize = extent[0];
	                        // In the fowllowing case
	                        //      Axis has been fixed max 100
	                        //      Plus data are all 100 and axis extent are [100, 100].
	                        // Extend to the both side will cause expanded max is larger than fixed max.
	                        // So only expand to the smaller side.
	                        if (!fixMax) {
	                            extent[1] += expandSize / 2;
	                            extent[0] -= expandSize / 2;
	                        } else {
	                            extent[0] -= expandSize / 2;
	                        }
	                    } else {
	                        extent[1] = 1;
	                    }
	                }
	                var span = extent[1] - extent[0];
	                // If there are no data and extent are [Infinity, -Infinity]
	                if (!isFinite(span)) {
	                    extent[0] = 0;
	                    extent[1] = 1;
	                }
	                this.niceTicks(splitNumber);
	                // var extent = this._extent;
	                var interval = this._interval;
	                if (!fixMin) {
	                    extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	                }
	                if (!fixMax) {
	                    extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	                }
	            }
	        });
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    IntervalScale.create = function () {
	        return new IntervalScale();
	    };
	    return IntervalScale;
	});
	define('echarts/component/marker/MarkLineView', ['require', 'zrender/core/util', '../../data/List', '../../util/number', './markerHelper', '../../chart/helper/LineDraw', './MarkerView'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var List = require('../../data/List');
	    var numberUtil = require('../../util/number');
	    var markerHelper = require('./markerHelper');
	    var LineDraw = require('../../chart/helper/LineDraw');
	    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {
	        var data = seriesModel.getData();
	        // Special type markLine like 'min', 'max', 'average'
	        var mlType = item.type;
	        if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average' || (item.xAxis != null || item.yAxis != null))) {
	            var valueAxis;
	            var valueDataDim;
	            var value;
	            if (item.yAxis != null || item.xAxis != null) {
	                valueDataDim = item.yAxis != null ? 'y' : 'x';
	                valueAxis = coordSys.getAxis(valueDataDim);
	                value = zrUtil.retrieve(item.yAxis, item.xAxis);
	            } else {
	                var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	                valueDataDim = axisInfo.valueDataDim;
	                valueAxis = axisInfo.valueAxis;
	                value = markerHelper.numCalculate(data, valueDataDim, mlType);
	            }
	            var valueIndex = valueDataDim === 'x' ? 0 : 1;
	            var baseIndex = 1 - valueIndex;
	            var mlFrom = zrUtil.clone(item);
	            var mlTo = {};
	            mlFrom.type = null;
	            mlFrom.coord = [];
	            mlTo.coord = [];
	            mlFrom.coord[baseIndex] = -Infinity;
	            mlTo.coord[baseIndex] = Infinity;
	            var precision = mlModel.get('precision');
	            if (precision >= 0) {
	                value = +value.toFixed(precision);
	            }
	            mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;
	            item = [
	                mlFrom,
	                mlTo,
	                {
	                    type: mlType,
	                    valueIndex: item.valueIndex,
	                    value: value
	                }
	            ];
	        }
	        item = [
	            markerHelper.dataTransform(seriesModel, item[0]),
	            markerHelper.dataTransform(seriesModel, item[1]),
	            zrUtil.extend({}, item[2])
	        ];
	        // Avoid line data type is extended by from(to) data type
	        item[2].type = item[2].type || '';
	        // Merge from option and to option into line option
	        zrUtil.merge(item[2], item[0]);
	        zrUtil.merge(item[2], item[1]);
	        return item;
	    };
	    function isInifinity(val) {
	        return !isNaN(val) && !isFinite(val);
	    }
	    // If a markLine has one dim
	    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	        var otherDimIndex = 1 - dimIndex;
	        var dimName = coordSys.dimensions[dimIndex];
	        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
	    }
	    function markLineFilter(coordSys, item) {
	        if (coordSys.type === 'cartesian2d') {
	            var fromCoord = item[0].coord;
	            var toCoord = item[1].coord;
	            // In case
	            // {
	            //  markLine: {
	            //    data: [{ yAxis: 2 }]
	            //  }
	            // }
	            if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
	                return true;
	            }
	        }
	        return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);
	    }
	    function updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var itemModel = data.getItemModel(idx);
	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [
	                xPx,
	                yPx
	            ];
	        } else {
	            // Chart like bar may have there own marker positioning logic
	            if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));
	            } else {
	                var dims = coordSys.dimensions;
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                point = coordSys.dataToPoint([
	                    x,
	                    y
	                ]);
	            }
	            // Expand line to the edge of grid if value on one axis is Inifnity
	            // In case
	            //  markLine: {
	            //    data: [{
	            //      yAxis: 2
	            //      // or
	            //      type: 'average'
	            //    }]
	            //  }
	            if (coordSys.type === 'cartesian2d') {
	                var xAxis = coordSys.getAxis('x');
	                var yAxis = coordSys.getAxis('y');
	                var dims = coordSys.dimensions;
	                if (isInifinity(data.get(dims[0], idx))) {
	                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
	                } else if (isInifinity(data.get(dims[1], idx))) {
	                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
	                }
	            }
	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	        }
	        data.setItemLayout(idx, point);
	    }
	    require('./MarkerView').extend({
	        type: 'markLine',
	        updateLayout: function (markLineModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var mlModel = seriesModel.markLineModel;
	                if (mlModel) {
	                    var mlData = mlModel.getData();
	                    var fromData = mlModel.__from;
	                    var toData = mlModel.__to;
	                    // Update visual and layout of from symbol and to symbol
	                    fromData.each(function (idx) {
	                        updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
	                        updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
	                    });
	                    // Update layout of line
	                    mlData.each(function (idx) {
	                        mlData.setItemLayout(idx, [
	                            fromData.getItemLayout(idx),
	                            toData.getItemLayout(idx)
	                        ]);
	                    });
	                    this.markerGroupMap[seriesModel.name].updateLayout();
	                }
	            }, this);
	        },
	        renderSeries: function (seriesModel, mlModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();
	            var lineDrawMap = this.markerGroupMap;
	            var lineDraw = lineDrawMap[seriesName];
	            if (!lineDraw) {
	                lineDraw = lineDrawMap[seriesName] = new LineDraw();
	            }
	            this.group.add(lineDraw.group);
	            var mlData = createList(coordSys, seriesModel, mlModel);
	            var fromData = mlData.from;
	            var toData = mlData.to;
	            var lineData = mlData.line;
	            mlModel.__from = fromData;
	            mlModel.__to = toData;
	            // Line data for tooltip and formatter
	            mlModel.setData(lineData);
	            var symbolType = mlModel.get('symbol');
	            var symbolSize = mlModel.get('symbolSize');
	            if (!zrUtil.isArray(symbolType)) {
	                symbolType = [
	                    symbolType,
	                    symbolType
	                ];
	            }
	            if (typeof symbolSize === 'number') {
	                symbolSize = [
	                    symbolSize,
	                    symbolSize
	                ];
	            }
	            // Update visual and layout of from symbol and to symbol
	            mlData.from.each(function (idx) {
	                updateDataVisualAndLayout(fromData, idx, true);
	                updateDataVisualAndLayout(toData, idx, false);
	            });
	            // Update visual and layout of line
	            lineData.each(function (idx) {
	                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	                lineData.setItemVisual(idx, { color: lineColor || fromData.getItemVisual(idx, 'color') });
	                lineData.setItemLayout(idx, [
	                    fromData.getItemLayout(idx),
	                    toData.getItemLayout(idx)
	                ]);
	                lineData.setItemVisual(idx, {
	                    'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),
	                    'fromSymbol': fromData.getItemVisual(idx, 'symbol'),
	                    'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),
	                    'toSymbol': toData.getItemVisual(idx, 'symbol')
	                });
	            });
	            lineDraw.updateData(lineData);
	            // Set host model for tooltip
	            // FIXME
	            mlData.line.eachItemGraphicEl(function (el, idx) {
	                el.traverse(function (child) {
	                    child.dataModel = mlModel;
	                });
	            });
	            function updateDataVisualAndLayout(data, idx, isFrom) {
	                var itemModel = data.getItemModel(idx);
	                updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);
	                data.setItemVisual(idx, {
	                    symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	                    symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	                    color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	                });
	            }
	            lineDraw.__keep = true;
	            lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');
	        }
	    });
	    /**
	     * @inner
	     * @param {module:echarts/coord/*} coordSys
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, mlModel) {
	        var coordDimsInfos;
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]) || {};
	                // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	        } else {
	            coordDimsInfos = [{
	                    name: 'value',
	                    type: 'float'
	                }];
	        }
	        var fromData = new List(coordDimsInfos, mlModel);
	        var toData = new List(coordDimsInfos, mlModel);
	        // No dimensions
	        var lineData = new List([], mlModel);
	        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel));
	        if (coordSys) {
	            optData = zrUtil.filter(optData, zrUtil.curry(markLineFilter, coordSys));
	        }
	        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
	                return item.value;
	            };
	        fromData.initData(zrUtil.map(optData, function (item) {
	            return item[0];
	        }), null, dimValueGetter);
	        toData.initData(zrUtil.map(optData, function (item) {
	            return item[1];
	        }), null, dimValueGetter);
	        lineData.initData(zrUtil.map(optData, function (item) {
	            return item[2];
	        }));
	        lineData.hasItemOption = true;
	        return {
	            from: fromData,
	            to: toData,
	            line: lineData
	        };
	    }
	});
	define('zrender/vml/graphic', ['require', '../core/env', '../core/vector', '../core/BoundingRect', '../core/PathProxy', '../tool/color', '../contain/text', '../graphic/mixin/RectText', '../graphic/Displayable', '../graphic/Image', '../graphic/Text', '../graphic/Path', '../graphic/Gradient', './core'], function (require) {
	    if (!require('../core/env').canvasSupported) {
	        var vec2 = require('../core/vector');
	        var BoundingRect = require('../core/BoundingRect');
	        var CMD = require('../core/PathProxy').CMD;
	        var colorTool = require('../tool/color');
	        var textContain = require('../contain/text');
	        var RectText = require('../graphic/mixin/RectText');
	        var Displayable = require('../graphic/Displayable');
	        var ZImage = require('../graphic/Image');
	        var Text = require('../graphic/Text');
	        var Path = require('../graphic/Path');
	        var Gradient = require('../graphic/Gradient');
	        var vmlCore = require('./core');
	        var round = Math.round;
	        var sqrt = Math.sqrt;
	        var abs = Math.abs;
	        var cos = Math.cos;
	        var sin = Math.sin;
	        var mathMax = Math.max;
	        var applyTransform = vec2.applyTransform;
	        var comma = ',';
	        var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';
	        var Z = 21600;
	        var Z2 = Z / 2;
	        var ZLEVEL_BASE = 100000;
	        var Z_BASE = 1000;
	        var initRootElStyle = function (el) {
	            el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	            el.coordsize = Z + ',' + Z;
	            el.coordorigin = '0,0';
	        };
	        var encodeHtmlAttribute = function (s) {
	            return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	        };
	        var rgb2Str = function (r, g, b) {
	            return 'rgb(' + [
	                r,
	                g,
	                b
	            ].join(',') + ')';
	        };
	        var append = function (parent, child) {
	            if (child && parent && child.parentNode !== parent) {
	                parent.appendChild(child);
	            }
	        };
	        var remove = function (parent, child) {
	            if (child && parent && child.parentNode === parent) {
	                parent.removeChild(child);
	            }
	        };
	        var getZIndex = function (zlevel, z, z2) {
	            // z 的取值范围为 [0, 1000]
	            return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	        };
	        var parsePercent = function (value, maxValue) {
	            if (typeof value === 'string') {
	                if (value.lastIndexOf('%') >= 0) {
	                    return parseFloat(value) / 100 * maxValue;
	                }
	                return parseFloat(value);
	            }
	            return value;
	        };
	        /***************************************************
	     * PATH
	     **************************************************/
	        var setColorAndOpacity = function (el, color, opacity) {
	            var colorArr = colorTool.parse(color);
	            opacity = +opacity;
	            if (isNaN(opacity)) {
	                opacity = 1;
	            }
	            if (colorArr) {
	                el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	                el.opacity = opacity * colorArr[3];
	            }
	        };
	        var getColorAndAlpha = function (color) {
	            var colorArr = colorTool.parse(color);
	            return [
	                rgb2Str(colorArr[0], colorArr[1], colorArr[2]),
	                colorArr[3]
	            ];
	        };
	        var updateFillNode = function (el, style, zrEl) {
	            // TODO pattern
	            var fill = style.fill;
	            if (fill != null) {
	                // Modified from excanvas
	                if (fill instanceof Gradient) {
	                    var gradientType;
	                    var angle = 0;
	                    var focus = [
	                            0,
	                            0
	                        ];
	                    // additional offset
	                    var shift = 0;
	                    // scale factor for offset
	                    var expansion = 1;
	                    var rect = zrEl.getBoundingRect();
	                    var rectWidth = rect.width;
	                    var rectHeight = rect.height;
	                    if (fill.type === 'linear') {
	                        gradientType = 'gradient';
	                        var transform = zrEl.transform;
	                        var p0 = [
	                                fill.x * rectWidth,
	                                fill.y * rectHeight
	                            ];
	                        var p1 = [
	                                fill.x2 * rectWidth,
	                                fill.y2 * rectHeight
	                            ];
	                        if (transform) {
	                            applyTransform(p0, p0, transform);
	                            applyTransform(p1, p1, transform);
	                        }
	                        var dx = p1[0] - p0[0];
	                        var dy = p1[1] - p0[1];
	                        angle = Math.atan2(dx, dy) * 180 / Math.PI;
	                        // The angle should be a non-negative number.
	                        if (angle < 0) {
	                            angle += 360;
	                        }
	                        // Very small angles produce an unexpected result because they are
	                        // converted to a scientific notation string.
	                        if (angle < 0.000001) {
	                            angle = 0;
	                        }
	                    } else {
	                        gradientType = 'gradientradial';
	                        var p0 = [
	                                fill.x * rectWidth,
	                                fill.y * rectHeight
	                            ];
	                        var transform = zrEl.transform;
	                        var scale = zrEl.scale;
	                        var width = rectWidth;
	                        var height = rectHeight;
	                        focus = [
	                            (p0[0] - rect.x) / width,
	                            (p0[1] - rect.y) / height
	                        ];
	                        if (transform) {
	                            applyTransform(p0, p0, transform);
	                        }
	                        width /= scale[0] * Z;
	                        height /= scale[1] * Z;
	                        var dimension = mathMax(width, height);
	                        shift = 2 * 0 / dimension;
	                        expansion = 2 * fill.r / dimension - shift;
	                    }
	                    // We need to sort the color stops in ascending order by offset,
	                    // otherwise IE won't interpret it correctly.
	                    var stops = fill.colorStops.slice();
	                    stops.sort(function (cs1, cs2) {
	                        return cs1.offset - cs2.offset;
	                    });
	                    var length = stops.length;
	                    // Color and alpha list of first and last stop
	                    var colorAndAlphaList = [];
	                    var colors = [];
	                    for (var i = 0; i < length; i++) {
	                        var stop = stops[i];
	                        var colorAndAlpha = getColorAndAlpha(stop.color);
	                        colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	                        if (i === 0 || i === length - 1) {
	                            colorAndAlphaList.push(colorAndAlpha);
	                        }
	                    }
	                    if (length >= 2) {
	                        var color1 = colorAndAlphaList[0][0];
	                        var color2 = colorAndAlphaList[1][0];
	                        var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	                        var opacity2 = colorAndAlphaList[1][1] * style.opacity;
	                        el.type = gradientType;
	                        el.method = 'none';
	                        el.focus = '100%';
	                        el.angle = angle;
	                        el.color = color1;
	                        el.color2 = color2;
	                        el.colors = colors.join(',');
	                        // When colors attribute is used, the meanings of opacity and o:opacity2
	                        // are reversed.
	                        el.opacity = opacity2;
	                        // FIXME g_o_:opacity ?
	                        el.opacity2 = opacity1;
	                    }
	                    if (gradientType === 'radial') {
	                        el.focusposition = focus.join(',');
	                    }
	                } else {
	                    // FIXME Change from Gradient fill to color fill
	                    setColorAndOpacity(el, fill, style.opacity);
	                }
	            }
	        };
	        var updateStrokeNode = function (el, style) {
	            // if (style.lineJoin != null) {
	            //     el.joinstyle = style.lineJoin;
	            // }
	            // if (style.miterLimit != null) {
	            //     el.miterlimit = style.miterLimit * Z;
	            // }
	            // if (style.lineCap != null) {
	            //     el.endcap = style.lineCap;
	            // }
	            if (style.lineDash != null) {
	                el.dashstyle = style.lineDash.join(' ');
	            }
	            if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	                setColorAndOpacity(el, style.stroke, style.opacity);
	            }
	        };
	        var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
	            var isFill = type == 'fill';
	            var el = vmlEl.getElementsByTagName(type)[0];
	            // Stroke must have lineWidth
	            if (style[type] != null && style[type] !== 'none' && (isFill || !isFill && style.lineWidth)) {
	                vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
	                // FIXME Remove before updating, or set `colors` will throw error
	                if (style[type] instanceof Gradient) {
	                    remove(vmlEl, el);
	                }
	                if (!el) {
	                    el = vmlCore.createNode(type);
	                }
	                isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	                append(vmlEl, el);
	            } else {
	                vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	                remove(vmlEl, el);
	            }
	        };
	        var points = [
	                [],
	                [],
	                []
	            ];
	        var pathDataToString = function (data, m) {
	            var M = CMD.M;
	            var C = CMD.C;
	            var L = CMD.L;
	            var A = CMD.A;
	            var Q = CMD.Q;
	            var str = [];
	            var nPoint;
	            var cmdStr;
	            var cmd;
	            var i;
	            var xi;
	            var yi;
	            for (i = 0; i < data.length;) {
	                cmd = data[i++];
	                cmdStr = '';
	                nPoint = 0;
	                switch (cmd) {
	                case M:
	                    cmdStr = ' m ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case L:
	                    cmdStr = ' l ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case Q:
	                case C:
	                    cmdStr = ' c ';
	                    nPoint = 3;
	                    var x1 = data[i++];
	                    var y1 = data[i++];
	                    var x2 = data[i++];
	                    var y2 = data[i++];
	                    var x3;
	                    var y3;
	                    if (cmd === Q) {
	                        // Convert quadratic to cubic using degree elevation
	                        x3 = x2;
	                        y3 = y2;
	                        x2 = (x2 + 2 * x1) / 3;
	                        y2 = (y2 + 2 * y1) / 3;
	                        x1 = (xi + 2 * x1) / 3;
	                        y1 = (yi + 2 * y1) / 3;
	                    } else {
	                        x3 = data[i++];
	                        y3 = data[i++];
	                    }
	                    points[0][0] = x1;
	                    points[0][1] = y1;
	                    points[1][0] = x2;
	                    points[1][1] = y2;
	                    points[2][0] = x3;
	                    points[2][1] = y3;
	                    xi = x3;
	                    yi = y3;
	                    break;
	                case A:
	                    var x = 0;
	                    var y = 0;
	                    var sx = 1;
	                    var sy = 1;
	                    var angle = 0;
	                    if (m) {
	                        // Extract SRT from matrix
	                        x = m[4];
	                        y = m[5];
	                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
	                    }
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++] + angle;
	                    var endAngle = data[i++] + startAngle + angle;
	                    // FIXME
	                    // var psi = data[i++];
	                    i++;
	                    var clockwise = data[i++];
	                    var x0 = cx + cos(startAngle) * rx;
	                    var y0 = cy + sin(startAngle) * ry;
	                    var x1 = cx + cos(endAngle) * rx;
	                    var y1 = cy + sin(endAngle) * ry;
	                    var type = clockwise ? ' wa ' : ' at ';
	                    if (Math.abs(x0 - x1) < 1e-10) {
	                        // IE won't render arches drawn counter clockwise if x0 == x1.
	                        if (Math.abs(endAngle - startAngle) > 0.01) {
	                            // Offset x0 by 1/80 of a pixel. Use something
	                            // that can be represented in binary
	                            if (clockwise) {
	                                x0 += 270 / Z;
	                            }
	                        } else {
	                            // Avoid case draw full circle
	                            if (Math.abs(y0 - cy) < 1e-10) {
	                                if (clockwise && x0 < cx || !clockwise && x0 > cx) {
	                                    y1 -= 270 / Z;
	                                } else {
	                                    y1 += 270 / Z;
	                                }
	                            } else if (clockwise && y0 < cy || !clockwise && y0 > cy) {
	                                x1 += 270 / Z;
	                            } else {
	                                x1 -= 270 / Z;
	                            }
	                        }
	                    }
	                    str.push(type, round(((cx - rx) * sx + x) * Z - Z2), comma, round(((cy - ry) * sy + y) * Z - Z2), comma, round(((cx + rx) * sx + x) * Z - Z2), comma, round(((cy + ry) * sy + y) * Z - Z2), comma, round((x0 * sx + x) * Z - Z2), comma, round((y0 * sy + y) * Z - Z2), comma, round((x1 * sx + x) * Z - Z2), comma, round((y1 * sy + y) * Z - Z2));
	                    xi = x1;
	                    yi = y1;
	                    break;
	                case CMD.R:
	                    var p0 = points[0];
	                    var p1 = points[1];
	                    // x0, y0
	                    p0[0] = data[i++];
	                    p0[1] = data[i++];
	                    // x1, y1
	                    p1[0] = p0[0] + data[i++];
	                    p1[1] = p0[1] + data[i++];
	                    if (m) {
	                        applyTransform(p0, p0, m);
	                        applyTransform(p1, p1, m);
	                    }
	                    p0[0] = round(p0[0] * Z - Z2);
	                    p1[0] = round(p1[0] * Z - Z2);
	                    p0[1] = round(p0[1] * Z - Z2);
	                    p1[1] = round(p1[1] * Z - Z2);
	                    str.push(' m ', p0[0], comma, p0[1], ' l ', p1[0], comma, p0[1], ' l ', p1[0], comma, p1[1], ' l ', p0[0], comma, p1[1]);
	                    break;
	                case CMD.Z:
	                    // FIXME Update xi, yi
	                    str.push(' x ');
	                }
	                if (nPoint > 0) {
	                    str.push(cmdStr);
	                    for (var k = 0; k < nPoint; k++) {
	                        var p = points[k];
	                        m && applyTransform(p, p, m);
	                        // 不 round 会非常慢
	                        str.push(round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2), k < nPoint - 1 ? comma : '');
	                    }
	                }
	            }
	            return str.join('');
	        };
	        // Rewrite the original path method
	        Path.prototype.brushVML = function (vmlRoot) {
	            var style = this.style;
	            var vmlEl = this._vmlEl;
	            if (!vmlEl) {
	                vmlEl = vmlCore.createNode('shape');
	                initRootElStyle(vmlEl);
	                this._vmlEl = vmlEl;
	            }
	            updateFillAndStroke(vmlEl, 'fill', style, this);
	            updateFillAndStroke(vmlEl, 'stroke', style, this);
	            var m = this.transform;
	            var needTransform = m != null;
	            var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	            if (strokeEl) {
	                var lineWidth = style.lineWidth;
	                // Get the line scale.
	                // Determinant of this.m_ means how much the area is enlarged by the
	                // transformation. So its square root can be used as a scale factor
	                // for width.
	                if (needTransform && !style.strokeNoScale) {
	                    var det = m[0] * m[3] - m[1] * m[2];
	                    lineWidth *= sqrt(abs(det));
	                }
	                strokeEl.weight = lineWidth + 'px';
	            }
	            var path = this.path;
	            if (this.__dirtyPath) {
	                path.beginPath();
	                this.buildPath(path, this.shape);
	                path.toStatic();
	                this.__dirtyPath = false;
	            }
	            vmlEl.path = pathDataToString(path.data, this.transform);
	            vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	            // Append to root
	            append(vmlRoot, vmlEl);
	            // Text
	            if (style.text) {
	                this.drawRectText(vmlRoot, this.getBoundingRect());
	            } else {
	                this.removeRectText(vmlRoot);
	            }
	        };
	        Path.prototype.onRemove = function (vmlRoot) {
	            remove(vmlRoot, this._vmlEl);
	            this.removeRectText(vmlRoot);
	        };
	        Path.prototype.onAdd = function (vmlRoot) {
	            append(vmlRoot, this._vmlEl);
	            this.appendRectText(vmlRoot);
	        };
	        /***************************************************
	     * IMAGE
	     **************************************************/
	        var isImage = function (img) {
	            // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	            return typeof img === 'object' && img.tagName && img.tagName.toUpperCase() === 'IMG';    // return img instanceof Image;
	        };
	        // Rewrite the original path method
	        ZImage.prototype.brushVML = function (vmlRoot) {
	            var style = this.style;
	            var image = style.image;
	            // Image original width, height
	            var ow;
	            var oh;
	            if (isImage(image)) {
	                var src = image.src;
	                if (src === this._imageSrc) {
	                    ow = this._imageWidth;
	                    oh = this._imageHeight;
	                } else {
	                    var imageRuntimeStyle = image.runtimeStyle;
	                    var oldRuntimeWidth = imageRuntimeStyle.width;
	                    var oldRuntimeHeight = imageRuntimeStyle.height;
	                    imageRuntimeStyle.width = 'auto';
	                    imageRuntimeStyle.height = 'auto';
	                    // get the original size
	                    ow = image.width;
	                    oh = image.height;
	                    // and remove overides
	                    imageRuntimeStyle.width = oldRuntimeWidth;
	                    imageRuntimeStyle.height = oldRuntimeHeight;
	                    // Caching image original width, height and src
	                    this._imageSrc = src;
	                    this._imageWidth = ow;
	                    this._imageHeight = oh;
	                }
	                image = src;
	            } else {
	                if (image === this._imageSrc) {
	                    ow = this._imageWidth;
	                    oh = this._imageHeight;
	                }
	            }
	            if (!image) {
	                return;
	            }
	            var x = style.x || 0;
	            var y = style.y || 0;
	            var dw = style.width;
	            var dh = style.height;
	            var sw = style.sWidth;
	            var sh = style.sHeight;
	            var sx = style.sx || 0;
	            var sy = style.sy || 0;
	            var hasCrop = sw && sh;
	            var vmlEl = this._vmlEl;
	            if (!vmlEl) {
	                // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	                // vmlEl = vmlCore.createNode('group');
	                vmlEl = vmlCore.doc.createElement('div');
	                initRootElStyle(vmlEl);
	                this._vmlEl = vmlEl;
	            }
	            var vmlElStyle = vmlEl.style;
	            var hasRotation = false;
	            var m;
	            var scaleX = 1;
	            var scaleY = 1;
	            if (this.transform) {
	                m = this.transform;
	                scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	                scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);
	                hasRotation = m[1] || m[2];
	            }
	            if (hasRotation) {
	                // If filters are necessary (rotation exists), create them
	                // filters are bog-slow, so only create them if abbsolutely necessary
	                // The following check doesn't account for skews (which don't exist
	                // in the canvas spec (yet) anyway.
	                // From excanvas
	                var p0 = [
	                        x,
	                        y
	                    ];
	                var p1 = [
	                        x + dw,
	                        y
	                    ];
	                var p2 = [
	                        x,
	                        y + dh
	                    ];
	                var p3 = [
	                        x + dw,
	                        y + dh
	                    ];
	                applyTransform(p0, p0, m);
	                applyTransform(p1, p1, m);
	                applyTransform(p2, p2, m);
	                applyTransform(p3, p3, m);
	                var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	                var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);
	                var transformFilter = [];
	                transformFilter.push('M11=', m[0] / scaleX, comma, 'M12=', m[2] / scaleY, comma, 'M21=', m[1] / scaleX, comma, 'M22=', m[3] / scaleY, comma, 'Dx=', round(x * scaleX + m[4]), comma, 'Dy=', round(y * scaleY + m[5]));
	                vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
	                // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	                vmlElStyle.filter = imageTransformPrefix + '.Matrix(' + transformFilter.join('') + ', SizingMethod=clip)';
	            } else {
	                if (m) {
	                    x = x * scaleX + m[4];
	                    y = y * scaleY + m[5];
	                }
	                vmlElStyle.filter = '';
	                vmlElStyle.left = round(x) + 'px';
	                vmlElStyle.top = round(y) + 'px';
	            }
	            var imageEl = this._imageEl;
	            var cropEl = this._cropEl;
	            if (!imageEl) {
	                imageEl = vmlCore.doc.createElement('div');
	                this._imageEl = imageEl;
	            }
	            var imageELStyle = imageEl.style;
	            if (hasCrop) {
	                // Needs know image original width and height
	                if (!(ow && oh)) {
	                    var tmpImage = new Image();
	                    var self = this;
	                    tmpImage.onload = function () {
	                        tmpImage.onload = null;
	                        ow = tmpImage.width;
	                        oh = tmpImage.height;
	                        // Adjust image width and height to fit the ratio destinationSize / sourceSize
	                        imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                        imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	                        // Caching image original width, height and src
	                        self._imageWidth = ow;
	                        self._imageHeight = oh;
	                        self._imageSrc = image;
	                    };
	                    tmpImage.src = image;
	                } else {
	                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	                }
	                if (!cropEl) {
	                    cropEl = vmlCore.doc.createElement('div');
	                    cropEl.style.overflow = 'hidden';
	                    this._cropEl = cropEl;
	                }
	                var cropElStyle = cropEl.style;
	                cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	                cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	                cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx=' + -sx * dw / sw * scaleX + ',Dy=' + -sy * dh / sh * scaleY + ')';
	                if (!cropEl.parentNode) {
	                    vmlEl.appendChild(cropEl);
	                }
	                if (imageEl.parentNode != cropEl) {
	                    cropEl.appendChild(imageEl);
	                }
	            } else {
	                imageELStyle.width = round(scaleX * dw) + 'px';
	                imageELStyle.height = round(scaleY * dh) + 'px';
	                vmlEl.appendChild(imageEl);
	                if (cropEl && cropEl.parentNode) {
	                    vmlEl.removeChild(cropEl);
	                    this._cropEl = null;
	                }
	            }
	            var filterStr = '';
	            var alpha = style.opacity;
	            if (alpha < 1) {
	                filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	            }
	            filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';
	            imageELStyle.filter = filterStr;
	            vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	            // Append to root
	            append(vmlRoot, vmlEl);
	            // Text
	            if (style.text) {
	                this.drawRectText(vmlRoot, this.getBoundingRect());
	            }
	        };
	        ZImage.prototype.onRemove = function (vmlRoot) {
	            remove(vmlRoot, this._vmlEl);
	            this._vmlEl = null;
	            this._cropEl = null;
	            this._imageEl = null;
	            this.removeRectText(vmlRoot);
	        };
	        ZImage.prototype.onAdd = function (vmlRoot) {
	            append(vmlRoot, this._vmlEl);
	            this.appendRectText(vmlRoot);
	        };
	        /***************************************************
	     * TEXT
	     **************************************************/
	        var DEFAULT_STYLE_NORMAL = 'normal';
	        var fontStyleCache = {};
	        var fontStyleCacheCount = 0;
	        var MAX_FONT_CACHE_SIZE = 100;
	        var fontEl = document.createElement('div');
	        var getFontStyle = function (fontString) {
	            var fontStyle = fontStyleCache[fontString];
	            if (!fontStyle) {
	                // Clear cache
	                if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	                    fontStyleCacheCount = 0;
	                    fontStyleCache = {};
	                }
	                var style = fontEl.style;
	                var fontFamily;
	                try {
	                    style.font = fontString;
	                    fontFamily = style.fontFamily.split(',')[0];
	                } catch (e) {
	                }
	                fontStyle = {
	                    style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	                    variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	                    weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	                    size: parseFloat(style.fontSize || 12) | 0,
	                    family: fontFamily || 'Microsoft YaHei'
	                };
	                fontStyleCache[fontString] = fontStyle;
	                fontStyleCacheCount++;
	            }
	            return fontStyle;
	        };
	        var textMeasureEl;
	        // Overwrite measure text method
	        textContain.measureText = function (text, textFont) {
	            var doc = vmlCore.doc;
	            if (!textMeasureEl) {
	                textMeasureEl = doc.createElement('div');
	                textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;' + 'padding:0;margin:0;border:none;white-space:pre;';
	                vmlCore.doc.body.appendChild(textMeasureEl);
	            }
	            try {
	                textMeasureEl.style.font = textFont;
	            } catch (ex) {
	            }
	            textMeasureEl.innerHTML = '';
	            // Don't use innerHTML or innerText because they allow markup/whitespace.
	            textMeasureEl.appendChild(doc.createTextNode(text));
	            return { width: textMeasureEl.offsetWidth };
	        };
	        var tmpRect = new BoundingRect();
	        var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {
	            var style = this.style;
	            var text = style.text;
	            if (!text) {
	                return;
	            }
	            var x;
	            var y;
	            var align = style.textAlign;
	            var fontStyle = getFontStyle(style.textFont);
	            // FIXME encodeHtmlAttribute ?
	            var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' ' + fontStyle.size + 'px "' + fontStyle.family + '"';
	            var baseline = style.textBaseline;
	            var verticalAlign = style.textVerticalAlign;
	            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	            // Transform rect to view space
	            var m = this.transform;
	            // Ignore transform for text in other element
	            if (m && !fromTextEl) {
	                tmpRect.copy(rect);
	                tmpRect.applyTransform(m);
	                rect = tmpRect;
	            }
	            if (!fromTextEl) {
	                var textPosition = style.textPosition;
	                var distance = style.textDistance;
	                // Text position represented by coord
	                if (textPosition instanceof Array) {
	                    x = rect.x + parsePercent(textPosition[0], rect.width);
	                    y = rect.y + parsePercent(textPosition[1], rect.height);
	                    align = align || 'left';
	                    baseline = baseline || 'top';
	                } else {
	                    var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	                    x = res.x;
	                    y = res.y;
	                    // Default align and baseline when has textPosition
	                    align = align || res.textAlign;
	                    baseline = baseline || res.textBaseline;
	                }
	            } else {
	                x = rect.x;
	                y = rect.y;
	            }
	            if (verticalAlign) {
	                switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;    // 'top'
	                }
	                // Ignore baseline
	                baseline = 'top';
	            }
	            var fontSize = fontStyle.size;
	            // 1.75 is an arbitrary number, as there is no info about the text baseline
	            switch (baseline) {
	            case 'hanging':
	            case 'top':
	                y += fontSize / 1.75;
	                break;
	            case 'middle':
	                break;
	            default:
	                // case null:
	                // case 'alphabetic':
	                // case 'ideographic':
	                // case 'bottom':
	                y -= fontSize / 2.25;
	                break;
	            }
	            switch (align) {
	            case 'left':
	                break;
	            case 'center':
	                x -= textRect.width / 2;
	                break;
	            case 'right':
	                x -= textRect.width;
	                break;    // case 'end':
	                          // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	                          // break;
	                          // case 'start':
	                          // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	                          // break;
	                          // default:
	                          //     align = 'left';
	            }
	            var createNode = vmlCore.createNode;
	            var textVmlEl = this._textVmlEl;
	            var pathEl;
	            var textPathEl;
	            var skewEl;
	            if (!textVmlEl) {
	                textVmlEl = createNode('line');
	                pathEl = createNode('path');
	                textPathEl = createNode('textpath');
	                skewEl = createNode('skew');
	                // FIXME Why here is not cammel case
	                // Align 'center' seems wrong
	                textPathEl.style['v-text-align'] = 'left';
	                initRootElStyle(textVmlEl);
	                pathEl.textpathok = true;
	                textPathEl.on = true;
	                textVmlEl.from = '0 0';
	                textVmlEl.to = '1000 0.05';
	                append(textVmlEl, skewEl);
	                append(textVmlEl, pathEl);
	                append(textVmlEl, textPathEl);
	                this._textVmlEl = textVmlEl;
	            } else {
	                // 这里是在前面 appendChild 保证顺序的前提下
	                skewEl = textVmlEl.firstChild;
	                pathEl = skewEl.nextSibling;
	                textPathEl = pathEl.nextSibling;
	            }
	            var coords = [
	                    x,
	                    y
	                ];
	            var textVmlElStyle = textVmlEl.style;
	            // Ignore transform for text in other element
	            if (m && fromTextEl) {
	                applyTransform(coords, coords, m);
	                skewEl.on = true;
	                skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma + m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';
	                // Text position
	                skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
	                // Left top point as origin
	                skewEl.origin = '0 0';
	                textVmlElStyle.left = '0px';
	                textVmlElStyle.top = '0px';
	            } else {
	                skewEl.on = false;
	                textVmlElStyle.left = round(x) + 'px';
	                textVmlElStyle.top = round(y) + 'px';
	            }
	            textPathEl.string = encodeHtmlAttribute(text);
	            // TODO
	            try {
	                textPathEl.style.font = font;
	            } // Error font format
	            catch (e) {
	            }
	            updateFillAndStroke(textVmlEl, 'fill', {
	                fill: fromTextEl ? style.fill : style.textFill,
	                opacity: style.opacity
	            }, this);
	            updateFillAndStroke(textVmlEl, 'stroke', {
	                stroke: fromTextEl ? style.stroke : style.textStroke,
	                opacity: style.opacity,
	                lineDash: style.lineDash
	            }, this);
	            textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	            // Attached to root
	            append(vmlRoot, textVmlEl);
	        };
	        var removeRectText = function (vmlRoot) {
	            remove(vmlRoot, this._textVmlEl);
	            this._textVmlEl = null;
	        };
	        var appendRectText = function (vmlRoot) {
	            append(vmlRoot, this._textVmlEl);
	        };
	        var list = [
	                RectText,
	                Displayable,
	                ZImage,
	                Path,
	                Text
	            ];
	        // In case Displayable has been mixed in RectText
	        for (var i = 0; i < list.length; i++) {
	            var proto = list[i].prototype;
	            proto.drawRectText = drawRectText;
	            proto.removeRectText = removeRectText;
	            proto.appendRectText = appendRectText;
	        }
	        Text.prototype.brushVML = function (vmlRoot) {
	            var style = this.style;
	            if (style.text) {
	                this.drawRectText(vmlRoot, {
	                    x: style.x || 0,
	                    y: style.y || 0,
	                    width: 0,
	                    height: 0
	                }, this.getBoundingRect(), true);
	            } else {
	                this.removeRectText(vmlRoot);
	            }
	        };
	        Text.prototype.onRemove = function (vmlRoot) {
	            this.removeRectText(vmlRoot);
	        };
	        Text.prototype.onAdd = function (vmlRoot) {
	            this.appendRectText(vmlRoot);
	        };
	    }
	});
	define('echarts/scale/Scale', ['require', '../util/clazz'], function (require) {
	    var clazzUtil = require('../util/clazz');
	    function Scale() {
	        /**
	         * Extent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._extent = [
	            Infinity,
	            -Infinity
	        ];
	        /**
	         * Step is calculated in adjustExtent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._interval = 0;
	        this.init && this.init.apply(this, arguments);
	    }
	    var scaleProto = Scale.prototype;
	    /**
	     * Parse input val to valid inner number.
	     * @param {*} val
	     * @return {number}
	     */
	    scaleProto.parse = function (val) {
	        // Notice: This would be a trap here, If the implementation
	        // of this method depends on extent, and this method is used
	        // before extent set (like in dataZoom), it would be wrong.
	        // Nevertheless, parse does not depend on extent generally.
	        return val;
	    };
	    scaleProto.contain = function (val) {
	        var extent = this._extent;
	        return val >= extent[0] && val <= extent[1];
	    };
	    /**
	     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.normalize = function (val) {
	        var extent = this._extent;
	        if (extent[1] === extent[0]) {
	            return 0.5;
	        }
	        return (val - extent[0]) / (extent[1] - extent[0]);
	    };
	    /**
	     * Scale normalized value
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.scale = function (val) {
	        var extent = this._extent;
	        return val * (extent[1] - extent[0]) + extent[0];
	    };
	    /**
	     * Set extent from data
	     * @param {Array.<number>} other
	     */
	    scaleProto.unionExtent = function (other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);    // not setExtent because in log axis it may transformed to power
	                                                           // this.setExtent(extent[0], extent[1]);
	    };
	    /**
	     * Get extent
	     * @return {Array.<number>}
	     */
	    scaleProto.getExtent = function () {
	        return this._extent.slice();
	    };
	    /**
	     * Set extent
	     * @param {number} start
	     * @param {number} end
	     */
	    scaleProto.setExtent = function (start, end) {
	        var thisExtent = this._extent;
	        if (!isNaN(start)) {
	            thisExtent[0] = start;
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = end;
	        }
	    };
	    /**
	     * @return {Array.<string>}
	     */
	    scaleProto.getTicksLabels = function () {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    };
	    clazzUtil.enableClassExtend(Scale);
	    clazzUtil.enableClassManagement(Scale, { registerWhenExtend: true });
	    return Scale;
	});
	define('echarts/coord/axisHelper', ['require', '../scale/Ordinal', '../scale/Interval', '../scale/Time', '../scale/Log', '../scale/Scale', '../util/number', 'zrender/core/util', 'zrender/contain/text'], function (require) {
	    var OrdinalScale = require('../scale/Ordinal');
	    var IntervalScale = require('../scale/Interval');
	    require('../scale/Time');
	    require('../scale/Log');
	    var Scale = require('../scale/Scale');
	    var numberUtil = require('../util/number');
	    var zrUtil = require('zrender/core/util');
	    var textContain = require('zrender/contain/text');
	    var axisHelper = {};
	    /**
	     * Get axis scale extent before niced.
	     */
	    axisHelper.getScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var originalExtent = scale.getExtent();
	        var span = originalExtent[1] - originalExtent[0];
	        if (scale.type === 'ordinal') {
	            // If series has no data, scale extent may be wrong
	            if (!isFinite(span)) {
	                return [
	                    0,
	                    0
	                ];
	            } else {
	                return originalExtent;
	            }
	        }
	        var min = model.getMin ? model.getMin() : model.get('min');
	        var max = model.getMax ? model.getMax() : model.get('max');
	        var crossZero = model.getNeedCrossZero ? model.getNeedCrossZero() : !model.get('scale');
	        var boundaryGap = model.get('boundaryGap');
	        if (!zrUtil.isArray(boundaryGap)) {
	            boundaryGap = [
	                boundaryGap || 0,
	                boundaryGap || 0
	            ];
	        }
	        boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	        boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	        var fixMin = true;
	        var fixMax = true;
	        // Add boundary gap
	        if (min == null) {
	            min = originalExtent[0] - boundaryGap[0] * span;
	            fixMin = false;
	        }
	        if (max == null) {
	            max = originalExtent[1] + boundaryGap[1] * span;
	            fixMax = false;
	        }
	        if (min === 'dataMin') {
	            min = originalExtent[0];
	        }
	        if (max === 'dataMax') {
	            max = originalExtent[1];
	        }
	        // Evaluate if axis needs cross zero
	        if (crossZero) {
	            // Axis is over zero and min is not set
	            if (min > 0 && max > 0 && !fixMin) {
	                min = 0;
	            }
	            // Axis is under zero and max is not set
	            if (min < 0 && max < 0 && !fixMax) {
	                max = 0;
	            }
	        }
	        return [
	            min,
	            max
	        ];
	    };
	    axisHelper.niceScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var extent = axisHelper.getScaleExtent(axis, model);
	        var fixMin = (model.getMin ? model.getMin() : model.get('min')) != null;
	        var fixMax = (model.getMax ? model.getMax() : model.get('max')) != null;
	        var splitNumber = model.get('splitNumber');
	        scale.setExtent(extent[0], extent[1]);
	        scale.niceExtent(splitNumber, fixMin, fixMax);
	        // Use minInterval to constraint the calculated interval.
	        // If calculated interval is less than minInterval. increase the interval quantity until
	        // it is larger than minInterval.
	        // For example:
	        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get
	        //  an integer axis.
	        var minInterval = model.get('minInterval');
	        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {
	            var interval = scale.getInterval();
	            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;
	            // while (interval < minInterval) {
	            //     var quantity = numberUtil.quantity(interval);
	            //     interval = quantity * 10;
	            //     scaleQuantity *= 10;
	            // }
	            extent = scale.getExtent();
	            scale.setExtent(intervalScale * extent[0], extent[1] * intervalScale);
	            scale.niceExtent(splitNumber);
	        }
	        // If some one specified the min, max. And the default calculated interval
	        // is not good enough. He can specify the interval. It is often appeared
	        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	        // to be 60.
	        // FIXME
	        var interval = model.get('interval');
	        if (interval != null) {
	            scale.setInterval && scale.setInterval(interval);
	        }
	    };
	    /**
	     * @param {module:echarts/model/Model} model
	     * @param {string} [axisType] Default retrieve from model.type
	     * @return {module:echarts/scale/*}
	     */
	    axisHelper.createScaleByModel = function (model, axisType) {
	        axisType = axisType || model.get('type');
	        if (axisType) {
	            switch (axisType) {
	            // Buildin scale
	            case 'category':
	                return new OrdinalScale(model.getCategories(), [
	                    Infinity,
	                    -Infinity
	                ]);
	            case 'value':
	                return new IntervalScale();
	            // Extended scale, like time and log
	            default:
	                return (Scale.getClass(axisType) || IntervalScale).create(model);
	            }
	        }
	    };
	    /**
	     * Check if the axis corss 0
	     */
	    axisHelper.ifAxisCrossZero = function (axis) {
	        var dataExtent = axis.scale.getExtent();
	        var min = dataExtent[0];
	        var max = dataExtent[1];
	        return !(min > 0 && max > 0 || min < 0 && max < 0);
	    };
	    /**
	     * @param {Array.<number>} tickCoords In axis self coordinate.
	     * @param {Array.<string>} labels
	     * @param {string} font
	     * @param {boolean} isAxisHorizontal
	     * @return {number}
	     */
	    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	        // FIXME
	        // 不同角的axis和label，不只是horizontal和vertical.
	        var textSpaceTakenRect;
	        var autoLabelInterval = 0;
	        var accumulatedLabelInterval = 0;
	        var step = 1;
	        if (labels.length > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.floor(labels.length / 40);
	        }
	        for (var i = 0; i < tickCoords.length; i += step) {
	            var tickCoord = tickCoords[i];
	            var rect = textContain.getBoundingRect(labels[i], font, 'center', 'top');
	            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	            // FIXME Magic number 1.5
	            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;
	            if (!textSpaceTakenRect) {
	                textSpaceTakenRect = rect.clone();
	            }    // There is no space for current label;
	            else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            } else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	        }
	        if (autoLabelInterval === 0 && step > 1) {
	            return step;
	        }
	        return (autoLabelInterval + 1) * step - 1;
	    };
	    /**
	     * @param {Object} axis
	     * @param {Function} labelFormatter
	     * @return {Array.<string>}
	     */
	    axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	        var scale = axis.scale;
	        var labels = scale.getTicksLabels();
	        var ticks = scale.getTicks();
	        if (typeof labelFormatter === 'string') {
	            labelFormatter = function (tpl) {
	                return function (val) {
	                    return tpl.replace('{value}', val);
	                };
	            }(labelFormatter);
	            return zrUtil.map(labels, labelFormatter);
	        } else if (typeof labelFormatter === 'function') {
	            return zrUtil.map(ticks, function (tick, idx) {
	                return labelFormatter(axis.type === 'category' ? scale.getLabel(tick) : tick, idx);
	            }, this);
	        } else {
	            return labels;
	        }
	    };
	    return axisHelper;
	});
	define('echarts/coord/cartesian/Cartesian2D', ['require', 'zrender/core/util', './Cartesian'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var Cartesian = require('./Cartesian');
	    function Cartesian2D(name) {
	        Cartesian.call(this, name);
	    }
	    Cartesian2D.prototype = {
	        constructor: Cartesian2D,
	        type: 'cartesian2d',
	        dimensions: [
	            'x',
	            'y'
	        ],
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	        },
	        containPoint: function (point) {
	            var axisX = this.getAxis('x');
	            var axisY = this.getAxis('y');
	            return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	        },
	        containData: function (data) {
	            return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	        },
	        dataToPoints: function (data, stack) {
	            return data.mapArray([
	                'x',
	                'y'
	            ], function (x, y) {
	                return this.dataToPoint([
	                    x,
	                    y
	                ]);
	            }, stack, this);
	        },
	        dataToPoint: function (data, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),
	                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))
	            ];
	        },
	        pointToData: function (point, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),
	                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)
	            ];
	        },
	        getOtherAxis: function (axis) {
	            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	        }
	    };
	    zrUtil.inherits(Cartesian2D, Cartesian);
	    return Cartesian2D;
	});
	define('echarts/coord/cartesian/Axis2D', ['require', 'zrender/core/util', '../Axis', './axisLabelInterval'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var Axis = require('../Axis');
	    var axisLabelInterval = require('./axisLabelInterval');
	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	        Axis.call(this, dim, scale, coordExtent);
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';
	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         */
	        this.position = position || 'bottom';
	    };
	    Axis2D.prototype = {
	        constructor: Axis2D,
	        index: 0,
	        onZero: false,
	        model: null,
	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';
	        },
	        getGlobalExtent: function () {
	            var ret = this.getExtent();
	            ret[0] = this.toGlobalCoord(ret[0]);
	            ret[1] = this.toGlobalCoord(ret[1]);
	            return ret;
	        },
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                labelInterval = this._labelInterval = axisLabelInterval(this);
	            }
	            return labelInterval;
	        },
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	            }
	        },
	        toLocalCoord: null,
	        toGlobalCoord: null
	    };
	    zrUtil.inherits(Axis2D, Axis);
	    return Axis2D;
	});
	define('echarts/coord/cartesian/GridModel', ['require', './AxisModel', '../../model/Component'], function (require) {
	    'use strict';
	    require('./AxisModel');
	    var ComponentModel = require('../../model/Component');
	    return ComponentModel.extend({
	        type: 'grid',
	        dependencies: [
	            'xAxis',
	            'yAxis'
	        ],
	        layoutMode: 'box',
	        coordinateSystem: null,
	        defaultOption: {
	            show: false,
	            zlevel: 0,
	            z: 0,
	            left: '10%',
	            top: 60,
	            right: '10%',
	            bottom: 60,
	            containLabel: false,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 1,
	            borderColor: '#ccc'
	        }
	    });
	});
	define('echarts/model/Model', ['require', 'zrender/core/util', '../util/clazz', './mixin/lineStyle', './mixin/areaStyle', './mixin/textStyle', './mixin/itemStyle'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var clazzUtil = require('../util/clazz');
	    /**
	     * @alias module:echarts/model/Model
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} [parentModel]
	     * @param {module:echarts/model/Global} [ecModel]
	     */
	    function Model(option, parentModel, ecModel) {
	        /**
	         * @type {module:echarts/model/Model}
	         * @readOnly
	         */
	        this.parentModel = parentModel;
	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        this.ecModel = ecModel;
	        /**
	         * @type {Object}
	         * @protected
	         */
	        this.option = option;    // Simple optimization
	                                 // if (this.init) {
	                                 //     if (arguments.length <= 4) {
	                                 //         this.init(option, parentModel, ecModel, extraOpt);
	                                 //     }
	                                 //     else {
	                                 //         this.init.apply(this, arguments);
	                                 //     }
	                                 // }
	    }
	    Model.prototype = {
	        constructor: Model,
	        init: null,
	        mergeOption: function (option) {
	            zrUtil.merge(this.option, option, true);
	        },
	        get: function (path, ignoreParent) {
	            if (!path) {
	                return this.option;
	            }
	            if (typeof path === 'string') {
	                path = path.split('.');
	            }
	            var obj = this.option;
	            var parentModel = this.parentModel;
	            for (var i = 0; i < path.length; i++) {
	                // Ignore empty
	                if (!path[i]) {
	                    continue;
	                }
	                // obj could be number/string/... (like 0)
	                obj = obj && typeof obj === 'object' ? obj[path[i]] : null;
	                if (obj == null) {
	                    break;
	                }
	            }
	            if (obj == null && parentModel && !ignoreParent) {
	                obj = parentModel.get(path);
	            }
	            return obj;
	        },
	        getShallow: function (key, ignoreParent) {
	            var option = this.option;
	            var val = option && option[key];
	            var parentModel = this.parentModel;
	            if (val == null && parentModel && !ignoreParent) {
	                val = parentModel.getShallow(key);
	            }
	            return val;
	        },
	        getModel: function (path, parentModel) {
	            var obj = this.get(path, true);
	            var thisParentModel = this.parentModel;
	            var model = new Model(obj, parentModel || thisParentModel && thisParentModel.getModel(path), this.ecModel);
	            return model;
	        },
	        isEmpty: function () {
	            return this.option == null;
	        },
	        restoreData: function () {
	        },
	        clone: function () {
	            var Ctor = this.constructor;
	            return new Ctor(zrUtil.clone(this.option));
	        },
	        setReadOnly: function (properties) {
	            clazzUtil.setReadOnly(this, properties);
	        }
	    };
	    // Enable Model.extend.
	    clazzUtil.enableClassExtend(Model);
	    var mixin = zrUtil.mixin;
	    mixin(Model, require('./mixin/lineStyle'));
	    mixin(Model, require('./mixin/areaStyle'));
	    mixin(Model, require('./mixin/textStyle'));
	    mixin(Model, require('./mixin/itemStyle'));
	    return Model;
	});
	define('zrender/tool/path', ['require', '../graphic/Path', '../core/PathProxy', './transformPath', '../core/matrix'], function (require) {
	    var Path = require('../graphic/Path');
	    var PathProxy = require('../core/PathProxy');
	    var transformPath = require('./transformPath');
	    var matrix = require('../core/matrix');
	    // command chars
	    var cc = [
	            'm',
	            'M',
	            'l',
	            'L',
	            'v',
	            'V',
	            'h',
	            'H',
	            'z',
	            'Z',
	            'c',
	            'C',
	            'q',
	            'Q',
	            't',
	            'T',
	            's',
	            'S',
	            'a',
	            'A'
	        ];
	    var mathSqrt = Math.sqrt;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	    var PI = Math.PI;
	    var vMag = function (v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	    };
	    var vRatio = function (u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	    };
	    var vAngle = function (u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	    };
	    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	        var psi = psiDeg * (PI / 180);
	        var xp = mathCos(psi) * (x1 - x2) / 2 + mathSin(psi) * (y1 - y2) / 2;
	        var yp = -1 * mathSin(psi) * (x1 - x2) / 2 + mathCos(psi) * (y1 - y2) / 2;
	        var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
	        if (lambda > 1) {
	            rx *= mathSqrt(lambda);
	            ry *= mathSqrt(lambda);
	        }
	        var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;
	        var cx = (x1 + x2) / 2 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	        var cy = (y1 + y2) / 2 + mathSin(psi) * cxp + mathCos(psi) * cyp;
	        var theta = vAngle([
	                1,
	                0
	            ], [
	                (xp - cxp) / rx,
	                (yp - cyp) / ry
	            ]);
	        var u = [
	                (xp - cxp) / rx,
	                (yp - cyp) / ry
	            ];
	        var v = [
	                (-1 * xp - cxp) / rx,
	                (-1 * yp - cyp) / ry
	            ];
	        var dTheta = vAngle(u, v);
	        if (vRatio(u, v) <= -1) {
	            dTheta = PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * PI;
	        }
	        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	    }
	    function createPathProxyFromString(data) {
	        if (!data) {
	            return [];
	        }
	        // command string
	        var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');
	        var n;
	        // create pipes so that we can split the data
	        for (n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }
	        // create array
	        var arr = cs.split('|');
	        // init context point
	        var cpx = 0;
	        var cpy = 0;
	        var path = new PathProxy();
	        var CMD = PathProxy.CMD;
	        var prevCmd;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            var off = 0;
	            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	            var cmd;
	            if (p.length > 0 && p[0] === '') {
	                p.shift();
	            }
	            for (var i = 0; i < p.length; i++) {
	                p[i] = parseFloat(p[i]);
	            }
	            while (off < p.length && !isNaN(p[off])) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var ctlPtx;
	                var ctlPty;
	                var rx;
	                var ry;
	                var psi;
	                var fa;
	                var fs;
	                var x1 = cpx;
	                var y1 = cpy;
	                // convert l, H, h, V, and v to L
	                switch (c) {
	                case 'l':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'L':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'm':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'l';
	                    break;
	                case 'M':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'L';
	                    break;
	                case 'h':
	                    cpx += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'H':
	                    cpx = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'v':
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'V':
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'C':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	                    cpx = p[off - 2];
	                    cpy = p[off - 1];
	                    break;
	                case 'c':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	                    cpx += p[off - 2];
	                    cpy += p[off - 1];
	                    break;
	                case 'S':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 's':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = cpx + p[off++];
	                    y1 = cpy + p[off++];
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 'Q':
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'q':
	                    x1 = p[off++] + cpx;
	                    y1 = p[off++] + cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'T':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 't':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 'A':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];
	                    x1 = cpx, y1 = cpy;
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	                case 'a':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];
	                    x1 = cpx, y1 = cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	                }
	            }
	            if (c === 'z' || c === 'Z') {
	                cmd = CMD.Z;
	                path.addData(cmd);
	            }
	            prevCmd = cmd;
	        }
	        path.toStatic();
	        return path;
	    }
	    // TODO Optimize double memory cost problem
	    function createPathOptions(str, opts) {
	        var pathProxy = createPathProxyFromString(str);
	        var transform;
	        opts = opts || {};
	        opts.buildPath = function (path) {
	            path.setData(pathProxy.data);
	            transform && transformPath(path, transform);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };
	        opts.applyTransform = function (m) {
	            if (!transform) {
	                transform = matrix.create();
	            }
	            matrix.mul(transform, m, transform);
	        };
	        return opts;
	    }
	    return {
	        createFromString: function (str, opts) {
	            return new Path(createPathOptions(str, opts));
	        },
	        extendFromString: function (str, opts) {
	            return Path.extend(createPathOptions(str, opts));
	        },
	        mergePath: function (pathEls, opts) {
	            var pathList = [];
	            var len = pathEls.length;
	            for (var i = 0; i < len; i++) {
	                var pathEl = pathEls[i];
	                if (pathEl.__dirty) {
	                    pathEl.buildPath(pathEl.path, pathEl.shape, true);
	                }
	                pathList.push(pathEl.path);
	            }
	            var pathBundle = new Path(opts);
	            pathBundle.buildPath = function (path) {
	                path.appendPath(pathList);
	                // Svg and vml renderer don't have context
	                var ctx = path.getContext();
	                if (ctx) {
	                    path.rebuildPath(ctx);
	                }
	            };
	            return pathBundle;
	        }
	    };
	});
	define('zrender/graphic/Path', ['require', './Displayable', '../core/util', '../core/PathProxy', '../contain/path', './Pattern'], function (require) {
	    var Displayable = require('./Displayable');
	    var zrUtil = require('../core/util');
	    var PathProxy = require('../core/PathProxy');
	    var pathContain = require('../contain/path');
	    var Pattern = require('./Pattern');
	    var getCanvasPattern = Pattern.prototype.getCanvasPattern;
	    var abs = Math.abs;
	    /**
	     * @alias module:zrender/graphic/Path
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function Path(opts) {
	        Displayable.call(this, opts);
	        /**
	         * @type {module:zrender/core/PathProxy}
	         * @readOnly
	         */
	        this.path = new PathProxy();
	    }
	    Path.prototype = {
	        constructor: Path,
	        type: 'path',
	        __dirtyPath: true,
	        strokeContainThreshold: 5,
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var path = this.path;
	            var hasStroke = style.hasStroke();
	            var hasFill = style.hasFill();
	            var fill = style.fill;
	            var stroke = style.stroke;
	            var hasFillGradient = hasFill && !!fill.colorStops;
	            var hasStrokeGradient = hasStroke && !!stroke.colorStops;
	            var hasFillPattern = hasFill && !!fill.image;
	            var hasStrokePattern = hasStroke && !!stroke.image;
	            style.bind(ctx, this, prevEl);
	            this.setTransform(ctx);
	            if (this.__dirty) {
	                var rect = this.getBoundingRect();
	                // Update gradient because bounding rect may changed
	                if (hasFillGradient) {
	                    this._fillGradient = style.getGradient(ctx, fill, rect);
	                }
	                if (hasStrokeGradient) {
	                    this._strokeGradient = style.getGradient(ctx, stroke, rect);
	                }
	            }
	            // Use the gradient or pattern
	            if (hasFillGradient) {
	                // PENDING If may have affect the state
	                ctx.fillStyle = this._fillGradient;
	            } else if (hasFillPattern) {
	                ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	            }
	            if (hasStrokeGradient) {
	                ctx.strokeStyle = this._strokeGradient;
	            } else if (hasStrokePattern) {
	                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	            }
	            var lineDash = style.lineDash;
	            var lineDashOffset = style.lineDashOffset;
	            var ctxLineDash = !!ctx.setLineDash;
	            // Update path sx, sy
	            var scale = this.getGlobalScale();
	            path.setScale(scale[0], scale[1]);
	            // Proxy context
	            // Rebuild path in following 2 cases
	            // 1. Path is dirty
	            // 2. Path needs javascript implemented lineDash stroking.
	            //    In this case, lineDash information will not be saved in PathProxy
	            if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	                path = this.path.beginPath(ctx);
	                // Setting line dash before build path
	                if (lineDash && !ctxLineDash) {
	                    path.setLineDash(lineDash);
	                    path.setLineDashOffset(lineDashOffset);
	                }
	                this.buildPath(path, this.shape, false);
	                // Clear path dirty flag
	                this.__dirtyPath = false;
	            } else {
	                // Replay path building
	                ctx.beginPath();
	                this.path.rebuildPath(ctx);
	            }
	            hasFill && path.fill(ctx);
	            if (lineDash && ctxLineDash) {
	                ctx.setLineDash(lineDash);
	                ctx.lineDashOffset = lineDashOffset;
	            }
	            hasStroke && path.stroke(ctx);
	            if (lineDash && ctxLineDash) {
	                // PENDING
	                // Remove lineDash
	                ctx.setLineDash([]);
	            }
	            this.restoreTransform(ctx);
	            // Draw rect text
	            if (style.text || style.text === 0) {
	                // var rect = this.getBoundingRect();
	                this.drawRectText(ctx, this.getBoundingRect());
	            }
	        },
	        buildPath: function (ctx, shapeCfg, inBundle) {
	        },
	        getBoundingRect: function () {
	            var rect = this._rect;
	            var style = this.style;
	            var needsUpdateRect = !rect;
	            if (needsUpdateRect) {
	                var path = this.path;
	                if (this.__dirtyPath) {
	                    path.beginPath();
	                    this.buildPath(path, this.shape, false);
	                }
	                rect = path.getBoundingRect();
	            }
	            this._rect = rect;
	            if (style.hasStroke()) {
	                // Needs update rect with stroke lineWidth when
	                // 1. Element changes scale or lineWidth
	                // 2. Shape is changed
	                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	                if (this.__dirty || needsUpdateRect) {
	                    rectWithStroke.copy(rect);
	                    // FIXME Must after updateTransform
	                    var w = style.lineWidth;
	                    // PENDING, Min line width is needed when line is horizontal or vertical
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                    // Only add extra hover lineWidth when there are no fill
	                    if (!style.hasFill()) {
	                        w = Math.max(w, this.strokeContainThreshold || 4);
	                    }
	                    // Consider line width
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        rectWithStroke.width += w / lineScale;
	                        rectWithStroke.height += w / lineScale;
	                        rectWithStroke.x -= w / lineScale / 2;
	                        rectWithStroke.y -= w / lineScale / 2;
	                    }
	                }
	                // Return rect with stroke
	                return rectWithStroke;
	            }
	            return rect;
	        },
	        contain: function (x, y) {
	            var localPos = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            var style = this.style;
	            x = localPos[0];
	            y = localPos[1];
	            if (rect.contain(x, y)) {
	                var pathData = this.path.data;
	                if (style.hasStroke()) {
	                    var lineWidth = style.lineWidth;
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        // Only add extra hover lineWidth when there are no fill
	                        if (!style.hasFill()) {
	                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                        }
	                        if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	                            return true;
	                        }
	                    }
	                }
	                if (style.hasFill()) {
	                    return pathContain.contain(pathData, x, y);
	                }
	            }
	            return false;
	        },
	        dirty: function (dirtyPath) {
	            if (dirtyPath == null) {
	                dirtyPath = true;
	            }
	            // Only mark dirty, not mark clean
	            if (dirtyPath) {
	                this.__dirtyPath = dirtyPath;
	                this._rect = null;
	            }
	            this.__dirty = true;
	            this.__zr && this.__zr.refresh();
	            // Used as a clipping path
	            if (this.__clipTarget) {
	                this.__clipTarget.dirty();
	            }
	        },
	        animateShape: function (loop) {
	            return this.animate('shape', loop);
	        },
	        attrKV: function (key, value) {
	            // FIXME
	            if (key === 'shape') {
	                this.setShape(value);
	                this.__dirtyPath = true;
	                this._rect = null;
	            } else {
	                Displayable.prototype.attrKV.call(this, key, value);
	            }
	        },
	        setShape: function (key, value) {
	            var shape = this.shape;
	            // Path from string may not have shape
	            if (shape) {
	                if (zrUtil.isObject(key)) {
	                    for (var name in key) {
	                        shape[name] = key[name];
	                    }
	                } else {
	                    shape[key] = value;
	                }
	                this.dirty(true);
	            }
	            return this;
	        },
	        getLineScale: function () {
	            var m = this.transform;
	            // Get the line scale.
	            // Determinant of `m` means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	        }
	    };
	    /**
	     * 扩展一个 Path element, 比如星形，圆等。
	     * Extend a path element
	     * @param {Object} props
	     * @param {string} props.type Path type
	     * @param {Function} props.init Initialize
	     * @param {Function} props.buildPath Overwrite buildPath method
	     * @param {Object} [props.style] Extended default style config
	     * @param {Object} [props.shape] Extended default shape config
	     */
	    Path.extend = function (defaults) {
	        var Sub = function (opts) {
	            Path.call(this, opts);
	            if (defaults.style) {
	                // Extend default style
	                this.style.extendFrom(defaults.style, false);
	            }
	            // Extend default shape
	            var defaultShape = defaults.shape;
	            if (defaultShape) {
	                this.shape = this.shape || {};
	                var thisShape = this.shape;
	                for (var name in defaultShape) {
	                    if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	                        thisShape[name] = defaultShape[name];
	                    }
	                }
	            }
	            defaults.init && defaults.init.call(this, opts);
	        };
	        zrUtil.inherits(Sub, Path);
	        // FIXME 不能 extend position, rotation 等引用对象
	        for (var name in defaults) {
	            // Extending prototype values and methods
	            if (name !== 'style' && name !== 'shape') {
	                Sub.prototype[name] = defaults[name];
	            }
	        }
	        return Sub;
	    };
	    zrUtil.inherits(Path, Displayable);
	    return Path;
	});
	define('zrender/graphic/Gradient', ['require'], function (require) {
	    /**
	     * @param {Array.<Object>} colorStops
	     */
	    var Gradient = function (colorStops) {
	        this.colorStops = colorStops || [];
	    };
	    Gradient.prototype = {
	        constructor: Gradient,
	        addColorStop: function (offset, color) {
	            this.colorStops.push({
	                offset: offset,
	                color: color
	            });
	        }
	    };
	    return Gradient;
	});
	define('zrender/container/Group', ['require', '../core/util', '../Element', '../core/BoundingRect'], function (require) {
	    var zrUtil = require('../core/util');
	    var Element = require('../Element');
	    var BoundingRect = require('../core/BoundingRect');
	    /**
	     * @alias module:zrender/graphic/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function (opts) {
	        opts = opts || {};
	        Element.call(this, opts);
	        for (var key in opts) {
	            this[key] = opts[key];
	        }
	        this._children = [];
	        this.__storage = null;
	        this.__dirty = true;
	    };
	    Group.prototype = {
	        constructor: Group,
	        isGroup: true,
	        type: 'group',
	        silent: false,
	        children: function () {
	            return this._children.slice();
	        },
	        childAt: function (idx) {
	            return this._children[idx];
	        },
	        childOfName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                if (children[i].name === name) {
	                    return children[i];
	                }
	            }
	        },
	        childCount: function () {
	            return this._children.length;
	        },
	        add: function (child) {
	            if (child && child !== this && child.parent !== this) {
	                this._children.push(child);
	                this._doAdd(child);
	            }
	            return this;
	        },
	        addBefore: function (child, nextSibling) {
	            if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
	                var children = this._children;
	                var idx = children.indexOf(nextSibling);
	                if (idx >= 0) {
	                    children.splice(idx, 0, child);
	                    this._doAdd(child);
	                }
	            }
	            return this;
	        },
	        _doAdd: function (child) {
	            if (child.parent) {
	                child.parent.remove(child);
	            }
	            child.parent = this;
	            var storage = this.__storage;
	            var zr = this.__zr;
	            if (storage && storage !== child.__storage) {
	                storage.addToMap(child);
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	            zr && zr.refresh();
	        },
	        remove: function (child) {
	            var zr = this.__zr;
	            var storage = this.__storage;
	            var children = this._children;
	            var idx = zrUtil.indexOf(children, child);
	            if (idx < 0) {
	                return this;
	            }
	            children.splice(idx, 1);
	            child.parent = null;
	            if (storage) {
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	            zr && zr.refresh();
	            return this;
	        },
	        removeAll: function () {
	            var children = this._children;
	            var storage = this.__storage;
	            var child;
	            var i;
	            for (i = 0; i < children.length; i++) {
	                child = children[i];
	                if (storage) {
	                    storage.delFromMap(child.id);
	                    if (child instanceof Group) {
	                        child.delChildrenFromStorage(storage);
	                    }
	                }
	                child.parent = null;
	            }
	            children.length = 0;
	            return this;
	        },
	        eachChild: function (cb, context) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                cb.call(context, child, i);
	            }
	            return this;
	        },
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                cb.call(context, child);
	                if (child.type === 'group') {
	                    child.traverse(cb, context);
	                }
	            }
	            return this;
	        },
	        addChildrenToStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.addToMap(child);
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	        },
	        delChildrenFromStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	        },
	        dirty: function () {
	            this.__dirty = true;
	            this.__zr && this.__zr.refresh();
	            return this;
	        },
	        getBoundingRect: function (includeChildren) {
	            // TODO Caching
	            // TODO Transform
	            var rect = null;
	            var tmpRect = new BoundingRect(0, 0, 0, 0);
	            var children = includeChildren || this._children;
	            var tmpMat = [];
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                if (child.ignore || child.invisible) {
	                    continue;
	                }
	                var childRect = child.getBoundingRect();
	                var transform = child.getLocalTransform(tmpMat);
	                if (transform) {
	                    tmpRect.copy(childRect);
	                    tmpRect.applyTransform(transform);
	                    rect = rect || tmpRect.clone();
	                    rect.union(tmpRect);
	                } else {
	                    rect = rect || childRect.clone();
	                    rect.union(childRect);
	                }
	            }
	            return rect || tmpRect;
	        }
	    };
	    zrUtil.inherits(Group, Element);
	    return Group;
	});
	define('zrender/graphic/Image', ['require', './Displayable', '../core/BoundingRect', '../core/util', '../core/LRU'], function (require) {
	    var Displayable = require('./Displayable');
	    var BoundingRect = require('../core/BoundingRect');
	    var zrUtil = require('../core/util');
	    var LRU = require('../core/LRU');
	    var globalImageCache = new LRU(50);
	    /**
	     * @alias zrender/graphic/Image
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function ZImage(opts) {
	        Displayable.call(this, opts);
	    }
	    ZImage.prototype = {
	        constructor: ZImage,
	        type: 'image',
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var src = style.image;
	            var image;
	            // Must bind each time
	            style.bind(ctx, this, prevEl);
	            // style.image is a url string
	            if (typeof src === 'string') {
	                image = this._image;
	            }    // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	            else {
	                image = src;
	            }
	            // FIXME Case create many images with src
	            if (!image && src) {
	                // Try get from global image cache
	                var cachedImgObj = globalImageCache.get(src);
	                if (!cachedImgObj) {
	                    // Create a new image
	                    image = new Image();
	                    image.onload = function () {
	                        image.onload = null;
	                        for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                            cachedImgObj.pending[i].dirty();
	                        }
	                    };
	                    cachedImgObj = {
	                        image: image,
	                        pending: [this]
	                    };
	                    image.src = src;
	                    globalImageCache.put(src, cachedImgObj);
	                    this._image = image;
	                    return;
	                } else {
	                    image = cachedImgObj.image;
	                    this._image = image;
	                    // Image is not complete finish, add to pending list
	                    if (!image.width || !image.height) {
	                        cachedImgObj.pending.push(this);
	                        return;
	                    }
	                }
	            }
	            if (image) {
	                // 图片已经加载完成
	                // if (image.nodeName.toUpperCase() == 'IMG') {
	                //     if (!image.complete) {
	                //         return;
	                //     }
	                // }
	                // Else is canvas
	                var width = style.width || image.width;
	                var height = style.height || image.height;
	                var x = style.x || 0;
	                var y = style.y || 0;
	                // 图片加载失败
	                if (!image.width || !image.height) {
	                    return;
	                }
	                // 设置transform
	                this.setTransform(ctx);
	                if (style.sWidth && style.sHeight) {
	                    var sx = style.sx || 0;
	                    var sy = style.sy || 0;
	                    ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	                } else if (style.sx && style.sy) {
	                    var sx = style.sx;
	                    var sy = style.sy;
	                    var sWidth = width - sx;
	                    var sHeight = height - sy;
	                    ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	                } else {
	                    ctx.drawImage(image, x, y, width, height);
	                }
	                // 如果没设置宽和高的话自动根据图片宽高设置
	                if (style.width == null) {
	                    style.width = width;
	                }
	                if (style.height == null) {
	                    style.height = height;
	                }
	                this.restoreTransform(ctx);
	                // Draw rect text
	                if (style.text != null) {
	                    this.drawRectText(ctx, this.getBoundingRect());
	                }
	            }
	        },
	        getBoundingRect: function () {
	            var style = this.style;
	            if (!this._rect) {
	                this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	            }
	            return this._rect;
	        }
	    };
	    zrUtil.inherits(ZImage, Displayable);
	    return ZImage;
	});
	define('zrender/graphic/Text', ['require', './Displayable', '../core/util', '../contain/text'], function (require) {
	    var Displayable = require('./Displayable');
	    var zrUtil = require('../core/util');
	    var textContain = require('../contain/text');
	    /**
	     * @alias zrender/graphic/Text
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    var Text = function (opts) {
	        Displayable.call(this, opts);
	    };
	    Text.prototype = {
	        constructor: Text,
	        type: 'text',
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // Convert to string
	            var text = style.text;
	            // Convert to string
	            text != null && (text += '');
	            // Always bind style
	            style.bind(ctx, this, prevEl);
	            if (text) {
	                this.setTransform(ctx);
	                var textBaseline;
	                var textAlign = style.textAlign;
	                var font = style.textFont || style.font;
	                if (style.textVerticalAlign) {
	                    var rect = textContain.getBoundingRect(text, font, style.textAlign, 'top');
	                    // Ignore textBaseline
	                    textBaseline = 'middle';
	                    switch (style.textVerticalAlign) {
	                    case 'middle':
	                        y -= rect.height / 2 - rect.lineHeight / 2;
	                        break;
	                    case 'bottom':
	                        y -= rect.height - rect.lineHeight / 2;
	                        break;
	                    default:
	                        y += rect.lineHeight / 2;
	                    }
	                } else {
	                    textBaseline = style.textBaseline;
	                }
	                ctx.font = font;
	                ctx.textAlign = textAlign || 'left';
	                // Use canvas default left textAlign. Giving invalid value will cause state not change
	                if (ctx.textAlign !== textAlign) {
	                    ctx.textAlign = 'left';
	                }
	                ctx.textBaseline = textBaseline || 'alphabetic';
	                // Use canvas default alphabetic baseline
	                if (ctx.textBaseline !== textBaseline) {
	                    ctx.textBaseline = 'alphabetic';
	                }
	                var lineHeight = textContain.measureText('国', ctx.font).width;
	                var textLines = text.split('\n');
	                for (var i = 0; i < textLines.length; i++) {
	                    style.hasFill() && ctx.fillText(textLines[i], x, y);
	                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);
	                    y += lineHeight;
	                }
	                this.restoreTransform(ctx);
	            }
	        },
	        getBoundingRect: function () {
	            if (!this._rect) {
	                var style = this.style;
	                var textVerticalAlign = style.textVerticalAlign;
	                var rect = textContain.getBoundingRect(style.text + '', style.textFont || style.font, style.textAlign, textVerticalAlign ? 'top' : style.textBaseline);
	                switch (textVerticalAlign) {
	                case 'middle':
	                    rect.y -= rect.height / 2;
	                    break;
	                case 'bottom':
	                    rect.y -= rect.height;
	                    break;
	                }
	                rect.x += style.x || 0;
	                rect.y += style.y || 0;
	                this._rect = rect;
	            }
	            return this._rect;
	        }
	    };
	    zrUtil.inherits(Text, Displayable);
	    return Text;
	});
	define('zrender/graphic/shape/Circle', ['require', '../Path'], function (require) {
	    'use strict';
	    return require('../Path').extend({
	        type: 'circle',
	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0
	        },
	        buildPath: function (ctx, shape, inBundle) {
	            // Better stroking in ShapeBundle
	            // Always do it may have performence issue ( fill may be 2x more cost)
	            if (inBundle) {
	                ctx.moveTo(shape.cx + shape.r, shape.cy);
	            }
	            // Better stroking in ShapeBundle
	            // ctx.moveTo(shape.cx + shape.r, shape.cy);
	            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	        }
	    });
	});
	define('zrender/graphic/shape/Sector', ['require', '../Path'], function (require) {
	    return require('../Path').extend({
	        type: 'sector',
	        shape: {
	            cx: 0,
	            cy: 0,
	            r0: 0,
	            r: 0,
	            startAngle: 0,
	            endAngle: Math.PI * 2,
	            clockwise: true
	        },
	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var r0 = Math.max(shape.r0 || 0, 0);
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;
	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);
	            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	            ctx.lineTo(unitX * r + x, unitY * r + y);
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	            ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
	            if (r0 !== 0) {
	                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	            }
	            ctx.closePath();
	        }
	    });
	});
	define('zrender/graphic/shape/Ring', ['require', '../Path'], function (require) {
	    return require('../Path').extend({
	        type: 'ring',
	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0,
	            r0: 0
	        },
	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var PI2 = Math.PI * 2;
	            ctx.moveTo(x + shape.r, y);
	            ctx.arc(x, y, shape.r, 0, PI2, false);
	            ctx.moveTo(x + shape.r0, y);
	            ctx.arc(x, y, shape.r0, 0, PI2, true);
	        }
	    });
	});
	define('zrender/graphic/shape/Polyline', ['require', '../helper/poly', '../Path'], function (require) {
	    var polyHelper = require('../helper/poly');
	    return require('../Path').extend({
	        type: 'polyline',
	        shape: {
	            points: null,
	            smooth: false,
	            smoothConstraint: null
	        },
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, false);
	        }
	    });
	});
	define('zrender/graphic/shape/Polygon', ['require', '../helper/poly', '../Path'], function (require) {
	    var polyHelper = require('../helper/poly');
	    return require('../Path').extend({
	        type: 'polygon',
	        shape: {
	            points: null,
	            smooth: false,
	            smoothConstraint: null
	        },
	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, true);
	        }
	    });
	});
	define('echarts/component/tooltip/TooltipView', ['require', './TooltipContent', '../../util/graphic', 'zrender/core/util', '../../util/format', '../../util/number', 'zrender/core/env', '../../model/Model', '../../echarts'], function (require) {
	    var TooltipContent = require('./TooltipContent');
	    var graphic = require('../../util/graphic');
	    var zrUtil = require('zrender/core/util');
	    var formatUtil = require('../../util/format');
	    var numberUtil = require('../../util/number');
	    var parsePercent = numberUtil.parsePercent;
	    var env = require('zrender/core/env');
	    var Model = require('../../model/Model');
	    function dataEqual(a, b) {
	        if (!a || !b) {
	            return false;
	        }
	        var round = numberUtil.round;
	        return round(a[0]) === round(b[0]) && round(a[1]) === round(b[1]);
	    }
	    /**
	     * @inner
	     */
	    function makeLineShape(x1, y1, x2, y2) {
	        return {
	            x1: x1,
	            y1: y1,
	            x2: x2,
	            y2: y2
	        };
	    }
	    /**
	     * @inner
	     */
	    function makeRectShape(x, y, width, height) {
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        };
	    }
	    /**
	     * @inner
	     */
	    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	        return {
	            cx: cx,
	            cy: cy,
	            r0: r0,
	            r: r,
	            startAngle: startAngle,
	            endAngle: endAngle,
	            clockwise: true
	        };
	    }
	    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;
	        var gap = 20;
	        if (x + width + gap > viewWidth) {
	            x -= width + gap;
	        } else {
	            x += gap;
	        }
	        if (y + height + gap > viewHeight) {
	            y -= height + gap;
	        } else {
	            y += gap;
	        }
	        return [
	            x,
	            y
	        ];
	    }
	    function calcTooltipPosition(position, rect, dom) {
	        var domWidth = dom.clientWidth;
	        var domHeight = dom.clientHeight;
	        var gap = 5;
	        var x = 0;
	        var y = 0;
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;
	        switch (position) {
	        case 'inside':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'top':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y - domHeight - gap;
	            break;
	        case 'bottom':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight + gap;
	            break;
	        case 'left':
	            x = rect.x - domWidth - gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'right':
	            x = rect.x + rectWidth + gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	        }
	        return [
	            x,
	            y
	        ];
	    }
	    /**
	     * @param  {string|Function|Array.<number>} positionExpr
	     * @param  {number} x Mouse x
	     * @param  {number} y Mouse y
	     * @param  {module:echarts/component/tooltip/TooltipContent} content
	     * @param  {Object|<Array.<Object>} params
	     * @param  {module:zrender/Element} el target element
	     * @param  {module:echarts/ExtensionAPI} api
	     * @return {Array.<number>}
	     */
	    function updatePosition(positionExpr, x, y, content, params, el, api) {
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();
	        var rect = el && el.getBoundingRect().clone();
	        el && rect.applyTransform(el.transform);
	        if (typeof positionExpr === 'function') {
	            // Callback of position can be an array or a string specify the position
	            positionExpr = positionExpr([
	                x,
	                y
	            ], params, content.el, rect);
	        }
	        if (zrUtil.isArray(positionExpr)) {
	            x = parsePercent(positionExpr[0], viewWidth);
	            y = parsePercent(positionExpr[1], viewHeight);
	        }    // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	        else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(positionExpr, rect, content.el);
	            x = pos[0];
	            y = pos[1];
	        } else {
	            var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	            x = pos[0];
	            y = pos[1];
	        }
	        content.moveTo(x, y);
	    }
	    function ifSeriesSupportAxisTrigger(seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var trigger = seriesModel.get('tooltip.trigger', true);
	        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	        return !(!coordSys || coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis' || trigger === 'item');
	    }
	    require('../../echarts').extendComponentView({
	        type: 'tooltip',
	        _axisPointers: {},
	        init: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var tooltipContent = new TooltipContent(api.getDom(), api);
	            this._tooltipContent = tooltipContent;
	            api.on('showTip', this._manuallyShowTip, this);
	            api.on('hideTip', this._manuallyHideTip, this);
	        },
	        render: function (tooltipModel, ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            // Reset
	            this.group.removeAll();
	            /**
	             * @type {Object}
	             * @private
	             */
	            this._axisPointers = {};
	            /**
	             * @private
	             * @type {module:echarts/component/tooltip/TooltipModel}
	             */
	            this._tooltipModel = tooltipModel;
	            /**
	             * @private
	             * @type {module:echarts/model/Global}
	             */
	            this._ecModel = ecModel;
	            /**
	             * @private
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this._api = api;
	            /**
	             * @type {Object}
	             * @private
	             */
	            this._lastHover = {};
	            var tooltipContent = this._tooltipContent;
	            tooltipContent.update();
	            tooltipContent.enterable = tooltipModel.get('enterable');
	            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	            /**
	             * @type {Object.<string, Array>}
	             */
	            this._seriesGroupByAxis = this._prepareAxisTriggerData(tooltipModel, ecModel);
	            var crossText = this._crossText;
	            if (crossText) {
	                this.group.add(crossText);
	            }
	            // Try to keep the tooltip show when refreshing
	            if (this._lastX != null && this._lastY != null) {
	                var self = this;
	                clearTimeout(this._refreshUpdateTimeout);
	                this._refreshUpdateTimeout = setTimeout(function () {
	                    // Show tip next tick after other charts are rendered
	                    // In case highlight action has wrong result
	                    // FIXME
	                    self._manuallyShowTip({
	                        x: self._lastX,
	                        y: self._lastY
	                    });
	                });
	            }
	            var zr = this._api.getZr();
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	            if (tooltipModel.get('triggerOn') === 'click') {
	                zr.on('click', this._tryShow, this);
	            } else {
	                zr.on('mousemove', this._mousemove, this);
	                zr.on('mouseout', this._hide, this);
	                zr.on('globalout', this._hide, this);
	            }
	        },
	        _mousemove: function (e) {
	            var showDelay = this._tooltipModel.get('showDelay');
	            var self = this;
	            clearTimeout(this._showTimeout);
	            if (showDelay > 0) {
	                this._showTimeout = setTimeout(function () {
	                    self._tryShow(e);
	                }, showDelay);
	            } else {
	                this._tryShow(e);
	            }
	        },
	        _manuallyShowTip: function (event) {
	            // From self
	            if (event.from === this.uid) {
	                return;
	            }
	            var ecModel = this._ecModel;
	            var seriesIndex = event.seriesIndex;
	            var dataIndex = event.dataIndex;
	            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	            var api = this._api;
	            if (event.x == null || event.y == null) {
	                if (!seriesModel) {
	                    // Find the first series can use axis trigger
	                    ecModel.eachSeries(function (_series) {
	                        if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                            seriesModel = _series;
	                        }
	                    });
	                }
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    if (dataIndex == null) {
	                        dataIndex = data.indexOfName(event.name);
	                    }
	                    var el = data.getItemGraphicEl(dataIndex);
	                    var cx, cy;
	                    // Try to get the point in coordinate system
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (coordSys && coordSys.dataToPoint) {
	                        var point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {
	                                return seriesModel.coordDimToDataDim(dim)[0];
	                            }), dataIndex, true));
	                        cx = point && point[0];
	                        cy = point && point[1];
	                    } else if (el) {
	                        // Use graphic bounding rect
	                        var rect = el.getBoundingRect().clone();
	                        rect.applyTransform(el.transform);
	                        cx = rect.x + rect.width / 2;
	                        cy = rect.y + rect.height / 2;
	                    }
	                    if (cx != null && cy != null) {
	                        this._tryShow({
	                            offsetX: cx,
	                            offsetY: cy,
	                            target: el,
	                            event: {}
	                        });
	                    }
	                }
	            } else {
	                var el = api.getZr().handler.findHover(event.x, event.y);
	                this._tryShow({
	                    offsetX: event.x,
	                    offsetY: event.y,
	                    target: el,
	                    event: {}
	                });
	            }
	        },
	        _manuallyHideTip: function (e) {
	            if (e.from === this.uid) {
	                return;
	            }
	            this._hide();
	        },
	        _prepareAxisTriggerData: function (tooltipModel, ecModel) {
	            // Prepare data for axis trigger
	            var seriesGroupByAxis = {};
	            ecModel.eachSeries(function (seriesModel) {
	                if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                    var coordSys = seriesModel.coordinateSystem;
	                    var baseAxis;
	                    var key;
	                    // Only cartesian2d, polar and single support axis trigger
	                    if (coordSys.type === 'cartesian2d') {
	                        // FIXME `axisPointer.axis` is not baseAxis
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + baseAxis.index;
	                    } else if (coordSys.type === 'singleAxis') {
	                        baseAxis = coordSys.getAxis();
	                        key = baseAxis.dim + baseAxis.type;
	                    } else {
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + coordSys.name;
	                    }
	                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                        coordSys: [],
	                        series: []
	                    };
	                    seriesGroupByAxis[key].coordSys.push(coordSys);
	                    seriesGroupByAxis[key].series.push(seriesModel);
	                }
	            }, this);
	            return seriesGroupByAxis;
	        },
	        _tryShow: function (e) {
	            var el = e.target;
	            var tooltipModel = this._tooltipModel;
	            var globalTrigger = tooltipModel.get('trigger');
	            var ecModel = this._ecModel;
	            var api = this._api;
	            if (!tooltipModel) {
	                return;
	            }
	            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	            this._lastX = e.offsetX;
	            this._lastY = e.offsetY;
	            // Always show item tooltip if mouse is on the element with dataIndex
	            if (el && el.dataIndex != null) {
	                // Use dataModel in element if possible
	                // Used when mouseover on a element like markPoint or edge
	                // In which case, the data is not main data in series.
	                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                var itemModel = dataModel.getData().getItemModel(dataIndex);
	                // Series or single data may use item trigger when global is axis trigger
	                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                } else {
	                    // Reset ticket
	                    this._ticket = '';
	                    // If either single data or series use item trigger
	                    this._hideAxisPointer();
	                    // Reset last hover and dispatch downplay action
	                    this._resetLastHover();
	                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);
	                }
	                api.dispatchAction({
	                    type: 'showTip',
	                    from: this.uid,
	                    dataIndex: el.dataIndex,
	                    seriesIndex: el.seriesIndex
	                });
	            }    // Tooltip provided directly. Like legend
	            else if (el && el.tooltip) {
	                var tooltipOpt = el.tooltip;
	                if (typeof tooltipOpt === 'string') {
	                    var content = tooltipOpt;
	                    tooltipOpt = {
	                        content: content,
	                        formatter: content
	                    };
	                }
	                var subTooltipModel = new Model(tooltipOpt, tooltipModel);
	                var defaultHtml = subTooltipModel.get('content');
	                var asyncTicket = Math.random();
	                this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {}, asyncTicket, e.offsetX, e.offsetY, el, api);
	            } else {
	                if (globalTrigger === 'item') {
	                    this._hide();
	                } else {
	                    // Try show axis tooltip
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }
	                // Action of cross pointer
	                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	                if (tooltipModel.get('axisPointer.type') === 'cross') {
	                    api.dispatchAction({
	                        type: 'showTip',
	                        from: this.uid,
	                        x: e.offsetX,
	                        y: e.offsetY
	                    });
	                }
	            }
	        },
	        _showAxisTooltip: function (tooltipModel, ecModel, e) {
	            var axisPointerModel = tooltipModel.getModel('axisPointer');
	            var axisPointerType = axisPointerModel.get('type');
	            if (axisPointerType === 'cross') {
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                    var dataIndex = el.dataIndex;
	                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);
	                }
	            }
	            this._showAxisPointer();
	            var allNotShow = true;
	            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	                // Try show the axis pointer
	                var allCoordSys = seriesCoordSysSameAxis.coordSys;
	                var coordSys = allCoordSys[0];
	                // If mouse position is not in the grid or polar
	                var point = [
	                        e.offsetX,
	                        e.offsetY
	                    ];
	                if (!coordSys.containPoint(point)) {
	                    // Hide axis pointer
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }
	                allNotShow = false;
	                // Make sure point is discrete on cateogry axis
	                var dimensions = coordSys.dimensions;
	                var value = coordSys.pointToData(point, true);
	                point = coordSys.dataToPoint(value);
	                var baseAxis = coordSys.getBaseAxis();
	                var axisType = axisPointerModel.get('axis');
	                if (axisType === 'auto') {
	                    axisType = baseAxis.dim;
	                }
	                var contentNotChange = false;
	                var lastHover = this._lastHover;
	                if (axisPointerType === 'cross') {
	                    // If hover data not changed
	                    // Possible when two axes are all category
	                    if (dataEqual(lastHover.data, value)) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value;
	                } else {
	                    var valIndex = zrUtil.indexOf(dimensions, axisType);
	                    // If hover data not changed on the axis dimension
	                    if (lastHover.data === value[valIndex]) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value[valIndex];
	                }
	                if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                    this._showCartesianPointer(axisPointerModel, coordSys, axisType, point);
	                } else if (coordSys.type === 'polar' && !contentNotChange) {
	                    this._showPolarPointer(axisPointerModel, coordSys, axisType, point);
	                } else if (coordSys.type === 'singleAxis' && !contentNotChange) {
	                    this._showSinglePointer(axisPointerModel, coordSys, axisType, point);
	                }
	                if (axisPointerType !== 'cross') {
	                    this._dispatchAndShowSeriesTooltipContent(coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange);
	                }
	            }, this);
	            if (!this._tooltipModel.get('show')) {
	                this._hideAxisPointer();
	            }
	            if (allNotShow) {
	                this._hide();
	            }
	        },
	        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var baseAxis = cartesian.getBaseAxis();
	            var moveAnimation = axisPointerType !== 'cross' && baseAxis.type === 'category' && baseAxis.getBandWidth() > 20;
	            if (axisPointerType === 'cross') {
	                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());
	                this._updateCrossText(cartesian, point, axisPointerModel);
	            } else {
	                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	                var otherExtent = otherAxis.getGlobalExtent();
	                if (cartesian.type === 'cartesian2d') {
	                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(axisType, point, otherExtent);
	                }
	            }
	            /**
	             * @inner
	             */
	            function moveGridLine(axisType, point, otherExtent) {
	                var targetShape = axisType === 'x' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	                var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	                graphic.subPixelOptimizeLine({
	                    shape: targetShape,
	                    style: pointerEl.style
	                });
	                moveAnimation ? graphic.updateProps(pointerEl, { shape: targetShape }, axisPointerModel) : pointerEl.attr({ shape: targetShape });
	            }
	            /**
	             * @inner
	             */
	            function moveGridShadow(axisType, point, otherExtent) {
	                var axis = cartesian.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	                var span = otherExtent[1] - otherExtent[0];
	                var targetShape = axisType === 'x' ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span) : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);
	                var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	                moveAnimation ? graphic.updateProps(pointerEl, { shape: targetShape }, axisPointerModel) : pointerEl.attr({ shape: targetShape });
	            }
	        },
	        _showSinglePointer: function (axisPointerModel, single, axisType, point) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var moveAnimation = axisPointerType !== 'cross' && single.getBaseAxis().type === 'category';
	            var rect = single.getRect();
	            var otherExtent = [
	                    rect.y,
	                    rect.y + rect.height
	                ];
	            moveSingleLine(axisType, point, otherExtent);
	            /**
	             * @inner
	             */
	            function moveSingleLine(axisType, point, otherExtent) {
	                var axis = single.getAxis();
	                var orient = axis.orient;
	                var targetShape = orient === 'horizontal' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	                var pointerEl = self._getPointerElement(single, axisPointerModel, axisType, targetShape);
	                moveAnimation ? graphic.updateProps(pointerEl, { shape: targetShape }, axisPointerModel) : pointerEl.attr({ shape: targetShape });
	            }
	        },
	        _showPolarPointer: function (axisPointerModel, polar, axisType, point) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var angleAxis = polar.getAngleAxis();
	            var radiusAxis = polar.getRadiusAxis();
	            var moveAnimation = axisPointerType !== 'cross' && polar.getBaseAxis().type === 'category';
	            if (axisPointerType === 'cross') {
	                movePolarLine('angle', point, radiusAxis.getExtent());
	                movePolarLine('radius', point, angleAxis.getExtent());
	                this._updateCrossText(polar, point, axisPointerModel);
	            } else {
	                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	                var otherExtent = otherAxis.getExtent();
	                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(axisType, point, otherExtent);
	            }
	            /**
	             * @inner
	             */
	            function movePolarLine(axisType, point, otherExtent) {
	                var mouseCoord = polar.pointToCoord(point);
	                var targetShape;
	                if (axisType === 'angle') {
	                    var p1 = polar.coordToPoint([
	                            otherExtent[0],
	                            mouseCoord[1]
	                        ]);
	                    var p2 = polar.coordToPoint([
	                            otherExtent[1],
	                            mouseCoord[1]
	                        ]);
	                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	                } else {
	                    targetShape = {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: mouseCoord[0]
	                    };
	                }
	                var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);
	                moveAnimation ? graphic.updateProps(pointerEl, { shape: targetShape }, axisPointerModel) : pointerEl.attr({ shape: targetShape });
	            }
	            /**
	             * @inner
	             */
	            function movePolarShadow(axisType, point, otherExtent) {
	                var axis = polar.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	                var mouseCoord = polar.pointToCoord(point);
	                var targetShape;
	                var radian = Math.PI / 180;
	                if (axisType === 'angle') {
	                    targetShape = makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1], (-mouseCoord[1] - bandWidth / 2) * radian, (-mouseCoord[1] + bandWidth / 2) * radian);
	                } else {
	                    targetShape = makeSectorShape(polar.cx, polar.cy, mouseCoord[0] - bandWidth / 2, mouseCoord[0] + bandWidth / 2, 0, Math.PI * 2);
	                }
	                var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);
	                moveAnimation ? graphic.updateProps(pointerEl, { shape: targetShape }, axisPointerModel) : pointerEl.attr({ shape: targetShape });
	            }
	        },
	        _updateCrossText: function (coordSys, point, axisPointerModel) {
	            var crossStyleModel = axisPointerModel.getModel('crossStyle');
	            var textStyleModel = crossStyleModel.getModel('textStyle');
	            var tooltipModel = this._tooltipModel;
	            var text = this._crossText;
	            if (!text) {
	                text = this._crossText = new graphic.Text({
	                    style: {
	                        textAlign: 'left',
	                        textVerticalAlign: 'bottom'
	                    }
	                });
	                this.group.add(text);
	            }
	            var value = coordSys.pointToData(point);
	            var dims = coordSys.dimensions;
	            value = zrUtil.map(value, function (val, idx) {
	                var axis = coordSys.getAxis(dims[idx]);
	                if (axis.type === 'category' || axis.type === 'time') {
	                    val = axis.scale.getLabel(val);
	                } else {
	                    val = formatUtil.addCommas(val.toFixed(axis.getPixelPrecision()));
	                }
	                return val;
	            });
	            text.setStyle({
	                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	                textFont: textStyleModel.getFont(),
	                text: value.join(', '),
	                x: point[0] + 5,
	                y: point[1] - 5
	            });
	            text.z = tooltipModel.get('z');
	            text.zlevel = tooltipModel.get('zlevel');
	        },
	        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {
	            var tooltipModel = this._tooltipModel;
	            var z = tooltipModel.get('z');
	            var zlevel = tooltipModel.get('zlevel');
	            var axisPointers = this._axisPointers;
	            var coordSysName = coordSys.name;
	            axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	            if (axisPointers[coordSysName][axisType]) {
	                return axisPointers[coordSysName][axisType];
	            }
	            // Create if not exists
	            var pointerType = pointerModel.get('type');
	            var styleModel = pointerModel.getModel(pointerType + 'Style');
	            var isShadow = pointerType === 'shadow';
	            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();
	            var elementType = coordSys.type === 'polar' ? isShadow ? 'Sector' : axisType === 'radius' ? 'Circle' : 'Line' : isShadow ? 'Rect' : 'Line';
	            isShadow ? style.stroke = null : style.fill = null;
	            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	                    style: style,
	                    z: z,
	                    zlevel: zlevel,
	                    silent: true,
	                    shape: initShape
	                });
	            this.group.add(el);
	            return el;
	        },
	        _dispatchAndShowSeriesTooltipContent: function (coordSys, seriesList, point, value, contentNotChange) {
	            var rootTooltipModel = this._tooltipModel;
	            var baseAxis = coordSys.getBaseAxis();
	            var baseDimIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;
	            var payloadBatch = zrUtil.map(seriesList, function (series) {
	                    return {
	                        seriesIndex: series.seriesIndex,
	                        dataIndex: series.getAxisTooltipDataIndex ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis) : series.getData().indexOfNearest(series.coordDimToDataDim(baseAxis.dim)[0], value[baseDimIndex], false, baseAxis.type === 'category' ? 0.5 : null)
	                    };
	                });
	            var lastHover = this._lastHover;
	            var api = this._api;
	            // Dispatch downplay action
	            if (lastHover.payloadBatch && !contentNotChange) {
	                api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Dispatch highlight action
	            if (!contentNotChange) {
	                api.dispatchAction({
	                    type: 'highlight',
	                    batch: payloadBatch
	                });
	                lastHover.payloadBatch = payloadBatch;
	            }
	            // Dispatch showTip action
	            api.dispatchAction({
	                type: 'showTip',
	                dataIndex: payloadBatch[0].dataIndex,
	                seriesIndex: payloadBatch[0].seriesIndex,
	                from: this.uid
	            });
	            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {
	                var paramsList = zrUtil.map(seriesList, function (series, index) {
	                        return series.getDataParams(payloadBatch[index].dataIndex);
	                    });
	                if (!contentNotChange) {
	                    // Update html content
	                    var firstDataIndex = payloadBatch[0].dataIndex;
	                    // Default tooltip content
	                    // FIXME
	                    // (1) shold be the first data which has name?
	                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                    var firstLine = baseAxis.type === 'time' ? baseAxis.scale.getLabel(value[baseDimIndex]) : seriesList[0].getData().getName(firstDataIndex);
	                    var defaultHtml = (firstLine ? firstLine + '<br />' : '') + zrUtil.map(seriesList, function (series, index) {
	                            return series.formatTooltip(payloadBatch[index].dataIndex, true);
	                        }).join('<br />');
	                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;
	                    this._showTooltipContent(rootTooltipModel, defaultHtml, paramsList, asyncTicket, point[0], point[1], null, api);
	                } else {
	                    updatePosition(rootTooltipModel.get('position'), point[0], point[1], this._tooltipContent, paramsList, null, api);
	                }
	            }
	        },
	        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {
	            // FIXME Graph data
	            var api = this._api;
	            var data = seriesModel.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);
	            var tooltipOpt = itemModel.get('tooltip', true);
	            if (typeof tooltipOpt === 'string') {
	                // In each data item tooltip can be simply write:
	                // {
	                //  value: 10,
	                //  tooltip: 'Something you need to know'
	                // }
	                var tooltipContent = tooltipOpt;
	                tooltipOpt = { formatter: tooltipContent };
	            }
	            var rootTooltipModel = this._tooltipModel;
	            var seriesTooltipModel = seriesModel.getModel('tooltip', rootTooltipModel);
	            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);
	            var params = seriesModel.getDataParams(dataIndex, dataType);
	            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);
	            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;
	            this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.target, api);
	        },
	        _showTooltipContent: function (tooltipModel, defaultHtml, params, asyncTicket, x, y, target, api) {
	            // Reset ticket
	            this._ticket = '';
	            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {
	                var tooltipContent = this._tooltipContent;
	                var formatter = tooltipModel.get('formatter');
	                var positionExpr = tooltipModel.get('position');
	                var html = defaultHtml;
	                if (formatter) {
	                    if (typeof formatter === 'string') {
	                        html = formatUtil.formatTpl(formatter, params);
	                    } else if (typeof formatter === 'function') {
	                        var self = this;
	                        var ticket = asyncTicket;
	                        var callback = function (cbTicket, html) {
	                            if (cbTicket === self._ticket) {
	                                tooltipContent.setContent(html);
	                                updatePosition(positionExpr, x, y, tooltipContent, params, target, api);
	                            }
	                        };
	                        self._ticket = ticket;
	                        html = formatter(params, ticket, callback);
	                    }
	                }
	                tooltipContent.show(tooltipModel);
	                tooltipContent.setContent(html);
	                updatePosition(positionExpr, x, y, tooltipContent, params, target, api);
	            }
	        },
	        _showAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.show();
	                });
	            } else {
	                this.group.eachChild(function (child) {
	                    child.show();
	                });
	                this.group.show();
	            }
	        },
	        _resetLastHover: function () {
	            var lastHover = this._lastHover;
	            if (lastHover.payloadBatch) {
	                this._api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Reset lastHover
	            this._lastHover = {};
	        },
	        _hideAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.hide();
	                });
	            } else {
	                if (this.group.children().length) {
	                    this.group.hide();
	                }
	            }
	        },
	        _hide: function () {
	            clearTimeout(this._showTimeout);
	            this._hideAxisPointer();
	            this._resetLastHover();
	            if (!this._alwaysShowContent) {
	                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	            }
	            this._api.dispatchAction({
	                type: 'hideTip',
	                from: this.uid
	            });
	            this._lastX = this._lastY = null;
	        },
	        dispose: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var zr = api.getZr();
	            this._tooltipContent.hide();
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	            api.off('showTip', this._manuallyShowTip);
	            api.off('hideTip', this._manuallyHideTip);
	        }
	    });
	});
	define('zrender/graphic/shape/Rect', ['require', '../helper/roundRect', '../Path'], function (require) {
	    var roundRectHelper = require('../helper/roundRect');
	    return require('../Path').extend({
	        type: 'rect',
	        shape: {
	            r: 0,
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            if (!shape.r) {
	                ctx.rect(x, y, width, height);
	            } else {
	                roundRectHelper.buildPath(ctx, shape);
	            }
	            ctx.closePath();
	            return;
	        }
	    });
	});
	define('zrender/graphic/shape/Line', ['require', '../Path'], function (require) {
	    return require('../Path').extend({
	        type: 'line',
	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            percent: 1
	        },
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var percent = shape.percent;
	            if (percent === 0) {
	                return;
	            }
	            ctx.moveTo(x1, y1);
	            if (percent < 1) {
	                x2 = x1 * (1 - percent) + x2 * percent;
	                y2 = y1 * (1 - percent) + y2 * percent;
	            }
	            ctx.lineTo(x2, y2);
	        },
	        pointAt: function (p) {
	            var shape = this.shape;
	            return [
	                shape.x1 * (1 - p) + shape.x2 * p,
	                shape.y1 * (1 - p) + shape.y2 * p
	            ];
	        }
	    });
	});
	define('zrender/graphic/shape/BezierCurve', ['require', '../../core/curve', '../../core/vector', '../Path'], function (require) {
	    'use strict';
	    var curveTool = require('../../core/curve');
	    var vec2 = require('../../core/vector');
	    var quadraticSubdivide = curveTool.quadraticSubdivide;
	    var cubicSubdivide = curveTool.cubicSubdivide;
	    var quadraticAt = curveTool.quadraticAt;
	    var cubicAt = curveTool.cubicAt;
	    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	    var cubicDerivativeAt = curveTool.cubicDerivativeAt;
	    var out = [];
	    function someVectorAt(shape, t, isTangent) {
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        if (cpx2 === null || cpy2 === null) {
	            return [
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)
	            ];
	        } else {
	            return [
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)
	            ];
	        }
	    }
	    return require('../Path').extend({
	        type: 'bezier-curve',
	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            cpx1: 0,
	            cpy1: 0,
	            percent: 1
	        },
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var cpx1 = shape.cpx1;
	            var cpy1 = shape.cpy1;
	            var cpx2 = shape.cpx2;
	            var cpy2 = shape.cpy2;
	            var percent = shape.percent;
	            if (percent === 0) {
	                return;
	            }
	            ctx.moveTo(x1, y1);
	            if (cpx2 == null || cpy2 == null) {
	                if (percent < 1) {
	                    quadraticSubdivide(x1, cpx1, x2, percent, out);
	                    cpx1 = out[1];
	                    x2 = out[2];
	                    quadraticSubdivide(y1, cpy1, y2, percent, out);
	                    cpy1 = out[1];
	                    y2 = out[2];
	                }
	                ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	            } else {
	                if (percent < 1) {
	                    cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	                    cpx1 = out[1];
	                    cpx2 = out[2];
	                    x2 = out[3];
	                    cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	                    cpy1 = out[1];
	                    cpy2 = out[2];
	                    y2 = out[3];
	                }
	                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	            }
	        },
	        pointAt: function (t) {
	            return someVectorAt(this.shape, t, false);
	        },
	        tangentAt: function (t) {
	            var p = someVectorAt(this.shape, t, true);
	            return vec2.normalize(p, p);
	        }
	    });
	});
	define('zrender/graphic/CompoundPath', ['require', './Path'], function (require) {
	    var Path = require('./Path');
	    return Path.extend({
	        type: 'compound',
	        shape: { paths: null },
	        _updatePathDirty: function () {
	            var dirtyPath = this.__dirtyPath;
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                // Mark as dirty if any subpath is dirty
	                dirtyPath = dirtyPath || paths[i].__dirtyPath;
	            }
	            this.__dirtyPath = dirtyPath;
	            this.__dirty = this.__dirty || dirtyPath;
	        },
	        beforeBrush: function () {
	            this._updatePathDirty();
	            var paths = this.shape.paths || [];
	            var scale = this.getGlobalScale();
	            // Update path scale
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].path.setScale(scale[0], scale[1]);
	            }
	        },
	        buildPath: function (ctx, shape) {
	            var paths = shape.paths || [];
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].buildPath(ctx, paths[i].shape, true);
	            }
	        },
	        afterBrush: function () {
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].__dirtyPath = false;
	            }
	        },
	        getBoundingRect: function () {
	            this._updatePathDirty();
	            return Path.prototype.getBoundingRect.call(this);
	        }
	    });
	});
	define('zrender/graphic/shape/Arc', ['require', '../Path'], function (require) {
	    return require('../Path').extend({
	        type: 'arc',
	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0,
	            startAngle: 0,
	            endAngle: Math.PI * 2,
	            clockwise: true
	        },
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;
	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);
	            ctx.moveTo(unitX * r + x, unitY * r + y);
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	        }
	    });
	});
	define('zrender/graphic/RadialGradient', ['require', '../core/util', './Gradient'], function (require) {
	    'use strict';
	    var zrUtil = require('../core/util');
	    var Gradient = require('./Gradient');
	    /**
	     * x, y, r are all percent from 0 to 1
	     * @param {number} [x=0.5]
	     * @param {number} [y=0.5]
	     * @param {number} [r=0.5]
	     * @param {Array.<Object>} [colorStops]
	     * @param {boolean} [globalCoord=false]
	     */
	    var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	        this.x = x == null ? 0.5 : x;
	        this.y = y == null ? 0.5 : y;
	        this.r = r == null ? 0.5 : r;
	        // Can be cloned
	        this.type = 'radial';
	        // If use global coord
	        this.global = globalCoord || false;
	        Gradient.call(this, colorStops);
	    };
	    RadialGradient.prototype = { constructor: RadialGradient };
	    zrUtil.inherits(RadialGradient, Gradient);
	    return RadialGradient;
	});
	define('zrender/graphic/LinearGradient', ['require', '../core/util', './Gradient'], function (require) {
	    'use strict';
	    var zrUtil = require('../core/util');
	    var Gradient = require('./Gradient');
	    /**
	     * x, y, x2, y2 are all percent from 0 to 1
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @param {number} [x2=1]
	     * @param {number} [y2=0]
	     * @param {Array.<Object>} colorStops
	     * @param {boolean} [globalCoord=false]
	     */
	    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	        this.x = x == null ? 0 : x;
	        this.y = y == null ? 0 : y;
	        this.x2 = x2 == null ? 1 : x2;
	        this.y2 = y2 == null ? 0 : y2;
	        // Can be cloned
	        this.type = 'linear';
	        // If use global coord
	        this.global = globalCoord || false;
	        Gradient.call(this, colorStops);
	    };
	    LinearGradient.prototype = { constructor: LinearGradient };
	    zrUtil.inherits(LinearGradient, Gradient);
	    return LinearGradient;
	});
	define('zrender/core/BoundingRect', ['require', './vector', './matrix'], function (require) {
	    'use strict';
	    var vec2 = require('./vector');
	    var matrix = require('./matrix');
	    var v2ApplyTransform = vec2.applyTransform;
	    var mathMin = Math.min;
	    var mathAbs = Math.abs;
	    var mathMax = Math.max;
	    /**
	     * @alias module:echarts/core/BoundingRect
	     */
	    function BoundingRect(x, y, width, height) {
	        /**
	         * @type {number}
	         */
	        this.x = x;
	        /**
	         * @type {number}
	         */
	        this.y = y;
	        /**
	         * @type {number}
	         */
	        this.width = width;
	        /**
	         * @type {number}
	         */
	        this.height = height;
	    }
	    BoundingRect.prototype = {
	        constructor: BoundingRect,
	        union: function (other) {
	            var x = mathMin(other.x, this.x);
	            var y = mathMin(other.y, this.y);
	            this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	            this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	            this.x = x;
	            this.y = y;
	        },
	        applyTransform: function () {
	            var min = [];
	            var max = [];
	            return function (m) {
	                // In case usage like this
	                // el.getBoundingRect().applyTransform(el.transform)
	                // And element has no transform
	                if (!m) {
	                    return;
	                }
	                min[0] = this.x;
	                min[1] = this.y;
	                max[0] = this.x + this.width;
	                max[1] = this.y + this.height;
	                v2ApplyTransform(min, min, m);
	                v2ApplyTransform(max, max, m);
	                this.x = mathMin(min[0], max[0]);
	                this.y = mathMin(min[1], max[1]);
	                this.width = mathAbs(max[0] - min[0]);
	                this.height = mathAbs(max[1] - min[1]);
	            };
	        }(),
	        calculateTransform: function (b) {
	            var a = this;
	            var sx = b.width / a.width;
	            var sy = b.height / a.height;
	            var m = matrix.create();
	            // 矩阵右乘
	            matrix.translate(m, m, [
	                -a.x,
	                -a.y
	            ]);
	            matrix.scale(m, m, [
	                sx,
	                sy
	            ]);
	            matrix.translate(m, m, [
	                b.x,
	                b.y
	            ]);
	            return m;
	        },
	        intersect: function (b) {
	            var a = this;
	            var ax0 = a.x;
	            var ax1 = a.x + a.width;
	            var ay0 = a.y;
	            var ay1 = a.y + a.height;
	            var bx0 = b.x;
	            var bx1 = b.x + b.width;
	            var by0 = b.y;
	            var by1 = b.y + b.height;
	            return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	        },
	        contain: function (x, y) {
	            var rect = this;
	            return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	        },
	        clone: function () {
	            return new BoundingRect(this.x, this.y, this.width, this.height);
	        },
	        copy: function (other) {
	            this.x = other.x;
	            this.y = other.y;
	            this.width = other.width;
	            this.height = other.height;
	        }
	    };
	    return BoundingRect;
	});
	define('echarts/component/toolbox/feature/DataView', ['require', 'zrender/core/util', 'zrender/core/event', '../featureManager', '../../../echarts'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var eventTool = require('zrender/core/event');
	    var BLOCK_SPLITER = new Array(60).join('-');
	    var ITEM_SPLITER = '	';
	    /**
	     * Group series into two types
	     *  1. on category axis, like line, bar
	     *  2. others, like scatter, pie
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object}
	     * @inner
	     */
	    function groupSeries(ecModel) {
	        var seriesGroupByCategoryAxis = {};
	        var otherSeries = [];
	        var meta = [];
	        ecModel.eachRawSeries(function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	                var baseAxis = coordSys.getBaseAxis();
	                if (baseAxis.type === 'category') {
	                    var key = baseAxis.dim + '_' + baseAxis.index;
	                    if (!seriesGroupByCategoryAxis[key]) {
	                        seriesGroupByCategoryAxis[key] = {
	                            categoryAxis: baseAxis,
	                            valueAxis: coordSys.getOtherAxis(baseAxis),
	                            series: []
	                        };
	                        meta.push({
	                            axisDim: baseAxis.dim,
	                            axisIndex: baseAxis.index
	                        });
	                    }
	                    seriesGroupByCategoryAxis[key].series.push(seriesModel);
	                } else {
	                    otherSeries.push(seriesModel);
	                }
	            } else {
	                otherSeries.push(seriesModel);
	            }
	        });
	        return {
	            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	            other: otherSeries,
	            meta: meta
	        };
	    }
	    /**
	     * Assemble content of series on cateogory axis
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleSeriesWithCategoryAxis(series) {
	        var tables = [];
	        zrUtil.each(series, function (group, key) {
	            var categoryAxis = group.categoryAxis;
	            var valueAxis = group.valueAxis;
	            var valueAxisDim = valueAxis.dim;
	            var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	                    return series.name;
	                }));
	            var columns = [categoryAxis.model.getCategories()];
	            zrUtil.each(group.series, function (series) {
	                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	                    return val;
	                }));
	            });
	            // Assemble table content
	            var lines = [headers.join(ITEM_SPLITER)];
	            for (var i = 0; i < columns[0].length; i++) {
	                var items = [];
	                for (var j = 0; j < columns.length; j++) {
	                    items.push(columns[j][i]);
	                }
	                lines.push(items.join(ITEM_SPLITER));
	            }
	            tables.push(lines.join('\n'));
	        });
	        return tables.join('\n\n' + BLOCK_SPLITER + '\n\n');
	    }
	    /**
	     * Assemble content of other series
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleOtherSeries(series) {
	        return zrUtil.map(series, function (series) {
	            var data = series.getRawData();
	            var lines = [series.name];
	            var vals = [];
	            data.each(data.dimensions, function () {
	                var argLen = arguments.length;
	                var dataIndex = arguments[argLen - 1];
	                var name = data.getName(dataIndex);
	                for (var i = 0; i < argLen - 1; i++) {
	                    vals[i] = arguments[i];
	                }
	                lines.push((name ? name + ITEM_SPLITER : '') + vals.join(ITEM_SPLITER));
	            });
	            return lines.join('\n');
	        }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	    }
	    /**
	     * @param {module:echarts/model/Global}
	     * @return {string}
	     * @inner
	     */
	    function getContentFromModel(ecModel) {
	        var result = groupSeries(ecModel);
	        return {
	            value: zrUtil.filter([
	                assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),
	                assembleOtherSeries(result.other)
	            ], function (str) {
	                return str.replace(/[\n\t\s]/g, '');
	            }).join('\n\n' + BLOCK_SPLITER + '\n\n'),
	            meta: result.meta
	        };
	    }
	    function trim(str) {
	        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	    }
	    /**
	     * If a block is tsv format
	     */
	    function isTSVFormat(block) {
	        // Simple method to find out if a block is tsv format
	        var firstLine = block.slice(0, block.indexOf('\n'));
	        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	            return true;
	        }
	    }
	    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	    /**
	     * @param {string} tsv
	     * @return {Array.<Object>}
	     */
	    function parseTSVContents(tsv) {
	        var tsvLines = tsv.split(/\n+/g);
	        var headers = trim(tsvLines.shift()).split(itemSplitRegex);
	        var categories = [];
	        var series = zrUtil.map(headers, function (header) {
	                return {
	                    name: header,
	                    data: []
	                };
	            });
	        for (var i = 0; i < tsvLines.length; i++) {
	            var items = trim(tsvLines[i]).split(itemSplitRegex);
	            categories.push(items.shift());
	            for (var j = 0; j < items.length; j++) {
	                series[j] && (series[j].data[i] = items[j]);
	            }
	        }
	        return {
	            series: series,
	            categories: categories
	        };
	    }
	    /**
	     * @param {string} str
	     * @return {Array.<Object>}
	     * @inner
	     */
	    function parseListContents(str) {
	        var lines = str.split(/\n+/g);
	        var seriesName = trim(lines.shift());
	        var data = [];
	        for (var i = 0; i < lines.length; i++) {
	            var items = trim(lines[i]).split(itemSplitRegex);
	            var name = '';
	            var value;
	            var hasName = false;
	            if (isNaN(items[0])) {
	                // First item is name
	                hasName = true;
	                name = items[0];
	                items = items.slice(1);
	                data[i] = {
	                    name: name,
	                    value: []
	                };
	                value = data[i].value;
	            } else {
	                value = data[i] = [];
	            }
	            for (var j = 0; j < items.length; j++) {
	                value.push(+items[j]);
	            }
	            if (value.length === 1) {
	                hasName ? data[i].value = value[0] : data[i] = value[0];
	            }
	        }
	        return {
	            name: seriesName,
	            data: data
	        };
	    }
	    /**
	     * @param {string} str
	     * @param {Array.<Object>} blockMetaList
	     * @return {Object}
	     * @inner
	     */
	    function parseContents(str, blockMetaList) {
	        var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	        var newOption = { series: [] };
	        zrUtil.each(blocks, function (block, idx) {
	            if (isTSVFormat(block)) {
	                var result = parseTSVContents(block);
	                var blockMeta = blockMetaList[idx];
	                var axisKey = blockMeta.axisDim + 'Axis';
	                if (blockMeta) {
	                    newOption[axisKey] = newOption[axisKey] || [];
	                    newOption[axisKey][blockMeta.axisIndex] = { data: result.categories };
	                    newOption.series = newOption.series.concat(result.series);
	                }
	            } else {
	                var result = parseListContents(block);
	                newOption.series.push(result);
	            }
	        });
	        return newOption;
	    }
	    /**
	     * @alias {module:echarts/component/toolbox/feature/DataView}
	     * @constructor
	     * @param {module:echarts/model/Model} model
	     */
	    function DataView(model) {
	        this._dom = null;
	        this.model = model;
	    }
	    DataView.defaultOption = {
	        show: true,
	        readOnly: false,
	        optionToContent: null,
	        contentToOption: null,
	        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	        title: '数据视图',
	        lang: [
	            '数据视图',
	            '关闭',
	            '刷新'
	        ],
	        backgroundColor: '#fff',
	        textColor: '#000',
	        textareaColor: '#fff',
	        textareaBorderColor: '#333',
	        buttonColor: '#c23531',
	        buttonTextColor: '#fff'
	    };
	    DataView.prototype.onclick = function (ecModel, api) {
	        var container = api.getDom();
	        var model = this.model;
	        if (this._dom) {
	            container.removeChild(this._dom);
	        }
	        var root = document.createElement('div');
	        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	        root.style.backgroundColor = model.get('backgroundColor') || '#fff';
	        // Create elements
	        var header = document.createElement('h4');
	        var lang = model.get('lang') || [];
	        header.innerHTML = lang[0] || model.get('title');
	        header.style.cssText = 'margin: 10px 20px;';
	        header.style.color = model.get('textColor');
	        var viewMain = document.createElement('div');
	        var textarea = document.createElement('textarea');
	        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';
	        var optionToContent = model.get('optionToContent');
	        var contentToOption = model.get('contentToOption');
	        var result = getContentFromModel(ecModel);
	        if (typeof optionToContent === 'function') {
	            var htmlOrDom = optionToContent(api.getOption());
	            if (typeof htmlOrDom === 'string') {
	                viewMain.innerHTML = htmlOrDom;
	            } else if (zrUtil.isDom(htmlOrDom)) {
	                viewMain.appendChild(htmlOrDom);
	            }
	        } else {
	            // Use default textarea
	            viewMain.appendChild(textarea);
	            textarea.readOnly = model.get('readOnly');
	            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	            textarea.style.color = model.get('textColor');
	            textarea.style.borderColor = model.get('textareaBorderColor');
	            textarea.style.backgroundColor = model.get('textareaColor');
	            textarea.value = result.value;
	        }
	        var blockMetaList = result.meta;
	        var buttonContainer = document.createElement('div');
	        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
	        var buttonStyle = 'float:right;margin-right:20px;border:none;' + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	        var closeButton = document.createElement('div');
	        var refreshButton = document.createElement('div');
	        buttonStyle += ';background-color:' + model.get('buttonColor');
	        buttonStyle += ';color:' + model.get('buttonTextColor');
	        var self = this;
	        function close() {
	            container.removeChild(root);
	            self._dom = null;
	        }
	        eventTool.addEventListener(closeButton, 'click', close);
	        eventTool.addEventListener(refreshButton, 'click', function () {
	            var newOption;
	            try {
	                if (typeof contentToOption === 'function') {
	                    newOption = contentToOption(viewMain, api.getOption());
	                } else {
	                    newOption = parseContents(textarea.value, blockMetaList);
	                }
	            } catch (e) {
	                close();
	                throw new Error('Data view format error ' + e);
	            }
	            if (newOption) {
	                api.dispatchAction({
	                    type: 'changeDataView',
	                    newOption: newOption
	                });
	            }
	            close();
	        });
	        closeButton.innerHTML = lang[1];
	        refreshButton.innerHTML = lang[2];
	        refreshButton.style.cssText = buttonStyle;
	        closeButton.style.cssText = buttonStyle;
	        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	        buttonContainer.appendChild(closeButton);
	        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
	        eventTool.addEventListener(textarea, 'keydown', function (e) {
	            if ((e.keyCode || e.which) === 9) {
	                // get caret position/selection
	                var val = this.value;
	                var start = this.selectionStart;
	                var end = this.selectionEnd;
	                // set textarea value to: text before caret + tab + text after caret
	                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);
	                // put caret at right position again
	                this.selectionStart = this.selectionEnd = start + 1;
	                // prevent the focus lose
	                eventTool.stop(e);
	            }
	        });
	        root.appendChild(header);
	        root.appendChild(viewMain);
	        root.appendChild(buttonContainer);
	        viewMain.style.height = container.clientHeight - 80 + 'px';
	        container.appendChild(root);
	        this._dom = root;
	    };
	    DataView.prototype.remove = function (ecModel, api) {
	        this._dom && api.getDom().removeChild(this._dom);
	    };
	    DataView.prototype.dispose = function (ecModel, api) {
	        this.remove(ecModel, api);
	    };
	    /**
	     * @inner
	     */
	    function tryMergeDataOption(newData, originalData) {
	        return zrUtil.map(newData, function (newVal, idx) {
	            var original = originalData && originalData[idx];
	            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	                    newVal = newVal.value;
	                }
	                // Original data has option
	                return zrUtil.defaults({ value: newVal }, original);
	            } else {
	                return newVal;
	            }
	        });
	    }
	    require('../featureManager').register('dataView', DataView);
	    require('../../../echarts').registerAction({
	        type: 'changeDataView',
	        event: 'dataViewChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        var newSeriesOptList = [];
	        zrUtil.each(payload.newOption.series, function (seriesOpt) {
	            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
	            if (!seriesModel) {
	                // New created series
	                // Geuss the series type
	                newSeriesOptList.push(zrUtil.extend({ type: 'scatter' }, seriesOpt));
	            } else {
	                var originalData = seriesModel.get('data');
	                newSeriesOptList.push({
	                    name: seriesOpt.name,
	                    data: tryMergeDataOption(seriesOpt.data, originalData)
	                });
	            }
	        });
	        ecModel.mergeOption(zrUtil.defaults({ series: newSeriesOptList }, payload.newOption));
	    });
	    return DataView;
	});
	define('echarts/model/mixin/colorPalette', [], function () {
	    return {
	        clearColorPalette: function () {
	            this._colorIdx = 0;
	            this._colorNameMap = {};
	        },
	        getColorFromPalette: function (name, scope) {
	            scope = scope || this;
	            var colorIdx = scope._colorIdx || 0;
	            var colorNameMap = scope._colorNameMap || (scope._colorNameMap = {});
	            if (colorNameMap[name]) {
	                return colorNameMap[name];
	            }
	            var colorPalette = this.get('color', true) || [];
	            if (!colorPalette.length) {
	                return;
	            }
	            var color = colorPalette[colorIdx];
	            if (name) {
	                colorNameMap[name] = color;
	            }
	            scope._colorIdx = (colorIdx + 1) % colorPalette.length;
	            return color;
	        }
	    };
	});
	define('echarts/model/globalDefault', [], function () {
	    var platform = '';
	    // Navigator not exists in node
	    if (typeof navigator !== 'undefined') {
	        platform = navigator.platform || '';
	    }
	    return {
	        color: [
	            '#c23531',
	            '#2f4554',
	            '#61a0a8',
	            '#d48265',
	            '#91c7ae',
	            '#749f83',
	            '#ca8622',
	            '#bda29a',
	            '#6e7074',
	            '#546570',
	            '#c4ccd3'
	        ],
	        grid: {},
	        textStyle: {
	            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },
	        blendMode: null,
	        animation: true,
	        animationDuration: 1000,
	        animationDurationUpdate: 300,
	        animationEasing: 'exponentialOut',
	        animationEasingUpdate: 'cubicOut',
	        animationThreshold: 2000,
	        progressiveThreshold: 3000,
	        progressive: 400,
	        hoverLayerThreshold: 3000
	    };
	});
	define('echarts/util/model', ['require', './format', './number', '../model/Model', 'zrender/core/util'], function (require) {
	    var formatUtil = require('./format');
	    var nubmerUtil = require('./number');
	    var Model = require('../model/Model');
	    var zrUtil = require('zrender/core/util');
	    var AXIS_DIMS = [
	            'x',
	            'y',
	            'z',
	            'radius',
	            'angle'
	        ];
	    var modelUtil = {};
	    /**
	     * Create "each" method to iterate names.
	     *
	     * @pubilc
	     * @param  {Array.<string>} names
	     * @param  {Array.<string>=} attrs
	     * @return {Function}
	     */
	    modelUtil.createNameEach = function (names, attrs) {
	        names = names.slice();
	        var capitalNames = zrUtil.map(names, modelUtil.capitalFirst);
	        attrs = (attrs || []).slice();
	        var capitalAttrs = zrUtil.map(attrs, modelUtil.capitalFirst);
	        return function (callback, context) {
	            zrUtil.each(names, function (name, index) {
	                var nameObj = {
	                        name: name,
	                        capital: capitalNames[index]
	                    };
	                for (var j = 0; j < attrs.length; j++) {
	                    nameObj[attrs[j]] = name + capitalAttrs[j];
	                }
	                callback.call(context, nameObj);
	            });
	        };
	    };
	    /**
	     * @public
	     */
	    modelUtil.capitalFirst = function (str) {
	        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	    };
	    /**
	     * Iterate each dimension name.
	     *
	     * @public
	     * @param {Function} callback The parameter is like:
	     *                            {
	     *                                name: 'angle',
	     *                                capital: 'Angle',
	     *                                axis: 'angleAxis',
	     *                                axisIndex: 'angleAixs',
	     *                                index: 'angleIndex'
	     *                            }
	     * @param {Object} context
	     */
	    modelUtil.eachAxisDim = modelUtil.createNameEach(AXIS_DIMS, [
	        'axisIndex',
	        'axis',
	        'index'
	    ]);
	    /**
	     * If value is not array, then translate it to array.
	     * @param  {*} value
	     * @return {Array} [value] or value
	     */
	    modelUtil.normalizeToArray = function (value) {
	        return value instanceof Array ? value : value == null ? [] : [value];
	    };
	    /**
	     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	     * dataZoomModels and 'links' make up one or more graphics.
	     * This function finds the graphic where the source dataZoomModel is in.
	     *
	     * @public
	     * @param {Function} forEachNode Node iterator.
	     * @param {Function} forEachEdgeType edgeType iterator
	     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	     */
	    modelUtil.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {
	        return function (sourceNode) {
	            var result = {
	                    nodes: [],
	                    records: {}
	                };
	            forEachEdgeType(function (edgeType) {
	                result.records[edgeType.name] = {};
	            });
	            if (!sourceNode) {
	                return result;
	            }
	            absorb(sourceNode, result);
	            var existsLink;
	            do {
	                existsLink = false;
	                forEachNode(processSingleNode);
	            } while (existsLink);
	            function processSingleNode(node) {
	                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                    absorb(node, result);
	                    existsLink = true;
	                }
	            }
	            return result;
	        };
	        function isNodeAbsorded(node, result) {
	            return zrUtil.indexOf(result.nodes, node) >= 0;
	        }
	        function isLinked(node, result) {
	            var hasLink = false;
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] && (hasLink = true);
	                });
	            });
	            return hasLink;
	        }
	        function absorb(node, result) {
	            result.nodes.push(node);
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] = true;
	                });
	            });
	        }
	    };
	    /**
	     * Sync default option between normal and emphasis like `position` and `show`
	     * In case some one will write code like
	     *     label: {
	     *         normal: {
	     *             show: false,
	     *             position: 'outside',
	     *             textStyle: {
	     *                 fontSize: 18
	     *             }
	     *         },
	     *         emphasis: {
	     *             show: true
	     *         }
	     *     }
	     * @param {Object} opt
	     * @param {Array.<string>} subOpts
	     */
	    modelUtil.defaultEmphasis = function (opt, subOpts) {
	        if (opt) {
	            var emphasisOpt = opt.emphasis = opt.emphasis || {};
	            var normalOpt = opt.normal = opt.normal || {};
	            // Default emphasis option from normal
	            zrUtil.each(subOpts, function (subOptName) {
	                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	                if (val != null) {
	                    emphasisOpt[subOptName] = val;
	                }
	            });
	        }
	    };
	    modelUtil.LABEL_OPTIONS = [
	        'position',
	        'show',
	        'textStyle',
	        'distance',
	        'formatter'
	    ];
	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method retieves value from data.
	     * @param {string|number|Date|Array|Object} dataItem
	     * @return {number|string|Date|Array.<number|string|Date>}
	     */
	    modelUtil.getDataItemValue = function (dataItem) {
	        // Performance sensitive.
	        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	    };
	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method determine if dataItem has extra option besides value
	     * @param {string|number|Date|Array|Object} dataItem
	     */
	    modelUtil.isDataItemOption = function (dataItem) {
	        return zrUtil.isObject(dataItem) && !(dataItem instanceof Array);    // // markLine data can be array
	                                                                             // && !(dataItem[0] && zrUtil.isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	    };
	    /**
	     * This helper method convert value in data.
	     * @param {string|number|Date} value
	     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	     */
	    modelUtil.converDataValue = function (value, dimInfo) {
	        // Performance sensitive.
	        var dimType = dimInfo && dimInfo.type;
	        if (dimType === 'ordinal') {
	            return value;
	        }
	        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	            value = +nubmerUtil.parseDate(value);
	        }
	        // dimType defaults 'number'.
	        // If dimType is not ordinal and value is null or undefined or NaN or '-',
	        // parse to NaN.
	        return value == null || value === '' ? NaN : +value;    // If string (like '-'), using '+' parse to NaN
	    };
	    /**
	     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	     * @param {module:echarts/data/List} data
	     * @param {Object} opt
	     * @param {string} [opt.seriesIndex]
	     * @param {Object} [opt.name]
	     * @param {Object} [opt.mainType]
	     * @param {Object} [opt.subType]
	     */
	    modelUtil.createDataFormatModel = function (data, opt) {
	        var model = new Model();
	        zrUtil.mixin(model, modelUtil.dataFormatMixin);
	        model.seriesIndex = opt.seriesIndex;
	        model.name = opt.name || '';
	        model.mainType = opt.mainType;
	        model.subType = opt.subType;
	        model.getData = function () {
	            return data;
	        };
	        return model;
	    };
	    // PENDING A little ugly
	    modelUtil.dataFormatMixin = {
	        getDataParams: function (dataIndex, dataType) {
	            var data = this.getData(dataType);
	            var seriesIndex = this.seriesIndex;
	            var seriesName = this.name;
	            var rawValue = this.getRawValue(dataIndex, dataType);
	            var rawDataIndex = data.getRawIndex(dataIndex);
	            var name = data.getName(dataIndex, true);
	            var itemOpt = data.getRawDataItem(dataIndex);
	            return {
	                componentType: this.mainType,
	                componentSubType: this.subType,
	                seriesType: this.mainType === 'series' ? this.subType : null,
	                seriesIndex: seriesIndex,
	                seriesName: seriesName,
	                name: name,
	                dataIndex: rawDataIndex,
	                data: itemOpt,
	                dataType: dataType,
	                value: rawValue,
	                color: data.getItemVisual(dataIndex, 'color'),
	                $vars: [
	                    'seriesName',
	                    'name',
	                    'value'
	                ]
	            };
	        },
	        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
	            status = status || 'normal';
	            var data = this.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);
	            var params = this.getDataParams(dataIndex, dataType);
	            if (dimIndex != null && params.value instanceof Array) {
	                params.value = params.value[dimIndex];
	            }
	            var formatter = itemModel.get([
	                    'label',
	                    status,
	                    'formatter'
	                ]);
	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            } else if (typeof formatter === 'string') {
	                return formatUtil.formatTpl(formatter, params);
	            }
	        },
	        getRawValue: function (idx, dataType) {
	            var data = this.getData(dataType);
	            var dataItem = data.getRawDataItem(idx);
	            if (dataItem != null) {
	                return zrUtil.isObject(dataItem) && !(dataItem instanceof Array) ? dataItem.value : dataItem;
	            }
	        },
	        formatTooltip: zrUtil.noop
	    };
	    /**
	     * Mapping to exists for merge.
	     *
	     * @public
	     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	     * @param {Object|Array.<Object>} newCptOptions
	     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          which order is the same as exists.
	     */
	    modelUtil.mappingToExists = function (exists, newCptOptions) {
	        // Mapping by the order by original option (but not order of
	        // new option) in merge mode. Because we should ensure
	        // some specified index (like xAxisIndex) is consistent with
	        // original option, which is easy to understand, espatially in
	        // media query. And in most case, merge option is used to
	        // update partial option but not be expected to change order.
	        newCptOptions = (newCptOptions || []).slice();
	        var result = zrUtil.map(exists || [], function (obj, index) {
	                return { exist: obj };
	            });
	        // Mapping by id or name if specified.
	        zrUtil.each(newCptOptions, function (cptOption, index) {
	            if (!zrUtil.isObject(cptOption)) {
	                return;
	            }
	            for (var i = 0; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option && (cptOption.id != null && exist.id === cptOption.id + '' || cptOption.name != null && !modelUtil.isIdInner(cptOption) && !modelUtil.isIdInner(exist) && exist.name === cptOption.name + '')) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    break;
	                }
	            }
	        });
	        // Otherwise mapping by index.
	        zrUtil.each(newCptOptions, function (cptOption, index) {
	            if (!zrUtil.isObject(cptOption)) {
	                return;
	            }
	            var i = 0;
	            for (; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option && !modelUtil.isIdInner(exist) && cptOption.id == null) {
	                    result[i].option = cptOption;
	                    break;
	                }
	            }
	            if (i >= result.length) {
	                result.push({ option: cptOption });
	            }
	        });
	        return result;
	    };
	    /**
	     * @public
	     * @param {Object} cptOption
	     * @return {boolean}
	     */
	    modelUtil.isIdInner = function (cptOption) {
	        return zrUtil.isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf(' _ec_ ') === 0;
	    };
	    /**
	     * A helper for removing duplicate items between batchA and batchB,
	     * and in themselves, and categorize by series.
	     *
	     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	     */
	    modelUtil.compressBatches = function (batchA, batchB) {
	        var mapA = {};
	        var mapB = {};
	        makeMap(batchA || [], mapA);
	        makeMap(batchB || [], mapB, mapA);
	        return [
	            mapToArray(mapA),
	            mapToArray(mapB)
	        ];
	        function makeMap(sourceBatch, map, otherMap) {
	            for (var i = 0, len = sourceBatch.length; i < len; i++) {
	                var seriesId = sourceBatch[i].seriesId;
	                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);
	                var otherDataIndices = otherMap && otherMap[seriesId];
	                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	                    var dataIndex = dataIndices[j];
	                    if (otherDataIndices && otherDataIndices[dataIndex]) {
	                        otherDataIndices[dataIndex] = null;
	                    } else {
	                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	                    }
	                }
	            }
	        }
	        function mapToArray(map, isData) {
	            var result = [];
	            for (var i in map) {
	                if (map.hasOwnProperty(i) && map[i] != null) {
	                    if (isData) {
	                        result.push(+i);
	                    } else {
	                        var dataIndices = mapToArray(map[i], true);
	                        dataIndices.length && result.push({
	                            seriesId: i,
	                            dataIndex: dataIndices
	                        });
	                    }
	                }
	            }
	            return result;
	        }
	    };
	    return modelUtil;
	});
	define('zrender/contain/text', ['require', '../core/util', '../core/BoundingRect'], function (require) {
	    var textWidthCache = {};
	    var textWidthCacheCounter = 0;
	    var TEXT_CACHE_MAX = 5000;
	    var util = require('../core/util');
	    var BoundingRect = require('../core/BoundingRect');
	    var retrieve = util.retrieve;
	    function getTextWidth(text, textFont) {
	        var key = text + ':' + textFont;
	        if (textWidthCache[key]) {
	            return textWidthCache[key];
	        }
	        var textLines = (text + '').split('\n');
	        var width = 0;
	        for (var i = 0, l = textLines.length; i < l; i++) {
	            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	        }
	        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	            textWidthCacheCounter = 0;
	            textWidthCache = {};
	        }
	        textWidthCacheCounter++;
	        textWidthCache[key] = width;
	        return width;
	    }
	    function getTextRect(text, textFont, textAlign, textBaseline) {
	        var textLineLen = ((text || '') + '').split('\n').length;
	        var width = getTextWidth(text, textFont);
	        // FIXME 高度计算比较粗暴
	        var lineHeight = getTextWidth('国', textFont);
	        var height = textLineLen * lineHeight;
	        var rect = new BoundingRect(0, 0, width, height);
	        // Text has a special line height property
	        rect.lineHeight = lineHeight;
	        switch (textBaseline) {
	        case 'bottom':
	        case 'alphabetic':
	            rect.y -= lineHeight;
	            break;
	        case 'middle':
	            rect.y -= lineHeight / 2;
	            break;    // case 'hanging':
	                      // case 'top':
	        }
	        // FIXME Right to left language
	        switch (textAlign) {
	        case 'end':
	        case 'right':
	            rect.x -= rect.width;
	            break;
	        case 'center':
	            rect.x -= rect.width / 2;
	            break;    // case 'start':
	                      // case 'left':
	        }
	        return rect;
	    }
	    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {
	        var x = rect.x;
	        var y = rect.y;
	        var height = rect.height;
	        var width = rect.width;
	        var textHeight = textRect.height;
	        var halfHeight = height / 2 - textHeight / 2;
	        var textAlign = 'left';
	        switch (textPosition) {
	        case 'left':
	            x -= distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'right':
	            x += distance + width;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'top':
	            x += width / 2;
	            y -= distance + textHeight;
	            textAlign = 'center';
	            break;
	        case 'bottom':
	            x += width / 2;
	            y += height + distance;
	            textAlign = 'center';
	            break;
	        case 'inside':
	            x += width / 2;
	            y += halfHeight;
	            textAlign = 'center';
	            break;
	        case 'insideLeft':
	            x += distance;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'insideRight':
	            x += width - distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'insideTop':
	            x += width / 2;
	            y += distance;
	            textAlign = 'center';
	            break;
	        case 'insideBottom':
	            x += width / 2;
	            y += height - textHeight - distance;
	            textAlign = 'center';
	            break;
	        case 'insideTopLeft':
	            x += distance;
	            y += distance;
	            textAlign = 'left';
	            break;
	        case 'insideTopRight':
	            x += width - distance;
	            y += distance;
	            textAlign = 'right';
	            break;
	        case 'insideBottomLeft':
	            x += distance;
	            y += height - textHeight - distance;
	            break;
	        case 'insideBottomRight':
	            x += width - distance;
	            y += height - textHeight - distance;
	            textAlign = 'right';
	            break;
	        }
	        return {
	            x: x,
	            y: y,
	            textAlign: textAlign,
	            textBaseline: 'top'
	        };
	    }
	    /**
	     * Show ellipsis if overflow.
	     *
	     * @param  {string} text
	     * @param  {string} containerWidth
	     * @param  {string} textFont
	     * @param  {number} [ellipsis='...']
	     * @param  {Object} [options]
	     * @param  {number} [options.maxIterations=3]
	     * @param  {number} [options.minChar=0] If truncate result are less
	     *                  then minChar, ellipsis will not show, which is
	     *                  better for user hint in some cases.
	     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	     * @return {string}
	     */
	    function truncateText(text, containerWidth, textFont, ellipsis, options) {
	        if (!containerWidth) {
	            return '';
	        }
	        options = options || {};
	        ellipsis = retrieve(ellipsis, '...');
	        var maxIterations = retrieve(options.maxIterations, 2);
	        var minChar = retrieve(options.minChar, 0);
	        // FIXME
	        // Other languages?
	        var cnCharWidth = getTextWidth('国', textFont);
	        // FIXME
	        // Consider proportional font?
	        var ascCharWidth = getTextWidth('a', textFont);
	        var placeholder = retrieve(options.placeholder, '');
	        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	        var contentWidth = containerWidth = Math.max(0, containerWidth - 1);
	        // Reserve some gap.
	        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	            contentWidth -= ascCharWidth;
	        }
	        var ellipsisWidth = getTextWidth(ellipsis);
	        if (ellipsisWidth > contentWidth) {
	            ellipsis = '';
	            ellipsisWidth = 0;
	        }
	        contentWidth = containerWidth - ellipsisWidth;
	        var textLines = (text + '').split('\n');
	        for (var i = 0, len = textLines.length; i < len; i++) {
	            var textLine = textLines[i];
	            var lineWidth = getTextWidth(textLine, textFont);
	            if (lineWidth <= containerWidth) {
	                continue;
	            }
	            for (var j = 0;; j++) {
	                if (lineWidth <= contentWidth || j >= maxIterations) {
	                    textLine += ellipsis;
	                    break;
	                }
	                var subLength = j === 0 ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
	                textLine = textLine.substr(0, subLength);
	                lineWidth = getTextWidth(textLine, textFont);
	            }
	            if (textLine === '') {
	                textLine = placeholder;
	            }
	            textLines[i] = textLine;
	        }
	        return textLines.join('\n');
	    }
	    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	        var width = 0;
	        var i = 0;
	        for (var len = text.length; i < len && width < contentWidth; i++) {
	            var charCode = text.charCodeAt(i);
	            width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
	        }
	        return i;
	    }
	    var textContain = {
	            getWidth: getTextWidth,
	            getBoundingRect: getTextRect,
	            adjustTextPositionOnRect: adjustTextPositionOnRect,
	            truncateText: truncateText,
	            measureText: function (text, textFont) {
	                var ctx = util.getContext();
	                ctx.font = textFont || '12px sans-serif';
	                return ctx.measureText(text);
	            }
	        };
	    return textContain;
	});
	define('echarts/component/toolbox/featureManager', ['require'], function (require) {
	    'use strict';
	    var features = {};
	    return {
	        register: function (name, ctor) {
	            features[name] = ctor;
	        },
	        get: function (name) {
	            return features[name];
	        }
	    };
	});
	define('echarts/component/marker/MarkerModel', ['require', '../../util/model', 'zrender/core/util', 'zrender/core/env', '../../util/format', '../../echarts'], function (require) {
	    var modelUtil = require('../../util/model');
	    var zrUtil = require('zrender/core/util');
	    var env = require('zrender/core/env');
	    var formatUtil = require('../../util/format');
	    var addCommas = formatUtil.addCommas;
	    var encodeHTML = formatUtil.encodeHTML;
	    function fillLabel(opt) {
	        modelUtil.defaultEmphasis(opt.label, modelUtil.LABEL_OPTIONS);
	    }
	    var MarkerModel = require('../../echarts').extendComponentModel({
	            type: 'marker',
	            dependencies: [
	                'series',
	                'grid',
	                'polar',
	                'geo'
	            ],
	            init: function (option, parentModel, ecModel, extraOpt) {
	                if (true) {
	                    if (this.type === 'marker') {
	                        throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');
	                    }
	                }
	                this.mergeDefaultAndTheme(option, ecModel);
	                this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	            },
	            ifEnableAnimation: function () {
	                if (env.node) {
	                    return false;
	                }
	                var hostSeries = this.__hostSeries;
	                return this.getShallow('animation') && hostSeries && hostSeries.ifEnableAnimation();
	            },
	            mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
	                var MarkerModel = this.constructor;
	                var modelPropName = this.mainType + 'Model';
	                if (!createdBySelf) {
	                    ecModel.eachSeries(function (seriesModel) {
	                        var markerOpt = seriesModel.get(this.mainType);
	                        var markerModel = seriesModel[modelPropName];
	                        if (!markerOpt || !markerOpt.data) {
	                            seriesModel[modelPropName] = null;
	                            return;
	                        }
	                        if (!markerModel) {
	                            if (isInit) {
	                                // Default label emphasis `position` and `show`
	                                fillLabel(markerOpt);
	                            }
	                            zrUtil.each(markerOpt.data, function (item) {
	                                // FIXME Overwrite fillLabel method ?
	                                if (item instanceof Array) {
	                                    fillLabel(item[0]);
	                                    fillLabel(item[1]);
	                                } else {
	                                    fillLabel(item);
	                                }
	                            });
	                            var opt = {
	                                    mainType: this.mainType,
	                                    seriesIndex: seriesModel.seriesIndex,
	                                    name: seriesModel.name,
	                                    createdBySelf: true
	                                };
	                            markerModel = new MarkerModel(markerOpt, this, ecModel, opt);
	                            markerModel.__hostSeries = seriesModel;
	                        } else {
	                            markerModel.mergeOption(markerOpt, ecModel, true);
	                        }
	                        seriesModel[modelPropName] = markerModel;
	                    }, this);
	                }
	            },
	            formatTooltip: function (dataIndex) {
	                var data = this.getData();
	                var value = this.getRawValue(dataIndex);
	                var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	                var name = data.getName(dataIndex);
	                var html = this.name;
	                if (value != null || name) {
	                    html += '<br />';
	                }
	                if (name) {
	                    html += encodeHTML(name);
	                    if (value != null) {
	                        html += ' : ';
	                    }
	                }
	                if (value != null) {
	                    html += formattedValue;
	                }
	                return html;
	            },
	            getData: function () {
	                return this._data;
	            },
	            setData: function (data) {
	                this._data = data;
	            }
	        });
	    zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);
	    return MarkerModel;
	});
	define('zrender/core/PathProxy', ['require', './curve', './vector', './bbox', './BoundingRect', '../config'], function (require) {
	    'use strict';
	    var curve = require('./curve');
	    var vec2 = require('./vector');
	    var bbox = require('./bbox');
	    var BoundingRect = require('./BoundingRect');
	    var dpr = require('../config').devicePixelRatio;
	    var CMD = {
	            M: 1,
	            L: 2,
	            C: 3,
	            Q: 4,
	            A: 5,
	            Z: 6,
	            R: 7
	        };
	    var min = [];
	    var max = [];
	    var min2 = [];
	    var max2 = [];
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathCos = Math.cos;
	    var mathSin = Math.sin;
	    var mathSqrt = Math.sqrt;
	    var mathAbs = Math.abs;
	    var hasTypedArray = typeof Float32Array != 'undefined';
	    /**
	     * @alias module:zrender/core/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {
	        /**
	         * Path data. Stored as flat array
	         * @type {Array.<Object>}
	         */
	        this.data = [];
	        this._len = 0;
	        this._ctx = null;
	        this._xi = 0;
	        this._yi = 0;
	        this._x0 = 0;
	        this._y0 = 0;
	        // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	        this._ux = 0;
	        this._uy = 0;
	    };
	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype = {
	        constructor: PathProxy,
	        _lineDash: null,
	        _dashOffset: 0,
	        _dashIdx: 0,
	        _dashSum: 0,
	        setScale: function (sx, sy) {
	            this._ux = mathAbs(1 / dpr / sx) || 0;
	            this._uy = mathAbs(1 / dpr / sy) || 0;
	        },
	        getContext: function () {
	            return this._ctx;
	        },
	        beginPath: function (ctx) {
	            this._ctx = ctx;
	            ctx && ctx.beginPath();
	            // Reset
	            this._len = 0;
	            if (this._lineDash) {
	                this._lineDash = null;
	                this._dashOffset = 0;
	            }
	            return this;
	        },
	        moveTo: function (x, y) {
	            this.addData(CMD.M, x, y);
	            this._ctx && this._ctx.moveTo(x, y);
	            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	            this._x0 = x;
	            this._y0 = y;
	            this._xi = x;
	            this._yi = y;
	            return this;
	        },
	        lineTo: function (x, y) {
	            var exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy || this._len < 5;
	            this.addData(CMD.L, x, y);
	            if (this._ctx && exceedUnit) {
	                this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	            }
	            if (exceedUnit) {
	                this._xi = x;
	                this._yi = y;
	            }
	            return this;
	        },
	        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	            }
	            this._xi = x3;
	            this._yi = y3;
	            return this;
	        },
	        quadraticCurveTo: function (x1, y1, x2, y2) {
	            this.addData(CMD.Q, x1, y1, x2, y2);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	            }
	            this._xi = x2;
	            this._yi = y2;
	            return this;
	        },
	        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	            this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	            this._xi = mathCos(endAngle) * r + cx;
	            this._xi = mathSin(endAngle) * r + cx;
	            return this;
	        },
	        arcTo: function (x1, y1, x2, y2, radius) {
	            if (this._ctx) {
	                this._ctx.arcTo(x1, y1, x2, y2, radius);
	            }
	            return this;
	        },
	        rect: function (x, y, w, h) {
	            this._ctx && this._ctx.rect(x, y, w, h);
	            this.addData(CMD.R, x, y, w, h);
	            return this;
	        },
	        closePath: function () {
	            this.addData(CMD.Z);
	            var ctx = this._ctx;
	            var x0 = this._x0;
	            var y0 = this._y0;
	            if (ctx) {
	                this._needsDash() && this._dashedLineTo(x0, y0);
	                ctx.closePath();
	            }
	            this._xi = x0;
	            this._yi = y0;
	            return this;
	        },
	        fill: function (ctx) {
	            ctx && ctx.fill();
	            this.toStatic();
	        },
	        stroke: function (ctx) {
	            ctx && ctx.stroke();
	            this.toStatic();
	        },
	        setLineDash: function (lineDash) {
	            if (lineDash instanceof Array) {
	                this._lineDash = lineDash;
	                this._dashIdx = 0;
	                var lineDashSum = 0;
	                for (var i = 0; i < lineDash.length; i++) {
	                    lineDashSum += lineDash[i];
	                }
	                this._dashSum = lineDashSum;
	            }
	            return this;
	        },
	        setLineDashOffset: function (offset) {
	            this._dashOffset = offset;
	            return this;
	        },
	        len: function () {
	            return this._len;
	        },
	        setData: function (data) {
	            var len = data.length;
	            if (!(this.data && this.data.length == len) && hasTypedArray) {
	                this.data = new Float32Array(len);
	            }
	            for (var i = 0; i < len; i++) {
	                this.data[i] = data[i];
	            }
	            this._len = len;
	        },
	        appendPath: function (path) {
	            if (!(path instanceof Array)) {
	                path = [path];
	            }
	            var len = path.length;
	            var appendSize = 0;
	            var offset = this._len;
	            for (var i = 0; i < len; i++) {
	                appendSize += path[i].len();
	            }
	            if (hasTypedArray && this.data instanceof Float32Array) {
	                this.data = new Float32Array(offset + appendSize);
	            }
	            for (var i = 0; i < len; i++) {
	                var appendPathData = path[i].data;
	                for (var k = 0; k < appendPathData.length; k++) {
	                    this.data[offset++] = appendPathData[k];
	                }
	            }
	            this._len = offset;
	        },
	        addData: function (cmd) {
	            var data = this.data;
	            if (this._len + arguments.length > data.length) {
	                // 因为之前的数组已经转换成静态的 Float32Array
	                // 所以不够用时需要扩展一个新的动态数组
	                this._expandData();
	                data = this.data;
	            }
	            for (var i = 0; i < arguments.length; i++) {
	                data[this._len++] = arguments[i];
	            }
	            this._prevCmd = cmd;
	        },
	        _expandData: function () {
	            // Only if data is Float32Array
	            if (!(this.data instanceof Array)) {
	                var newData = [];
	                for (var i = 0; i < this._len; i++) {
	                    newData[i] = this.data[i];
	                }
	                this.data = newData;
	            }
	        },
	        _needsDash: function () {
	            return this._lineDash;
	        },
	        _dashedLineTo: function (x1, y1) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;
	            var x0 = this._xi;
	            var y0 = this._yi;
	            var dx = x1 - x0;
	            var dy = y1 - y0;
	            var dist = mathSqrt(dx * dx + dy * dy);
	            var x = x0;
	            var y = y0;
	            var dash;
	            var nDash = lineDash.length;
	            var idx;
	            dx /= dist;
	            dy /= dist;
	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            x -= offset * dx;
	            y -= offset * dy;
	            while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx == 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
	                idx = this._dashIdx;
	                dash = lineDash[idx];
	                x += dx * dash;
	                y += dy * dash;
	                this._dashIdx = (idx + 1) % nDash;
	                // Skip positive offset
	                if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
	                    continue;
	                }
	                ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	            }
	            // Offset for next lineTo
	            dx = x - x1;
	            dy = y - y1;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },
	        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;
	            var x0 = this._xi;
	            var y0 = this._yi;
	            var t;
	            var dx;
	            var dy;
	            var cubicAt = curve.cubicAt;
	            var bezierLen = 0;
	            var idx = this._dashIdx;
	            var nDash = lineDash.length;
	            var x;
	            var y;
	            var tmpLen = 0;
	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            // Bezier approx length
	            for (t = 0; t < 1; t += 0.1) {
	                dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	                dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	                bezierLen += mathSqrt(dx * dx + dy * dy);
	            }
	            // Find idx after add offset
	            for (; idx < nDash; idx++) {
	                tmpLen += lineDash[idx];
	                if (tmpLen > offset) {
	                    break;
	                }
	            }
	            t = (tmpLen - offset) / bezierLen;
	            while (t <= 1) {
	                x = cubicAt(x0, x1, x2, x3, t);
	                y = cubicAt(y0, y1, y2, y3, t);
	                // Use line to approximate dashed bezier
	                // Bad result if dash is long
	                idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
	                t += lineDash[idx] / bezierLen;
	                idx = (idx + 1) % nDash;
	            }
	            // Finish the last segment and calculate the new offset
	            idx % 2 !== 0 && ctx.lineTo(x3, y3);
	            dx = x3 - x;
	            dy = y3 - y;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },
	        _dashedQuadraticTo: function (x1, y1, x2, y2) {
	            // Convert quadratic to cubic using degree elevation
	            var x3 = x2;
	            var y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (this._xi + 2 * x1) / 3;
	            y1 = (this._yi + 2 * y1) / 3;
	            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	        },
	        toStatic: function () {
	            var data = this.data;
	            if (data instanceof Array) {
	                data.length = this._len;
	                if (hasTypedArray) {
	                    this.data = new Float32Array(data);
	                }
	            }
	        },
	        getBoundingRect: function () {
	            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	            var data = this.data;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;
	            for (var i = 0; i < data.length;) {
	                var cmd = data[i++];
	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = data[i];
	                    yi = data[i + 1];
	                    x0 = xi;
	                    y0 = yi;
	                }
	                switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    min2[0] = x0;
	                    min2[1] = y0;
	                    max2[0] = x0;
	                    max2[1] = y0;
	                    break;
	                case CMD.L:
	                    bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++];
	                    var endAngle = data[i++] + startAngle;
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];
	                    if (i == 1) {
	                        // 直接使用 arc 命令
	                        // 第一个命令起点还未定义
	                        x0 = mathCos(startAngle) * rx + cx;
	                        y0 = mathSin(startAngle) * ry + cy;
	                    }
	                    bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
	                    xi = mathCos(endAngle) * rx + cx;
	                    yi = mathSin(endAngle) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    // Use fromLine
	                    bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                    break;
	                case CMD.Z:
	                    xi = x0;
	                    yi = y0;
	                    break;
	                }
	                // Union
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }
	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }
	            return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	        },
	        rebuildPath: function (ctx) {
	            var d = this.data;
	            var x0, y0;
	            var xi, yi;
	            var x, y;
	            var ux = this._ux;
	            var uy = this._uy;
	            var len = this._len;
	            for (var i = 0; i < len;) {
	                var cmd = d[i++];
	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = d[i];
	                    yi = d[i + 1];
	                    x0 = xi;
	                    y0 = yi;
	                }
	                switch (cmd) {
	                case CMD.M:
	                    x0 = xi = d[i++];
	                    y0 = yi = d[i++];
	                    ctx.moveTo(xi, yi);
	                    break;
	                case CMD.L:
	                    x = d[i++];
	                    y = d[i++];
	                    // Not draw too small seg between
	                    if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	                        ctx.lineTo(x, y);
	                        xi = x;
	                        yi = y;
	                    }
	                    break;
	                case CMD.C:
	                    ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	                    xi = d[i - 2];
	                    yi = d[i - 1];
	                    break;
	                case CMD.Q:
	                    ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                    xi = d[i - 2];
	                    yi = d[i - 1];
	                    break;
	                case CMD.A:
	                    var cx = d[i++];
	                    var cy = d[i++];
	                    var rx = d[i++];
	                    var ry = d[i++];
	                    var theta = d[i++];
	                    var dTheta = d[i++];
	                    var psi = d[i++];
	                    var fs = d[i++];
	                    var r = rx > ry ? rx : ry;
	                    var scaleX = rx > ry ? 1 : rx / ry;
	                    var scaleY = rx > ry ? ry / rx : 1;
	                    var isEllipse = Math.abs(rx - ry) > 0.001;
	                    var endAngle = theta + dTheta;
	                    if (isEllipse) {
	                        ctx.translate(cx, cy);
	                        ctx.rotate(psi);
	                        ctx.scale(scaleX, scaleY);
	                        ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	                        ctx.scale(1 / scaleX, 1 / scaleY);
	                        ctx.rotate(-psi);
	                        ctx.translate(-cx, -cy);
	                    } else {
	                        ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	                    }
	                    if (i == 1) {
	                        // 直接使用 arc 命令
	                        // 第一个命令起点还未定义
	                        x0 = mathCos(theta) * rx + cx;
	                        y0 = mathSin(theta) * ry + cy;
	                    }
	                    xi = mathCos(endAngle) * rx + cx;
	                    yi = mathSin(endAngle) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = d[i];
	                    y0 = yi = d[i + 1];
	                    ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                    break;
	                case CMD.Z:
	                    ctx.closePath();
	                    xi = x0;
	                    yi = y0;
	                }
	            }
	        }
	    };
	    PathProxy.CMD = CMD;
	    return PathProxy;
	});
	define('zrender/vml/Painter', ['require', '../core/log', './core'], function (require) {
	    var zrLog = require('../core/log');
	    var vmlCore = require('./core');
	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }
	    /**
	     * @alias module:zrender/vml/Painter
	     */
	    function VMLPainter(root, storage) {
	        vmlCore.initVML();
	        this.root = root;
	        this.storage = storage;
	        var vmlViewport = document.createElement('div');
	        var vmlRoot = document.createElement('div');
	        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';
	        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';
	        root.appendChild(vmlViewport);
	        this._vmlRoot = vmlRoot;
	        this._vmlViewport = vmlViewport;
	        this.resize();
	        // Modify storage
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;
	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);
	            oldDelFromMap.call(storage, elId);
	            if (el) {
	                el.onRemove && el.onRemove(vmlRoot);
	            }
	        };
	        storage.addToMap = function (el) {
	            // Displayable already has a vml node
	            el.onAdd && el.onAdd(vmlRoot);
	            oldAddToMap.call(storage, el);
	        };
	        this._firstPaint = true;
	    }
	    VMLPainter.prototype = {
	        constructor: VMLPainter,
	        getViewportRoot: function () {
	            return this._vmlViewport;
	        },
	        refresh: function () {
	            var list = this.storage.getDisplayList(true, true);
	            this._paintList(list);
	        },
	        _paintList: function (list) {
	            var vmlRoot = this._vmlRoot;
	            for (var i = 0; i < list.length; i++) {
	                var el = list[i];
	                if (el.invisible || el.ignore) {
	                    if (!el.__alreadyNotVisible) {
	                        el.onRemove(vmlRoot);
	                    }
	                    // Set as already invisible
	                    el.__alreadyNotVisible = true;
	                } else {
	                    if (el.__alreadyNotVisible) {
	                        el.onAdd(vmlRoot);
	                    }
	                    el.__alreadyNotVisible = false;
	                    if (el.__dirty) {
	                        el.beforeBrush && el.beforeBrush();
	                        (el.brushVML || el.brush).call(el, vmlRoot);
	                        el.afterBrush && el.afterBrush();
	                    }
	                }
	                el.__dirty = false;
	            }
	            if (this._firstPaint) {
	                // Detached from document at first time
	                // to avoid page refreshing too many times
	                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	                this._vmlViewport.appendChild(vmlRoot);
	                this._firstPaint = false;
	            }
	        },
	        resize: function () {
	            var width = this._getWidth();
	            var height = this._getHeight();
	            if (this._width != width && this._height != height) {
	                this._width = width;
	                this._height = height;
	                var vmlViewportStyle = this._vmlViewport.style;
	                vmlViewportStyle.width = width + 'px';
	                vmlViewportStyle.height = height + 'px';
	            }
	        },
	        dispose: function () {
	            this.root.innerHTML = '';
	            this._vmlRoot = this._vmlViewport = this.storage = null;
	        },
	        getWidth: function () {
	            return this._width;
	        },
	        getHeight: function () {
	            return this._height;
	        },
	        clear: function () {
	            this.root.removeChild(this.vmlViewport);
	        },
	        _getWidth: function () {
	            var root = this.root;
	            var stl = root.currentStyle;
	            return (root.clientWidth || parseInt10(stl.width)) - parseInt10(stl.paddingLeft) - parseInt10(stl.paddingRight) | 0;
	        },
	        _getHeight: function () {
	            var root = this.root;
	            var stl = root.currentStyle;
	            return (root.clientHeight || parseInt10(stl.height)) - parseInt10(stl.paddingTop) - parseInt10(stl.paddingBottom) | 0;
	        }
	    };
	    // Not supported methods
	    function createMethodNotSupport(method) {
	        return function () {
	            zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	        };
	    }
	    var notSupportedMethods = [
	            'getLayer',
	            'insertLayer',
	            'eachLayer',
	            'eachBuildinLayer',
	            'eachOtherLayer',
	            'getLayers',
	            'modLayer',
	            'delLayer',
	            'clearLayer',
	            'toDataURL',
	            'pathToImage'
	        ];
	    for (var i = 0; i < notSupportedMethods.length; i++) {
	        var name = notSupportedMethods[i];
	        VMLPainter.prototype[name] = createMethodNotSupport(name);
	    }
	    return VMLPainter;
	});
	define('zrender/graphic/Displayable', ['require', '../core/util', './Style', '../Element', './mixin/RectText'], function (require) {
	    var zrUtil = require('../core/util');
	    var Style = require('./Style');
	    var Element = require('../Element');
	    var RectText = require('./mixin/RectText');
	    // var Stateful = require('./mixin/Stateful');
	    /**
	     * @alias module:zrender/graphic/Displayable
	     * @extends module:zrender/Element
	     * @extends module:zrender/graphic/mixin/RectText
	     */
	    function Displayable(opts) {
	        opts = opts || {};
	        Element.call(this, opts);
	        // Extend properties
	        for (var name in opts) {
	            if (opts.hasOwnProperty(name) && name !== 'style') {
	                this[name] = opts[name];
	            }
	        }
	        /**
	         * @type {module:zrender/graphic/Style}
	         */
	        this.style = new Style(opts.style);
	        this._rect = null;
	        // Shapes for cascade clipping.
	        this.__clipPaths = [];    // FIXME Stateful must be mixined after style is setted
	                                  // Stateful.call(this, opts);
	    }
	    Displayable.prototype = {
	        constructor: Displayable,
	        type: 'displayable',
	        __dirty: true,
	        invisible: false,
	        z: 0,
	        z2: 0,
	        zlevel: 0,
	        draggable: false,
	        dragging: false,
	        silent: false,
	        culling: false,
	        cursor: 'pointer',
	        rectHover: false,
	        progressive: -1,
	        beforeBrush: function (ctx) {
	        },
	        afterBrush: function (ctx) {
	        },
	        brush: function (ctx, prevEl) {
	        },
	        getBoundingRect: function () {
	        },
	        contain: function (x, y) {
	            return this.rectContain(x, y);
	        },
	        traverse: function (cb, context) {
	            cb.call(context, this);
	        },
	        rectContain: function (x, y) {
	            var coord = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            return rect.contain(coord[0], coord[1]);
	        },
	        dirty: function () {
	            this.__dirty = true;
	            this._rect = null;
	            this.__zr && this.__zr.refresh();
	        },
	        animateStyle: function (loop) {
	            return this.animate('style', loop);
	        },
	        attrKV: function (key, value) {
	            if (key !== 'style') {
	                Element.prototype.attrKV.call(this, key, value);
	            } else {
	                this.style.set(value);
	            }
	        },
	        setStyle: function (key, value) {
	            this.style.set(key, value);
	            this.dirty(false);
	            return this;
	        },
	        useStyle: function (obj) {
	            this.style = new Style(obj);
	            this.dirty(false);
	            return this;
	        }
	    };
	    zrUtil.inherits(Displayable, Element);
	    zrUtil.mixin(Displayable, RectText);
	    // zrUtil.mixin(Displayable, Stateful);
	    return Displayable;
	});
	define('zrender/graphic/mixin/RectText', ['require', '../../contain/text', '../../core/BoundingRect'], function (require) {
	    var textContain = require('../../contain/text');
	    var BoundingRect = require('../../core/BoundingRect');
	    var tmpRect = new BoundingRect();
	    var RectText = function () {
	    };
	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    }
	    function setTransform(ctx, m) {
	        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	    }
	    RectText.prototype = {
	        constructor: RectText,
	        drawRectText: function (ctx, rect, textRect) {
	            var style = this.style;
	            var text = style.text;
	            // Convert to string
	            text != null && (text += '');
	            if (!text) {
	                return;
	            }
	            // FIXME
	            ctx.save();
	            var x;
	            var y;
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            var align = style.textAlign;
	            var font = style.textFont || style.font;
	            var baseline = style.textBaseline;
	            var verticalAlign = style.textVerticalAlign;
	            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	            // Transform rect to view space
	            var transform = this.transform;
	            if (transform) {
	                tmpRect.copy(rect);
	                tmpRect.applyTransform(transform);
	                rect = tmpRect;
	            }
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                // Percent
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	                align = align || 'left';
	                baseline = baseline || 'top';
	                if (verticalAlign) {
	                    switch (verticalAlign) {
	                    case 'middle':
	                        y -= textRect.height / 2 - textRect.lineHeight / 2;
	                        break;
	                    case 'bottom':
	                        y -= textRect.height - textRect.lineHeight / 2;
	                        break;
	                    default:
	                        y += textRect.lineHeight / 2;
	                    }
	                    // Force bseline to be middle
	                    baseline = 'middle';
	                }
	            } else {
	                var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	                x = res.x;
	                y = res.y;
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	            // Use canvas default left textAlign. Giving invalid value will cause state not change
	            ctx.textAlign = align || 'left';
	            // Use canvas default alphabetic baseline
	            ctx.textBaseline = baseline || 'alphabetic';
	            var textFill = style.textFill;
	            var textStroke = style.textStroke;
	            textFill && (ctx.fillStyle = textFill);
	            textStroke && (ctx.strokeStyle = textStroke);
	            ctx.font = font;
	            // Text shadow
	            // Always set shadowBlur and shadowOffset to avoid leak from displayable
	            ctx.shadowBlur = style.textShadowBlur;
	            ctx.shadowColor = style.textShadowColor || 'transparent';
	            ctx.shadowOffsetX = style.textShadowOffsetX;
	            ctx.shadowOffsetY = style.textShadowOffsetY;
	            var textLines = text.split('\n');
	            for (var i = 0; i < textLines.length; i++) {
	                textFill && ctx.fillText(textLines[i], x, y);
	                textStroke && ctx.strokeText(textLines[i], x, y);
	                y += textRect.lineHeight;
	            }
	            ctx.restore();
	        }
	    };
	    return RectText;
	});
	define('echarts/model/mixin/lineStyle', ['require', './makeStyleMapper'], function (require) {
	    var getLineStyle = require('./makeStyleMapper')([
	            [
	                'lineWidth',
	                'width'
	            ],
	            [
	                'stroke',
	                'color'
	            ],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]);
	    return {
	        getLineStyle: function (excludes) {
	            var style = getLineStyle.call(this, excludes);
	            var lineDash = this.getLineDash();
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },
	        getLineDash: function () {
	            var lineType = this.get('type');
	            return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [
	                5,
	                5
	            ] : [
	                1,
	                1
	            ];
	        }
	    };
	});
	define('echarts/model/mixin/areaStyle', ['require', './makeStyleMapper'], function (require) {
	    return {
	        getAreaStyle: require('./makeStyleMapper')([
	            [
	                'fill',
	                'color'
	            ],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['opacity'],
	            ['shadowColor']
	        ])
	    };
	});
	define('echarts/model/mixin/itemStyle', ['require', './makeStyleMapper'], function (require) {
	    var getItemStyle = require('./makeStyleMapper')([
	            [
	                'fill',
	                'color'
	            ],
	            [
	                'stroke',
	                'borderColor'
	            ],
	            [
	                'lineWidth',
	                'borderWidth'
	            ],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]);
	    return {
	        getItemStyle: function (excludes) {
	            var style = getItemStyle.call(this, excludes);
	            var lineDash = this.getBorderLineDash();
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },
	        getBorderLineDash: function () {
	            var lineType = this.get('borderType');
	            return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [
	                5,
	                5
	            ] : [
	                1,
	                1
	            ];
	        }
	    };
	});
	define('echarts/model/mixin/textStyle', ['require', 'zrender/contain/text'], function (require) {
	    var textContain = require('zrender/contain/text');
	    function getShallow(model, path) {
	        return model && model.getShallow(path);
	    }
	    return {
	        getTextColor: function () {
	            var ecModel = this.ecModel;
	            return this.getShallow('color') || ecModel && ecModel.get('textStyle.color');
	        },
	        getFont: function () {
	            var ecModel = this.ecModel;
	            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	            return [
	                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),
	                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),
	                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',
	                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'
	            ].join(' ');
	        },
	        getTextRect: function (text) {
	            var textStyle = this.get('textStyle') || {};
	            return textContain.getBoundingRect(text, this.getFont(), textStyle.align, textStyle.baseline);
	        },
	        truncateText: function (text, containerWidth, ellipsis, options) {
	            return textContain.truncateText(text, containerWidth, this.getFont(), ellipsis, options);
	        }
	    };
	});
	define('zrender/tool/transformPath', ['require', '../core/PathProxy', '../core/vector'], function (require) {
	    var CMD = require('../core/PathProxy').CMD;
	    var vec2 = require('../core/vector');
	    var v2ApplyTransform = vec2.applyTransform;
	    var points = [
	            [],
	            [],
	            []
	        ];
	    var mathSqrt = Math.sqrt;
	    var mathAtan2 = Math.atan2;
	    function transformPath(path, m) {
	        var data = path.data;
	        var cmd;
	        var nPoint;
	        var i;
	        var j;
	        var k;
	        var p;
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var R = CMD.R;
	        var A = CMD.A;
	        var Q = CMD.Q;
	        for (i = 0, j = 0; i < data.length;) {
	            cmd = data[i++];
	            j = i;
	            nPoint = 0;
	            switch (cmd) {
	            case M:
	                nPoint = 1;
	                break;
	            case L:
	                nPoint = 1;
	                break;
	            case C:
	                nPoint = 3;
	                break;
	            case Q:
	                nPoint = 2;
	                break;
	            case A:
	                var x = m[4];
	                var y = m[5];
	                var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                // cx
	                data[i++] += x;
	                // cy
	                data[i++] += y;
	                // Scale rx and ry
	                // FIXME Assume psi is 0 here
	                data[i++] *= sx;
	                data[i++] *= sy;
	                // Start angle
	                data[i++] += angle;
	                // end angle
	                data[i++] += angle;
	                // FIXME psi
	                i += 2;
	                j = i;
	                break;
	            case R:
	                // x0, y0
	                p[0] = data[i++];
	                p[1] = data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	                // x1, y1
	                p[0] += data[i++];
	                p[1] += data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	            }
	            for (k = 0; k < nPoint; k++) {
	                var p = points[k];
	                p[0] = data[i++];
	                p[1] = data[i++];
	                v2ApplyTransform(p, p, m);
	                // Write back
	                data[j++] = p[0];
	                data[j++] = p[1];
	            }
	        }
	    }
	    return transformPath;
	});
	define('zrender/contain/path', ['require', '../core/PathProxy', './line', './cubic', './quadratic', './arc', './util', '../core/curve', './windingLine'], function (require) {
	    'use strict';
	    var CMD = require('../core/PathProxy').CMD;
	    var line = require('./line');
	    var cubic = require('./cubic');
	    var quadratic = require('./quadratic');
	    var arc = require('./arc');
	    var normalizeRadian = require('./util').normalizeRadian;
	    var curve = require('../core/curve');
	    var windingLine = require('./windingLine');
	    var containStroke = line.containStroke;
	    var PI2 = Math.PI * 2;
	    var EPSILON = 0.0001;
	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }
	    // 临时数组
	    var roots = [
	            -1,
	            -1,
	            -1
	        ];
	    var extrema = [
	            -1,
	            -1
	        ];
	    function swapExtrema() {
	        var tmp = extrema[0];
	        extrema[0] = extrema[1];
	        extrema[1] = tmp;
	    }
	    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	        // Quick reject
	        if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	            return 0;
	        }
	        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        } else {
	            var w = 0;
	            var nExtrema = -1;
	            var y0_, y1_;
	            for (var i = 0; i < nRoots; i++) {
	                var t = roots[i];
	                // Avoid winding error when intersection point is the connect point of two line of polygon
	                var unit = t === 0 || t === 1 ? 0.5 : 1;
	                var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                if (x_ < x) {
	                    // Quick reject
	                    continue;
	                }
	                if (nExtrema < 0) {
	                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                    if (extrema[1] < extrema[0] && nExtrema > 1) {
	                        swapExtrema();
	                    }
	                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                    if (nExtrema > 1) {
	                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                    }
	                }
	                if (nExtrema == 2) {
	                    // 分成三段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    } else if (t < extrema[1]) {
	                        w += y1_ < y0_ ? unit : -unit;
	                    } else {
	                        w += y3 < y1_ ? unit : -unit;
	                    }
	                } else {
	                    // 分成两段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    } else {
	                        w += y3 < y0_ ? unit : -unit;
	                    }
	                }
	            }
	            return w;
	        }
	    }
	    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	        // Quick reject
	        if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	            return 0;
	        }
	        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        } else {
	            var t = curve.quadraticExtremum(y0, y1, y2);
	            if (t >= 0 && t <= 1) {
	                var w = 0;
	                var y_ = curve.quadraticAt(y0, y1, y2, t);
	                for (var i = 0; i < nRoots; i++) {
	                    // Remove one endpoint.
	                    var unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                    if (x_ < x) {
	                        // Quick reject
	                        continue;
	                    }
	                    if (roots[i] < t) {
	                        w += y_ < y0 ? unit : -unit;
	                    } else {
	                        w += y2 < y_ ? unit : -unit;
	                    }
	                }
	                return w;
	            } else {
	                // Remove one endpoint.
	                var unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
	                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                if (x_ < x) {
	                    // Quick reject
	                    return 0;
	                }
	                return y2 < y0 ? unit : -unit;
	            }
	        }
	    }
	    // TODO
	    // Arc 旋转
	    function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	        y -= cy;
	        if (y > r || y < -r) {
	            return 0;
	        }
	        var tmp = Math.sqrt(r * r - y * y);
	        roots[0] = -tmp;
	        roots[1] = tmp;
	        var diff = Math.abs(startAngle - endAngle);
	        if (diff < 0.0001) {
	            return 0;
	        }
	        if (diff % PI2 < 0.0001) {
	            // Is a circle
	            startAngle = 0;
	            endAngle = PI2;
	            var dir = anticlockwise ? 1 : -1;
	            if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                return dir;
	            } else {
	                return 0;
	            }
	        }
	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        } else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }
	        var w = 0;
	        for (var i = 0; i < 2; i++) {
	            var x_ = roots[i];
	            if (x_ + cx > x) {
	                var angle = Math.atan2(y, x_);
	                var dir = anticlockwise ? 1 : -1;
	                if (angle < 0) {
	                    angle = PI2 + angle;
	                }
	                if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                        dir = -dir;
	                    }
	                    w += dir;
	                }
	            }
	        }
	        return w;
	    }
	    function containPath(data, lineWidth, isStroke, x, y) {
	        var w = 0;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;
	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];
	            // Begin a new subpath
	            if (cmd === CMD.M && i > 1) {
	                // Close previous subpath
	                if (!isStroke) {
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                }    // 如果被任何一个 subpath 包含
	                     // if (w !== 0) {
	                     //     return true;
	                     // }
	            }
	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];
	                x0 = xi;
	                y0 = yi;
	            }
	            switch (cmd) {
	            case CMD.M:
	                // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                // 在 closePath 的时候使用
	                x0 = data[i++];
	                y0 = data[i++];
	                xi = x0;
	                yi = y0;
	                break;
	            case CMD.L:
	                if (isStroke) {
	                    if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                    w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.C:
	                if (isStroke) {
	                    if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.Q:
	                if (isStroke) {
	                    if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.A:
	                // TODO Arc 判断的开销比较大
	                var cx = data[i++];
	                var cy = data[i++];
	                var rx = data[i++];
	                var ry = data[i++];
	                var theta = data[i++];
	                var dTheta = data[i++];
	                // TODO Arc 旋转
	                var psi = data[i++];
	                var anticlockwise = 1 - data[i++];
	                var x1 = Math.cos(theta) * rx + cx;
	                var y1 = Math.sin(theta) * ry + cy;
	                // 不是直接使用 arc 命令
	                if (i > 1) {
	                    w += windingLine(xi, yi, x1, y1, x, y);
	                } else {
	                    // 第一个命令起点还未定义
	                    x0 = x1;
	                    y0 = y1;
	                }
	                // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                var _x = (x - cx) * ry / rx + cx;
	                if (isStroke) {
	                    if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	                }
	                xi = Math.cos(theta + dTheta) * rx + cx;
	                yi = Math.sin(theta + dTheta) * ry + cy;
	                break;
	            case CMD.R:
	                x0 = xi = data[i++];
	                y0 = yi = data[i++];
	                var width = data[i++];
	                var height = data[i++];
	                var x1 = x0 + width;
	                var y1 = y0 + height;
	                if (isStroke) {
	                    if (containStroke(x0, y0, x1, y0, lineWidth, x, y) || containStroke(x1, y0, x1, y1, lineWidth, x, y) || containStroke(x1, y1, x0, y1, lineWidth, x, y) || containStroke(x0, y1, x0, y0, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // FIXME Clockwise ?
	                    w += windingLine(x1, y0, x1, y1, x, y);
	                    w += windingLine(x0, y1, x0, y0, x, y);
	                }
	                break;
	            case CMD.Z:
	                if (isStroke) {
	                    if (containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // Close a subpath
	                    w += windingLine(xi, yi, x0, y0, x, y);    // 如果被任何一个 subpath 包含
	                                                               // FIXME subpaths may overlap
	                                                               // if (w !== 0) {
	                                                               //     return true;
	                                                               // }
	                }
	                xi = x0;
	                yi = y0;
	                break;
	            }
	        }
	        if (!isStroke && !isAroundEqual(yi, y0)) {
	            w += windingLine(xi, yi, x0, y0, x, y) || 0;
	        }
	        return w !== 0;
	    }
	    return {
	        contain: function (pathData, x, y) {
	            return containPath(pathData, 0, false, x, y);
	        },
	        containStroke: function (pathData, lineWidth, x, y) {
	            return containPath(pathData, lineWidth, true, x, y);
	        }
	    };
	});
	define('zrender/graphic/Pattern', ['require'], function (require) {
	    var Pattern = function (image, repeat) {
	        this.image = image;
	        this.repeat = repeat;
	        // Can be cloned
	        this.type = 'pattern';
	    };
	    Pattern.prototype.getCanvasPattern = function (ctx) {
	        return this._canvasPattern || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));
	    };
	    return Pattern;
	});
	define('echarts/scale/Ordinal', ['require', 'zrender/core/util', './Scale'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var Scale = require('./Scale');
	    var scaleProto = Scale.prototype;
	    var OrdinalScale = Scale.extend({
	            type: 'ordinal',
	            init: function (data, extent) {
	                this._data = data;
	                this._extent = extent || [
	                    0,
	                    data.length - 1
	                ];
	            },
	            parse: function (val) {
	                return typeof val === 'string' ? zrUtil.indexOf(this._data, val) : Math.round(val);
	            },
	            contain: function (rank) {
	                rank = this.parse(rank);
	                return scaleProto.contain.call(this, rank) && this._data[rank] != null;
	            },
	            normalize: function (val) {
	                return scaleProto.normalize.call(this, this.parse(val));
	            },
	            scale: function (val) {
	                return Math.round(scaleProto.scale.call(this, val));
	            },
	            getTicks: function () {
	                var ticks = [];
	                var extent = this._extent;
	                var rank = extent[0];
	                while (rank <= extent[1]) {
	                    ticks.push(rank);
	                    rank++;
	                }
	                return ticks;
	            },
	            getLabel: function (n) {
	                return this._data[n];
	            },
	            count: function () {
	                return this._extent[1] - this._extent[0] + 1;
	            },
	            niceTicks: zrUtil.noop,
	            niceExtent: zrUtil.noop
	        });
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    OrdinalScale.create = function () {
	        return new OrdinalScale();
	    };
	    return OrdinalScale;
	});
	define('zrender/core/bbox', ['require', './vector', './curve'], function (require) {
	    var vec2 = require('./vector');
	    var curve = require('./curve');
	    var bbox = {};
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	    var start = vec2.create();
	    var end = vec2.create();
	    var extremity = vec2.create();
	    var PI2 = Math.PI * 2;
	    /**
	     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	     * @module zrender/core/bbox
	     * @param {Array<Object>} points 顶点数组
	     * @param {number} min
	     * @param {number} max
	     */
	    bbox.fromPoints = function (points, min, max) {
	        if (points.length === 0) {
	            return;
	        }
	        var p = points[0];
	        var left = p[0];
	        var right = p[0];
	        var top = p[1];
	        var bottom = p[1];
	        var i;
	        for (i = 1; i < points.length; i++) {
	            p = points[i];
	            left = mathMin(left, p[0]);
	            right = mathMax(right, p[0]);
	            top = mathMin(top, p[1]);
	            bottom = mathMax(bottom, p[1]);
	        }
	        min[0] = left;
	        min[1] = top;
	        max[0] = right;
	        max[1] = bottom;
	    };
	    /**
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	        min[0] = mathMin(x0, x1);
	        min[1] = mathMin(y0, y1);
	        max[0] = mathMax(x0, x1);
	        max[1] = mathMax(y0, y1);
	    };
	    var xDim = [];
	    var yDim = [];
	    /**
	     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromCubic = function (x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	        var cubicExtrema = curve.cubicExtrema;
	        var cubicAt = curve.cubicAt;
	        var i;
	        var n = cubicExtrema(x0, x1, x2, x3, xDim);
	        min[0] = Infinity;
	        min[1] = Infinity;
	        max[0] = -Infinity;
	        max[1] = -Infinity;
	        for (i = 0; i < n; i++) {
	            var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	            min[0] = mathMin(x, min[0]);
	            max[0] = mathMax(x, max[0]);
	        }
	        n = cubicExtrema(y0, y1, y2, y3, yDim);
	        for (i = 0; i < n; i++) {
	            var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	            min[1] = mathMin(y, min[1]);
	            max[1] = mathMax(y, max[1]);
	        }
	        min[0] = mathMin(x0, min[0]);
	        max[0] = mathMax(x0, max[0]);
	        min[0] = mathMin(x3, min[0]);
	        max[0] = mathMax(x3, max[0]);
	        min[1] = mathMin(y0, min[1]);
	        max[1] = mathMax(y0, max[1]);
	        min[1] = mathMin(y3, min[1]);
	        max[1] = mathMax(y3, max[1]);
	    };
	    /**
	     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromQuadratic = function (x0, y0, x1, y1, x2, y2, min, max) {
	        var quadraticExtremum = curve.quadraticExtremum;
	        var quadraticAt = curve.quadraticAt;
	        // Find extremities, where derivative in x dim or y dim is zero
	        var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	        var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
	        var x = quadraticAt(x0, x1, x2, tx);
	        var y = quadraticAt(y0, y1, y2, ty);
	        min[0] = mathMin(x0, x2, x);
	        min[1] = mathMin(y0, y2, y);
	        max[0] = mathMax(x0, x2, x);
	        max[1] = mathMax(y0, y2, y);
	    };
	    /**
	     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	     * @method
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x
	     * @param {number} y
	     * @param {number} rx
	     * @param {number} ry
	     * @param {number} startAngle
	     * @param {number} endAngle
	     * @param {number} anticlockwise
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromArc = function (x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	        var vec2Min = vec2.min;
	        var vec2Max = vec2.max;
	        var diff = Math.abs(startAngle - endAngle);
	        if (diff % PI2 < 0.0001 && diff > 0.0001) {
	            // Is a circle
	            min[0] = x - rx;
	            min[1] = y - ry;
	            max[0] = x + rx;
	            max[1] = y + ry;
	            return;
	        }
	        start[0] = mathCos(startAngle) * rx + x;
	        start[1] = mathSin(startAngle) * ry + y;
	        end[0] = mathCos(endAngle) * rx + x;
	        end[1] = mathSin(endAngle) * ry + y;
	        vec2Min(min, start, end);
	        vec2Max(max, start, end);
	        // Thresh to [0, Math.PI * 2]
	        startAngle = startAngle % PI2;
	        if (startAngle < 0) {
	            startAngle = startAngle + PI2;
	        }
	        endAngle = endAngle % PI2;
	        if (endAngle < 0) {
	            endAngle = endAngle + PI2;
	        }
	        if (startAngle > endAngle && !anticlockwise) {
	            endAngle += PI2;
	        } else if (startAngle < endAngle && anticlockwise) {
	            startAngle += PI2;
	        }
	        if (anticlockwise) {
	            var tmp = endAngle;
	            endAngle = startAngle;
	            startAngle = tmp;
	        }
	        // var number = 0;
	        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	            if (angle > startAngle) {
	                extremity[0] = mathCos(angle) * rx + x;
	                extremity[1] = mathSin(angle) * ry + y;
	                vec2Min(min, extremity, min);
	                vec2Max(max, extremity, max);
	            }
	        }
	    };
	    return bbox;
	});
	define('zrender/core/curve', ['require', './vector'], function (require) {
	    'use strict';
	    var vec2 = require('./vector');
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var mathPow = Math.pow;
	    var mathSqrt = Math.sqrt;
	    var EPSILON = 1e-8;
	    var EPSILON_NUMERIC = 0.0001;
	    var THREE_SQRT = mathSqrt(3);
	    var ONE_THIRD = 1 / 3;
	    // 临时变量
	    var _v0 = v2Create();
	    var _v1 = v2Create();
	    var _v2 = v2Create();
	    // var _v3 = vec2.create();
	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /**
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	    }
	    /**
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	    }
	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1 - p0);
	        var d = p0 - val;
	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;
	        var n = 0;
	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            } else {
	                var t1 = -c / b;
	                //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        } else {
	            var disc = B * B - 4 * A * C;
	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;
	                // t1, a is not zero
	                var t2 = -K / 2;
	                // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            } else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -mathPow(-Y1, ONE_THIRD);
	                } else {
	                    Y1 = mathPow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -mathPow(-Y2, ONE_THIRD);
	                } else {
	                    Y2 = mathPow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            } else {
	                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = mathSqrt(A);
	                var tmp = Math.cos(theta);
	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }
	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	            }
	        } else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            } else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;
	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;
	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }
	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	        var prev;
	        var next;
	        var d1;
	        var d2;
	        _v0[0] = x;
	        _v0[1] = y;
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            prev = t - interval;
	            next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	            d1 = v2DistSquare(_v1, _v0);
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            } else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                d2 = v2DistSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                } else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }
	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }
	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }
	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        } else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            } else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2
	            return 0.5;
	        } else {
	            return (p0 - p1) / divider;
	        }
	    }
	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }
	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	        _v0[0] = x;
	        _v0[1] = y;
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);
	            var d1 = v2DistSquare(_v1, _v0);
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            } else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = v2DistSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                } else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }
	    return {
	        cubicAt: cubicAt,
	        cubicDerivativeAt: cubicDerivativeAt,
	        cubicRootAt: cubicRootAt,
	        cubicExtrema: cubicExtrema,
	        cubicSubdivide: cubicSubdivide,
	        cubicProjectPoint: cubicProjectPoint,
	        quadraticAt: quadraticAt,
	        quadraticDerivativeAt: quadraticDerivativeAt,
	        quadraticRootAt: quadraticRootAt,
	        quadraticExtremum: quadraticExtremum,
	        quadraticSubdivide: quadraticSubdivide,
	        quadraticProjectPoint: quadraticProjectPoint
	    };
	});
	define('zrender/graphic/Style', ['require'], function (require) {
	    var STYLE_COMMON_PROPS = [
	            [
	                'shadowBlur',
	                0
	            ],
	            [
	                'shadowOffsetX',
	                0
	            ],
	            [
	                'shadowOffsetY',
	                0
	            ],
	            [
	                'shadowColor',
	                '#000'
	            ],
	            [
	                'lineCap',
	                'butt'
	            ],
	            [
	                'lineJoin',
	                'miter'
	            ],
	            [
	                'miterLimit',
	                10
	            ]
	        ];
	    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);
	    var Style = function (opts) {
	        this.extendFrom(opts);
	    };
	    function createLinearGradient(ctx, obj, rect) {
	        // var size =
	        var x = obj.x;
	        var x2 = obj.x2;
	        var y = obj.y;
	        var y2 = obj.y2;
	        if (!obj.global) {
	            x = x * rect.width + rect.x;
	            x2 = x2 * rect.width + rect.x;
	            y = y * rect.height + rect.y;
	            y2 = y2 * rect.height + rect.y;
	        }
	        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	        return canvasGradient;
	    }
	    function createRadialGradient(ctx, obj, rect) {
	        var width = rect.width;
	        var height = rect.height;
	        var min = Math.min(width, height);
	        var x = obj.x;
	        var y = obj.y;
	        var r = obj.r;
	        if (!obj.global) {
	            x = x * width + rect.x;
	            y = y * height + rect.y;
	            r = r * min;
	        }
	        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	        return canvasGradient;
	    }
	    Style.prototype = {
	        constructor: Style,
	        fill: '#000000',
	        stroke: null,
	        opacity: 1,
	        lineDash: null,
	        lineDashOffset: 0,
	        shadowBlur: 0,
	        shadowOffsetX: 0,
	        shadowOffsetY: 0,
	        lineWidth: 1,
	        strokeNoScale: false,
	        text: null,
	        textFill: '#000',
	        textStroke: null,
	        textPosition: 'inside',
	        textBaseline: null,
	        textAlign: null,
	        textVerticalAlign: null,
	        textDistance: 5,
	        textShadowBlur: 0,
	        textShadowOffsetX: 0,
	        textShadowOffsetY: 0,
	        blend: null,
	        bind: function (ctx, el, prevEl) {
	            var style = this;
	            var prevStyle = prevEl && prevEl.style;
	            var firstDraw = !prevStyle;
	            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	                var prop = STYLE_COMMON_PROPS[i];
	                var styleName = prop[0];
	                if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	                    // FIXME Invalid property value will cause style leak from previous element.
	                    ctx[styleName] = style[styleName] || prop[1];
	                }
	            }
	            if (firstDraw || style.fill !== prevStyle.fill) {
	                ctx.fillStyle = style.fill;
	            }
	            if (firstDraw || style.stroke !== prevStyle.stroke) {
	                ctx.strokeStyle = style.stroke;
	            }
	            if (firstDraw || style.opacity !== prevStyle.opacity) {
	                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	            }
	            if (firstDraw || style.blend !== prevStyle.blend) {
	                ctx.globalCompositeOperation = style.blend || 'source-over';
	            }
	            if (this.hasStroke()) {
	                var lineWidth = style.lineWidth;
	                ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	            }
	        },
	        hasFill: function () {
	            var fill = this.fill;
	            return fill != null && fill !== 'none';
	        },
	        hasStroke: function () {
	            var stroke = this.stroke;
	            return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	        },
	        extendFrom: function (otherStyle, overwrite) {
	            if (otherStyle) {
	                var target = this;
	                for (var name in otherStyle) {
	                    if (otherStyle.hasOwnProperty(name) && (overwrite || !target.hasOwnProperty(name))) {
	                        target[name] = otherStyle[name];
	                    }
	                }
	            }
	        },
	        set: function (obj, value) {
	            if (typeof obj === 'string') {
	                this[obj] = value;
	            } else {
	                this.extendFrom(obj, true);
	            }
	        },
	        clone: function () {
	            var newStyle = new this.constructor();
	            newStyle.extendFrom(this, true);
	            return newStyle;
	        },
	        getGradient: function (ctx, obj, rect) {
	            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	            var canvasGradient = method(ctx, obj, rect);
	            var colorStops = obj.colorStops;
	            for (var i = 0; i < colorStops.length; i++) {
	                canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	            }
	            return canvasGradient;
	        }
	    };
	    var styleProto = Style.prototype;
	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	        var prop = STYLE_COMMON_PROPS[i];
	        if (!(prop[0] in styleProto)) {
	            styleProto[prop[0]] = prop[1];
	        }
	    }
	    // Provide for others
	    Style.getGradient = styleProto.getGradient;
	    return Style;
	});
	define('zrender/config', [], function () {
	    var dpr = 1;
	    // If in browser environment
	    if (typeof window !== 'undefined') {
	        dpr = Math.max(window.devicePixelRatio || 1, 1);
	    }
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	            debugMode: 0,
	            devicePixelRatio: dpr
	        };
	    return config;
	});
	define('zrender/vml/core', ['require', 'exports', 'module', '../core/env'], function (require, exports, module) {
	    if (!require('../core/env').canvasSupported) {
	        var urn = 'urn:schemas-microsoft-com:vml';
	        var createNode;
	        var win = window;
	        var doc = win.document;
	        var vmlInited = false;
	        try {
	            !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	            createNode = function (tagName) {
	                return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	            };
	        } catch (e) {
	            createNode = function (tagName) {
	                return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	            };
	        }
	        // From raphael
	        var initVML = function () {
	            if (vmlInited) {
	                return;
	            }
	            vmlInited = true;
	            var styleSheets = doc.styleSheets;
	            if (styleSheets.length < 31) {
	                doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	            } else {
	                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	                styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	            }
	        };
	        // Not useing return to avoid error when converting to CommonJS module
	        module.exports = {
	            doc: doc,
	            initVML: initVML,
	            createNode: createNode
	        };
	    }
	});
	define('echarts/util/clazz', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var clazz = {};
	    var TYPE_DELIMITER = '.';
	    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	    /**
	     * @public
	     */
	    var parseClassType = clazz.parseClassType = function (componentType) {
	            var ret = {
	                    main: '',
	                    sub: ''
	                };
	            if (componentType) {
	                componentType = componentType.split(TYPE_DELIMITER);
	                ret.main = componentType[0] || '';
	                ret.sub = componentType[1] || '';
	            }
	            return ret;
	        };
	    /**
	     * @public
	     */
	    clazz.enableClassExtend = function (RootClass) {
	        RootClass.$constructor = RootClass;
	        RootClass.extend = function (proto) {
	            var superClass = this;
	            var ExtendedClass = function () {
	                if (!proto.$constructor) {
	                    superClass.apply(this, arguments);
	                } else {
	                    proto.$constructor.apply(this, arguments);
	                }
	            };
	            zrUtil.extend(ExtendedClass.prototype, proto);
	            ExtendedClass.extend = this.extend;
	            ExtendedClass.superCall = superCall;
	            ExtendedClass.superApply = superApply;
	            zrUtil.inherits(ExtendedClass, this);
	            ExtendedClass.superClass = superClass;
	            return ExtendedClass;
	        };
	    };
	    // superCall should have class info, which can not be fetch from 'this'.
	    // Consider this case:
	    // class A has method f,
	    // class B inherits class A, overrides method f, f call superApply('f'),
	    // class C inherits class B, do not overrides method f,
	    // then when method of class C is called, dead loop occured.
	    function superCall(context, methodName) {
	        var args = zrUtil.slice(arguments, 2);
	        return this.superClass.prototype[methodName].apply(context, args);
	    }
	    function superApply(context, methodName, args) {
	        return this.superClass.prototype[methodName].apply(context, args);
	    }
	    /**
	     * @param {Object} entity
	     * @param {Object} options
	     * @param {boolean} [options.registerWhenExtend]
	     * @public
	     */
	    clazz.enableClassManagement = function (entity, options) {
	        options = options || {};
	        /**
	         * Component model classes
	         * key: componentType,
	         * value:
	         *     componentClass, when componentType is 'xxx'
	         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	         * @type {Object}
	         */
	        var storage = {};
	        entity.registerClass = function (Clazz, componentType) {
	            if (componentType) {
	                componentType = parseClassType(componentType);
	                if (!componentType.sub) {
	                    if (true) {
	                        if (storage[componentType.main]) {
	                            console.warn(componentType.main + ' exists.');
	                        }
	                    }
	                    storage[componentType.main] = Clazz;
	                } else if (componentType.sub !== IS_CONTAINER) {
	                    var container = makeContainer(componentType);
	                    container[componentType.sub] = Clazz;
	                }
	            }
	            return Clazz;
	        };
	        entity.getClass = function (componentTypeMain, subType, throwWhenNotFound) {
	            var Clazz = storage[componentTypeMain];
	            if (Clazz && Clazz[IS_CONTAINER]) {
	                Clazz = subType ? Clazz[subType] : null;
	            }
	            if (throwWhenNotFound && !Clazz) {
	                throw new Error('Component ' + componentTypeMain + '.' + (subType || '') + ' not exists. Load it first.');
	            }
	            return Clazz;
	        };
	        entity.getClassesByMainType = function (componentType) {
	            componentType = parseClassType(componentType);
	            var result = [];
	            var obj = storage[componentType.main];
	            if (obj && obj[IS_CONTAINER]) {
	                zrUtil.each(obj, function (o, type) {
	                    type !== IS_CONTAINER && result.push(o);
	                });
	            } else {
	                result.push(obj);
	            }
	            return result;
	        };
	        entity.hasClass = function (componentType) {
	            // Just consider componentType.main.
	            componentType = parseClassType(componentType);
	            return !!storage[componentType.main];
	        };
	        /**
	         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	         */
	        entity.getAllClassMainTypes = function () {
	            var types = [];
	            zrUtil.each(storage, function (obj, type) {
	                types.push(type);
	            });
	            return types;
	        };
	        /**
	         * If a main type is container and has sub types
	         * @param  {string}  mainType
	         * @return {boolean}
	         */
	        entity.hasSubTypes = function (componentType) {
	            componentType = parseClassType(componentType);
	            var obj = storage[componentType.main];
	            return obj && obj[IS_CONTAINER];
	        };
	        entity.parseClassType = parseClassType;
	        function makeContainer(componentType) {
	            var container = storage[componentType.main];
	            if (!container || !container[IS_CONTAINER]) {
	                container = storage[componentType.main] = {};
	                container[IS_CONTAINER] = true;
	            }
	            return container;
	        }
	        if (options.registerWhenExtend) {
	            var originalExtend = entity.extend;
	            if (originalExtend) {
	                entity.extend = function (proto) {
	                    var ExtendedClass = originalExtend.call(this, proto);
	                    return entity.registerClass(ExtendedClass, proto.type);
	                };
	            }
	        }
	        return entity;
	    };
	    /**
	     * @param {string|Array.<string>} properties
	     */
	    clazz.setReadOnly = function (obj, properties) {
	    };
	    return clazz;
	});
	define('zrender/Element', ['require', './core/guid', './mixin/Eventful', './mixin/Transformable', './mixin/Animatable', './core/util'], function (require) {
	    'use strict';
	    var guid = require('./core/guid');
	    var Eventful = require('./mixin/Eventful');
	    var Transformable = require('./mixin/Transformable');
	    var Animatable = require('./mixin/Animatable');
	    var zrUtil = require('./core/util');
	    /**
	     * @alias module:zrender/Element
	     * @constructor
	     * @extends {module:zrender/mixin/Animatable}
	     * @extends {module:zrender/mixin/Transformable}
	     * @extends {module:zrender/mixin/Eventful}
	     */
	    var Element = function (opts) {
	        Transformable.call(this, opts);
	        Eventful.call(this, opts);
	        Animatable.call(this, opts);
	        /**
	         * 画布元素ID
	         * @type {string}
	         */
	        this.id = opts.id || guid();
	    };
	    Element.prototype = {
	        type: 'element',
	        name: '',
	        __zr: null,
	        ignore: false,
	        clipPath: null,
	        drift: function (dx, dy) {
	            switch (this.draggable) {
	            case 'horizontal':
	                dy = 0;
	                break;
	            case 'vertical':
	                dx = 0;
	                break;
	            }
	            var m = this.transform;
	            if (!m) {
	                m = this.transform = [
	                    1,
	                    0,
	                    0,
	                    1,
	                    0,
	                    0
	                ];
	            }
	            m[4] += dx;
	            m[5] += dy;
	            this.decomposeTransform();
	            this.dirty(false);
	        },
	        beforeUpdate: function () {
	        },
	        afterUpdate: function () {
	        },
	        update: function () {
	            this.updateTransform();
	        },
	        traverse: function (cb, context) {
	        },
	        attrKV: function (key, value) {
	            if (key === 'position' || key === 'scale' || key === 'origin') {
	                // Copy the array
	                if (value) {
	                    var target = this[key];
	                    if (!target) {
	                        target = this[key] = [];
	                    }
	                    target[0] = value[0];
	                    target[1] = value[1];
	                }
	            } else {
	                this[key] = value;
	            }
	        },
	        hide: function () {
	            this.ignore = true;
	            this.__zr && this.__zr.refresh();
	        },
	        show: function () {
	            this.ignore = false;
	            this.__zr && this.__zr.refresh();
	        },
	        attr: function (key, value) {
	            if (typeof key === 'string') {
	                this.attrKV(key, value);
	            } else if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    if (key.hasOwnProperty(name)) {
	                        this.attrKV(name, key[name]);
	                    }
	                }
	            }
	            this.dirty(false);
	            return this;
	        },
	        setClipPath: function (clipPath) {
	            var zr = this.__zr;
	            if (zr) {
	                clipPath.addSelfToZr(zr);
	            }
	            // Remove previous clip path
	            if (this.clipPath && this.clipPath !== clipPath) {
	                this.removeClipPath();
	            }
	            this.clipPath = clipPath;
	            clipPath.__zr = zr;
	            clipPath.__clipTarget = this;
	            this.dirty(false);
	        },
	        removeClipPath: function () {
	            var clipPath = this.clipPath;
	            if (clipPath) {
	                if (clipPath.__zr) {
	                    clipPath.removeSelfFromZr(clipPath.__zr);
	                }
	                clipPath.__zr = null;
	                clipPath.__clipTarget = null;
	                this.clipPath = null;
	                this.dirty(false);
	            }
	        },
	        addSelfToZr: function (zr) {
	            this.__zr = zr;
	            // 添加动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.addAnimator(animators[i]);
	                }
	            }
	            if (this.clipPath) {
	                this.clipPath.addSelfToZr(zr);
	            }
	        },
	        removeSelfFromZr: function (zr) {
	            this.__zr = null;
	            // 移除动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.removeAnimator(animators[i]);
	                }
	            }
	            if (this.clipPath) {
	                this.clipPath.removeSelfFromZr(zr);
	            }
	        }
	    };
	    zrUtil.mixin(Element, Animatable);
	    zrUtil.mixin(Element, Transformable);
	    zrUtil.mixin(Element, Eventful);
	    return Element;
	});
	define('echarts/model/mixin/makeStyleMapper', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    return function (properties) {
	        // Normalize
	        for (var i = 0; i < properties.length; i++) {
	            if (!properties[i][1]) {
	                properties[i][1] = properties[i][0];
	            }
	        }
	        return function (excludes) {
	            var style = {};
	            for (var i = 0; i < properties.length; i++) {
	                var propName = properties[i][1];
	                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                    continue;
	                }
	                var val = this.getShallow(propName);
	                if (val != null) {
	                    style[properties[i][0]] = val;
	                }
	            }
	            return style;
	        };
	    };
	});
	define('echarts/coord/cartesian/Cartesian', ['require', 'zrender/core/util'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    function dimAxisMapper(dim) {
	        return this._axes[dim];
	    }
	    /**
	     * @alias module:echarts/coord/Cartesian
	     * @constructor
	     */
	    var Cartesian = function (name) {
	        this._axes = {};
	        this._dimList = [];
	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	    };
	    Cartesian.prototype = {
	        constructor: Cartesian,
	        type: 'cartesian',
	        getAxis: function (dim) {
	            return this._axes[dim];
	        },
	        getAxes: function () {
	            return zrUtil.map(this._dimList, dimAxisMapper, this);
	        },
	        getAxesByScale: function (scaleType) {
	            scaleType = scaleType.toLowerCase();
	            return zrUtil.filter(this.getAxes(), function (axis) {
	                return axis.scale.type === scaleType;
	            });
	        },
	        addAxis: function (axis) {
	            var dim = axis.dim;
	            this._axes[dim] = axis;
	            this._dimList.push(dim);
	        },
	        dataToCoord: function (val) {
	            return this._dataCoordConvert(val, 'dataToCoord');
	        },
	        coordToData: function (val) {
	            return this._dataCoordConvert(val, 'coordToData');
	        },
	        _dataCoordConvert: function (input, method) {
	            var dimList = this._dimList;
	            var output = input instanceof Array ? [] : {};
	            for (var i = 0; i < dimList.length; i++) {
	                var dim = dimList[i];
	                var axis = this._axes[dim];
	                output[dim] = axis[method](input[dim]);
	            }
	            return output;
	        }
	    };
	    return Cartesian;
	});
	define('zrender/core/guid', [], function () {
	    var idStart = 2311;
	    return function () {
	        return idStart++;
	    };
	});
	define('zrender/mixin/Animatable', ['require', '../animation/Animator', '../core/util', '../core/log'], function (require) {
	    'use strict';
	    var Animator = require('../animation/Animator');
	    var util = require('../core/util');
	    var isString = util.isString;
	    var isFunction = util.isFunction;
	    var isObject = util.isObject;
	    var log = require('../core/log');
	    /**
	     * @alias modue:zrender/mixin/Animatable
	     * @constructor
	     */
	    var Animatable = function () {
	        /**
	         * @type {Array.<module:zrender/animation/Animator>}
	         * @readOnly
	         */
	        this.animators = [];
	    };
	    Animatable.prototype = {
	        constructor: Animatable,
	        animate: function (path, loop) {
	            var target;
	            var animatingShape = false;
	            var el = this;
	            var zr = this.__zr;
	            if (path) {
	                var pathSplitted = path.split('.');
	                var prop = el;
	                // If animating shape
	                animatingShape = pathSplitted[0] === 'shape';
	                for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                    if (!prop) {
	                        continue;
	                    }
	                    prop = prop[pathSplitted[i]];
	                }
	                if (prop) {
	                    target = prop;
	                }
	            } else {
	                target = el;
	            }
	            if (!target) {
	                log('Property "' + path + '" is not existed in element ' + el.id);
	                return;
	            }
	            var animators = el.animators;
	            var animator = new Animator(target, loop);
	            animator.during(function (target) {
	                el.dirty(animatingShape);
	            }).done(function () {
	                // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	                animators.splice(util.indexOf(animators, animator), 1);
	            });
	            animators.push(animator);
	            // If animate after added to the zrender
	            if (zr) {
	                zr.animation.addAnimator(animator);
	            }
	            return animator;
	        },
	        stopAnimation: function (forwardToLast) {
	            var animators = this.animators;
	            var len = animators.length;
	            for (var i = 0; i < len; i++) {
	                animators[i].stop(forwardToLast);
	            }
	            animators.length = 0;
	            return this;
	        },
	        animateTo: function (target, time, delay, easing, callback) {
	            // animateTo(target, time, easing, callback);
	            if (isString(delay)) {
	                callback = easing;
	                easing = delay;
	                delay = 0;
	            }    // animateTo(target, time, delay, callback);
	            else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }    // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                callback = delay;
	                delay = 0;
	            }    // animateTo(target, callback)
	            else if (isFunction(time)) {
	                callback = time;
	                time = 500;
	            }    // animateTo(target)
	            else if (!time) {
	                time = 500;
	            }
	            // Stop all previous animations
	            this.stopAnimation();
	            this._animateToShallow('', this, target, time, delay, easing, callback);
	            // Animators may be removed immediately after start
	            // if there is nothing to animate
	            var animators = this.animators.slice();
	            var count = animators.length;
	            function done() {
	                count--;
	                if (!count) {
	                    callback && callback();
	                }
	            }
	            // No animators. This should be checked before animators[i].start(),
	            // because 'done' may be executed immediately if no need to animate.
	            if (!count) {
	                callback && callback();
	            }
	            // Start after all animators created
	            // Incase any animator is done immediately when all animation properties are not changed
	            for (var i = 0; i < animators.length; i++) {
	                animators[i].done(done).start(easing);
	            }
	        },
	        _animateToShallow: function (path, source, target, time, delay) {
	            var objShallow = {};
	            var propertyCount = 0;
	            for (var name in target) {
	                if (source[name] != null) {
	                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                        this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	                    } else {
	                        objShallow[name] = target[name];
	                        propertyCount++;
	                    }
	                } else if (target[name] != null) {
	                    // Attr directly if not has property
	                    // FIXME, if some property not needed for element ?
	                    if (!path) {
	                        this.attr(name, target[name]);
	                    } else {
	                        // Shape or style
	                        var props = {};
	                        props[path] = {};
	                        props[path][name] = target[name];
	                        this.attr(props);
	                    }
	                }
	            }
	            if (propertyCount > 0) {
	                this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	            }
	            return this;
	        }
	    };
	    return Animatable;
	});
	define('echarts/util/component', ['require', 'zrender/core/util', './clazz'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var clazz = require('./clazz');
	    var parseClassType = clazz.parseClassType;
	    var base = 0;
	    var componentUtil = {};
	    var DELIMITER = '_';
	    /**
	     * @public
	     * @param {string} type
	     * @return {string}
	     */
	    componentUtil.getUID = function (type) {
	        // Considering the case of crossing js context,
	        // use Math.random to make id as unique as possible.
	        return [
	            type || '',
	            base++,
	            Math.random()
	        ].join(DELIMITER);
	    };
	    /**
	     * @inner
	     */
	    componentUtil.enableSubTypeDefaulter = function (entity) {
	        var subTypeDefaulters = {};
	        entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	            componentType = parseClassType(componentType);
	            subTypeDefaulters[componentType.main] = defaulter;
	        };
	        entity.determineSubType = function (componentType, option) {
	            var type = option.type;
	            if (!type) {
	                var componentTypeMain = parseClassType(componentType).main;
	                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                    type = subTypeDefaulters[componentTypeMain](option);
	                }
	            }
	            return type;
	        };
	        return entity;
	    };
	    /**
	     * Topological travel on Activity Network (Activity On Vertices).
	     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	     *
	     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	     *
	     * If there is circle dependencey, Error will be thrown.
	     *
	     */
	    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {
	        /**
	         * @public
	         * @param {Array.<string>} targetNameList Target Component type list.
	         *                                           Can be ['aa', 'bb', 'aa.xx']
	         * @param {Array.<string>} fullNameList By which we can build dependency graph.
	         * @param {Function} callback Params: componentType, dependencies.
	         * @param {Object} context Scope of callback.
	         */
	        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	            if (!targetNameList.length) {
	                return;
	            }
	            var result = makeDepndencyGraph(fullNameList);
	            var graph = result.graph;
	            var stack = result.noEntryList;
	            var targetNameSet = {};
	            zrUtil.each(targetNameList, function (name) {
	                targetNameSet[name] = true;
	            });
	            while (stack.length) {
	                var currComponentType = stack.pop();
	                var currVertex = graph[currComponentType];
	                var isInTargetNameSet = !!targetNameSet[currComponentType];
	                if (isInTargetNameSet) {
	                    callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                    delete targetNameSet[currComponentType];
	                }
	                zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	            }
	            zrUtil.each(targetNameSet, function () {
	                throw new Error('Circle dependency may exists');
	            });
	            function removeEdge(succComponentType) {
	                graph[succComponentType].entryCount--;
	                if (graph[succComponentType].entryCount === 0) {
	                    stack.push(succComponentType);
	                }
	            }
	            // Consider this case: legend depends on series, and we call
	            // chart.setOption({series: [...]}), where only series is in option.
	            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	            // not be called, but only sereis.mergeOption is called. Thus legend
	            // have no chance to update its local record about series (like which
	            // name of series is available in legend).
	            function removeEdgeAndAdd(succComponentType) {
	                targetNameSet[succComponentType] = true;
	                removeEdge(succComponentType);
	            }
	        };
	        /**
	         * DepndencyGraph: {Object}
	         * key: conponentType,
	         * value: {
	         *     successor: [conponentTypes...],
	         *     originalDeps: [conponentTypes...],
	         *     entryCount: {number}
	         * }
	         */
	        function makeDepndencyGraph(fullNameList) {
	            var graph = {};
	            var noEntryList = [];
	            zrUtil.each(fullNameList, function (name) {
	                var thisItem = createDependencyGraphItem(graph, name);
	                var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	                thisItem.entryCount = availableDeps.length;
	                if (thisItem.entryCount === 0) {
	                    noEntryList.push(name);
	                }
	                zrUtil.each(availableDeps, function (dependentName) {
	                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                        thisItem.predecessor.push(dependentName);
	                    }
	                    var thatItem = createDependencyGraphItem(graph, dependentName);
	                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                        thatItem.successor.push(name);
	                    }
	                });
	            });
	            return {
	                graph: graph,
	                noEntryList: noEntryList
	            };
	        }
	        function createDependencyGraphItem(graph, name) {
	            if (!graph[name]) {
	                graph[name] = {
	                    predecessor: [],
	                    successor: []
	                };
	            }
	            return graph[name];
	        }
	        function getAvailableDependencies(originalDeps, fullNameList) {
	            var availableDeps = [];
	            zrUtil.each(originalDeps, function (dep) {
	                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	            });
	            return availableDeps;
	        }
	    };
	    return componentUtil;
	});
	define('echarts/coord/Axis', ['require', '../util/number', 'zrender/core/util'], function (require) {
	    var numberUtil = require('../util/number');
	    var linearMap = numberUtil.linearMap;
	    var zrUtil = require('zrender/core/util');
	    function fixExtentWithBands(extent, nTick) {
	        var size = extent[1] - extent[0];
	        var len = nTick;
	        var margin = size / len / 2;
	        extent[0] += margin;
	        extent[1] -= margin;
	    }
	    var normalizedExtent = [
	            0,
	            1
	        ];
	    /**
	     * @name module:echarts/coord/CartesianAxis
	     * @constructor
	     */
	    var Axis = function (dim, scale, extent) {
	        /**
	         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	         * @type {string}
	         */
	        this.dim = dim;
	        /**
	         * Axis scale
	         * @type {module:echarts/coord/scale/*}
	         */
	        this.scale = scale;
	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        this._extent = extent || [
	            0,
	            0
	        ];
	        /**
	         * @type {boolean}
	         */
	        this.inverse = false;
	        /**
	         * Usually true when axis has a ordinal scale
	         * @type {boolean}
	         */
	        this.onBand = false;
	    };
	    Axis.prototype = {
	        constructor: Axis,
	        contain: function (coord) {
	            var extent = this._extent;
	            var min = Math.min(extent[0], extent[1]);
	            var max = Math.max(extent[0], extent[1]);
	            return coord >= min && coord <= max;
	        },
	        containData: function (data) {
	            return this.contain(this.dataToCoord(data));
	        },
	        getExtent: function () {
	            var ret = this._extent.slice();
	            return ret;
	        },
	        getPixelPrecision: function (dataExtent) {
	            return numberUtil.getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	        },
	        setExtent: function (start, end) {
	            var extent = this._extent;
	            extent[0] = start;
	            extent[1] = end;
	        },
	        dataToCoord: function (data, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	            data = scale.normalize(data);
	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }
	            return linearMap(data, normalizedExtent, extent, clamp);
	        },
	        coordToData: function (coord, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }
	            var t = linearMap(coord, extent, normalizedExtent, clamp);
	            return this.scale.scale(t);
	        },
	        getTicksCoords: function (alignWithLabel) {
	            if (this.onBand && !alignWithLabel) {
	                var bands = this.getBands();
	                var coords = [];
	                for (var i = 0; i < bands.length; i++) {
	                    coords.push(bands[i][0]);
	                }
	                if (bands[i - 1]) {
	                    coords.push(bands[i - 1][1]);
	                }
	                return coords;
	            } else {
	                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	            }
	        },
	        getLabelsCoords: function () {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        },
	        getBands: function () {
	            var extent = this.getExtent();
	            var bands = [];
	            var len = this.scale.count();
	            var start = extent[0];
	            var end = extent[1];
	            var span = end - start;
	            for (var i = 0; i < len; i++) {
	                bands.push([
	                    span * i / len + start,
	                    span * (i + 1) / len + start
	                ]);
	            }
	            return bands;
	        },
	        getBandWidth: function () {
	            var axisExtent = this._extent;
	            var dataExtent = this.scale.getExtent();
	            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	            // Fix #2728, avoid NaN when only one data.
	            len === 0 && (len = 1);
	            var size = Math.abs(axisExtent[1] - axisExtent[0]);
	            return Math.abs(size) / len;
	        }
	    };
	    return Axis;
	});
	define('echarts/model/mixin/boxLayout', ['require'], function (require) {
	    return {
	        getBoxLayoutParams: function () {
	            return {
	                left: this.get('left'),
	                top: this.get('top'),
	                right: this.get('right'),
	                bottom: this.get('bottom'),
	                width: this.get('width'),
	                height: this.get('height')
	            };
	        }
	    };
	});
	define('zrender/mixin/Transformable', ['require', '../core/matrix', '../core/vector'], function (require) {
	    'use strict';
	    var matrix = require('../core/matrix');
	    var vector = require('../core/vector');
	    var mIdentity = matrix.identity;
	    var EPSILON = 0.00005;
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function (opts) {
	        opts = opts || {};
	        // If there are no given position, rotation, scale
	        if (!opts.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [
	                0,
	                0
	            ];
	        }
	        if (opts.rotation == null) {
	            /**
	             * 旋转
	             * @type {Array.<number>}
	             * @default 0
	             */
	            this.rotation = 0;
	        }
	        if (!opts.scale) {
	            /**
	             * 缩放
	             * @type {Array.<number>}
	             * @default [1, 1]
	             */
	            this.scale = [
	                1,
	                1
	            ];
	        }
	        /**
	         * 旋转和缩放的原点
	         * @type {Array.<number>}
	         * @default null
	         */
	        this.origin = this.origin || null;
	    };
	    var transformableProto = Transformable.prototype;
	    transformableProto.transform = null;
	    /**
	     * 判断是否需要有坐标变换
	     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	     */
	    transformableProto.needLocalTransform = function () {
	        return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	    };
	    transformableProto.updateTransform = function () {
	        var parent = this.parent;
	        var parentHasTransform = parent && parent.transform;
	        var needLocalTransform = this.needLocalTransform();
	        var m = this.transform;
	        if (!(needLocalTransform || parentHasTransform)) {
	            m && mIdentity(m);
	            return;
	        }
	        m = m || matrix.create();
	        if (needLocalTransform) {
	            this.getLocalTransform(m);
	        } else {
	            mIdentity(m);
	        }
	        // 应用父节点变换
	        if (parentHasTransform) {
	            if (needLocalTransform) {
	                matrix.mul(m, parent.transform, m);
	            } else {
	                matrix.copy(m, parent.transform);
	            }
	        }
	        // 保存这个变换矩阵
	        this.transform = m;
	        this.invTransform = this.invTransform || matrix.create();
	        matrix.invert(this.invTransform, m);
	    };
	    transformableProto.getLocalTransform = function (m) {
	        m = m || [];
	        mIdentity(m);
	        var origin = this.origin;
	        var scale = this.scale;
	        var rotation = this.rotation;
	        var position = this.position;
	        if (origin) {
	            // Translate to origin
	            m[4] -= origin[0];
	            m[5] -= origin[1];
	        }
	        matrix.scale(m, m, scale);
	        if (rotation) {
	            matrix.rotate(m, m, rotation);
	        }
	        if (origin) {
	            // Translate back from origin
	            m[4] += origin[0];
	            m[5] += origin[1];
	        }
	        m[4] += position[0];
	        m[5] += position[1];
	        return m;
	    };
	    /**
	     * 将自己的transform应用到context上
	     * @param {Context2D} ctx
	     */
	    transformableProto.setTransform = function (ctx) {
	        var m = this.transform;
	        if (m) {
	            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	    };
	    transformableProto.restoreTransform = function (ctx) {
	        var m = this.invTransform;
	        if (m) {
	            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	    };
	    var tmpTransform = [];
	    /**
	     * 分解`transform`矩阵到`position`, `rotation`, `scale`
	     */
	    transformableProto.decomposeTransform = function () {
	        if (!this.transform) {
	            return;
	        }
	        var parent = this.parent;
	        var m = this.transform;
	        if (parent && parent.transform) {
	            // Get local transform and decompose them to position, scale, rotation
	            matrix.mul(tmpTransform, parent.invTransform, m);
	            m = tmpTransform;
	        }
	        var sx = m[0] * m[0] + m[1] * m[1];
	        var sy = m[2] * m[2] + m[3] * m[3];
	        var position = this.position;
	        var scale = this.scale;
	        if (isNotAroundZero(sx - 1)) {
	            sx = Math.sqrt(sx);
	        }
	        if (isNotAroundZero(sy - 1)) {
	            sy = Math.sqrt(sy);
	        }
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        position[0] = m[4];
	        position[1] = m[5];
	        scale[0] = sx;
	        scale[1] = sy;
	        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	    };
	    /**
	     * Get global scale
	     * @return {Array.<number>}
	     */
	    transformableProto.getGlobalScale = function () {
	        var m = this.transform;
	        if (!m) {
	            return [
	                1,
	                1
	            ];
	        }
	        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        return [
	            sx,
	            sy
	        ];
	    };
	    /**
	     * 变换坐标位置到 shape 的局部坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToLocal = function (x, y) {
	        var v2 = [
	                x,
	                y
	            ];
	        var invTransform = this.invTransform;
	        if (invTransform) {
	            vector.applyTransform(v2, v2, invTransform);
	        }
	        return v2;
	    };
	    /**
	     * 变换局部坐标位置到全局坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToGlobal = function (x, y) {
	        var v2 = [
	                x,
	                y
	            ];
	        var transform = this.transform;
	        if (transform) {
	            vector.applyTransform(v2, v2, transform);
	        }
	        return v2;
	    };
	    return Transformable;
	});
	define('echarts/coord/cartesian/axisLabelInterval', ['require', 'zrender/core/util', '../axisHelper'], function (require) {
	    'use strict';
	    var zrUtil = require('zrender/core/util');
	    var axisHelper = require('../axisHelper');
	    return function (axis) {
	        var axisModel = axis.model;
	        var labelModel = axisModel.getModel('axisLabel');
	        var labelInterval = labelModel.get('interval');
	        if (!(axis.type === 'category' && labelInterval === 'auto')) {
	            return labelInterval === 'auto' ? 0 : labelInterval;
	        }
	        return axisHelper.getAxisLabelInterval(zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis), axisModel.getFormattedLabels(), labelModel.getModel('textStyle').getFont(), axis.isHorizontal());
	    };
	});
	define('zrender/core/log', ['require', '../config'], function (require) {
	    var config = require('../config');
	    /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	    return function () {
	        if (config.debugMode === 0) {
	            return;
	        } else if (config.debugMode == 1) {
	            for (var k in arguments) {
	                throw new Error(arguments[k]);
	            }
	        } else if (config.debugMode > 1) {
	            for (var k in arguments) {
	                console.log(arguments[k]);
	            }
	        }
	    };    /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>' 
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	});
	define('echarts/coord/cartesian/AxisModel', ['require', '../../model/Component', 'zrender/core/util', '../axisModelCreator', '../axisModelCommonMixin'], function (require) {
	    'use strict';
	    var ComponentModel = require('../../model/Component');
	    var zrUtil = require('zrender/core/util');
	    var axisModelCreator = require('../axisModelCreator');
	    var AxisModel = ComponentModel.extend({
	            type: 'cartesian2dAxis',
	            axis: null,
	            init: function () {
	                AxisModel.superApply(this, 'init', arguments);
	                this._resetRange();
	            },
	            mergeOption: function () {
	                AxisModel.superApply(this, 'mergeOption', arguments);
	                this._resetRange();
	            },
	            restoreData: function () {
	                AxisModel.superApply(this, 'restoreData', arguments);
	                this._resetRange();
	            },
	            setRange: function (rangeStart, rangeEnd) {
	                this.option.rangeStart = rangeStart;
	                this.option.rangeEnd = rangeEnd;
	            },
	            getMin: function () {
	                var option = this.option;
	                return option.rangeStart != null ? option.rangeStart : option.min;
	            },
	            getMax: function () {
	                var option = this.option;
	                return option.rangeEnd != null ? option.rangeEnd : option.max;
	            },
	            getNeedCrossZero: function () {
	                var option = this.option;
	                return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	            },
	            _resetRange: function () {
	                // rangeStart and rangeEnd is readonly.
	                this.option.rangeStart = this.option.rangeEnd = null;
	            }
	        });
	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }
	    zrUtil.merge(AxisModel.prototype, require('../axisModelCommonMixin'));
	    var extraOption = {
	            gridIndex: 0,
	            offset: 0
	        };
	    axisModelCreator('x', AxisModel, getAxisType, extraOption);
	    axisModelCreator('y', AxisModel, getAxisType, extraOption);
	    return AxisModel;
	});
	define('echarts/coord/axisModelCreator', ['require', './axisDefault', 'zrender/core/util', '../model/Component', '../util/layout'], function (require) {
	    var axisDefault = require('./axisDefault');
	    var zrUtil = require('zrender/core/util');
	    var ComponentModel = require('../model/Component');
	    var layout = require('../util/layout');
	    // FIXME axisType is fixed ?
	    var AXIS_TYPES = [
	            'value',
	            'category',
	            'time',
	            'log'
	        ];
	    /**
	     * Generate sub axis model class
	     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	     * @param {module:echarts/model/Component} BaseAxisModelClass
	     * @param {Function} axisTypeDefaulter
	     * @param {Object} [extraDefaultOption]
	     */
	    return function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	        zrUtil.each(AXIS_TYPES, function (axisType) {
	            BaseAxisModelClass.extend({
	                type: axisName + 'Axis.' + axisType,
	                mergeDefaultAndTheme: function (option, ecModel) {
	                    var layoutMode = this.layoutMode;
	                    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	                    var themeModel = ecModel.getTheme();
	                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                    zrUtil.merge(option, this.getDefaultOption());
	                    option.type = axisTypeDefaulter(axisName, option);
	                    if (layoutMode) {
	                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                    }
	                },
	                defaultOption: zrUtil.mergeAll([
	                    {},
	                    axisDefault[axisType + 'Axis'],
	                    extraDefaultOption
	                ], true)
	            });
	        });
	        ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	    };
	});
	define('echarts/coord/axisModelCommonMixin', ['require', 'zrender/core/util', './axisHelper'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var axisHelper = require('./axisHelper');
	    function getName(obj) {
	        if (zrUtil.isObject(obj) && obj.value != null) {
	            return obj.value;
	        } else {
	            return obj;
	        }
	    }
	    /**
	     * Get categories
	     */
	    function getCategories() {
	        return this.get('type') === 'category' && zrUtil.map(this.get('data'), getName);
	    }
	    /**
	     * Format labels
	     * @return {Array.<string>}
	     */
	    function getFormattedLabels() {
	        return axisHelper.getFormattedLabels(this.axis, this.get('axisLabel.formatter'));
	    }
	    return {
	        getFormattedLabels: getFormattedLabels,
	        getCategories: getCategories
	    };
	});
	define('echarts/coord/axisDefault', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var defaultOption = {
	            show: true,
	            zlevel: 0,
	            z: 0,
	            inverse: false,
	            name: '',
	            nameLocation: 'end',
	            nameRotate: null,
	            nameTruncate: {
	                maxWidth: null,
	                ellipsis: '...',
	                placeholder: '.'
	            },
	            nameTextStyle: {},
	            nameGap: 15,
	            silent: false,
	            triggerEvent: false,
	            tooltip: { show: false },
	            axisLine: {
	                show: true,
	                onZero: true,
	                lineStyle: {
	                    color: '#333',
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            axisTick: {
	                show: true,
	                inside: false,
	                length: 5,
	                lineStyle: { width: 1 }
	            },
	            axisLabel: {
	                show: true,
	                inside: false,
	                rotate: 0,
	                margin: 8,
	                textStyle: { fontSize: 12 }
	            },
	            splitLine: {
	                show: true,
	                lineStyle: {
	                    color: ['#ccc'],
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            splitArea: {
	                show: false,
	                areaStyle: {
	                    color: [
	                        'rgba(250,250,250,0.3)',
	                        'rgba(200,200,200,0.3)'
	                    ]
	                }
	            }
	        };
	    var categoryAxis = zrUtil.merge({
	            boundaryGap: true,
	            splitLine: { show: false },
	            axisTick: {
	                alignWithLabel: false,
	                interval: 'auto'
	            },
	            axisLabel: { interval: 'auto' }
	        }, defaultOption);
	    var valueAxis = zrUtil.merge({
	            boundaryGap: [
	                0,
	                0
	            ],
	            splitNumber: 5
	        }, defaultOption);
	    // FIXME
	    var timeAxis = zrUtil.defaults({
	            scale: true,
	            min: 'dataMin',
	            max: 'dataMax'
	        }, valueAxis);
	    var logAxis = zrUtil.defaults({}, valueAxis);
	    logAxis.scale = true;
	    return {
	        categoryAxis: categoryAxis,
	        valueAxis: valueAxis,
	        timeAxis: timeAxis,
	        logAxis: logAxis
	    };
	});
	define('echarts/chart/helper/createListFromArray', ['require', '../../data/List', '../../data/helper/completeDimensions', 'zrender/core/util', '../../util/model', '../../CoordinateSystem'], function (require) {
	    'use strict';
	    var List = require('../../data/List');
	    var completeDimensions = require('../../data/helper/completeDimensions');
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../../util/model');
	    var CoordinateSystem = require('../../CoordinateSystem');
	    var getDataItemValue = modelUtil.getDataItemValue;
	    var converDataValue = modelUtil.converDataValue;
	    function firstDataNotNull(data) {
	        var i = 0;
	        while (i < data.length && data[i] == null) {
	            i++;
	        }
	        return data[i];
	    }
	    function ifNeedCompleteOrdinalData(data) {
	        var sampleItem = firstDataNotNull(data);
	        return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	    }
	    /**
	     * Helper function to create a list from option data
	     */
	    function createListFromArray(data, seriesModel, ecModel) {
	        // If data is undefined
	        data = data || [];
	        if (true) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }
	        var coordSysName = seriesModel.get('coordinateSystem');
	        var creator = creators[coordSysName];
	        var registeredCoordSys = CoordinateSystem.get(coordSysName);
	        // FIXME
	        var axesInfo = creator && creator(data, seriesModel, ecModel);
	        var dimensions = axesInfo && axesInfo.dimensions;
	        if (!dimensions) {
	            // Get dimensions from registered coordinate system
	            dimensions = registeredCoordSys && registeredCoordSys.dimensions || [
	                'x',
	                'y'
	            ];
	            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	        }
	        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;
	        var list = new List(dimensions, seriesModel);
	        var nameList = createNameList(axesInfo, data);
	        var categories = {};
	        var dimValueGetter = categoryIndex >= 0 && ifNeedCompleteOrdinalData(data) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }
	                // Use dataIndex as ordinal value in categoryAxis
	                return dimIndex === categoryIndex ? dataIndex : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	            } : function (itemOpt, dimName, dataIndex, dimIndex) {
	                var value = getDataItemValue(itemOpt);
	                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }
	                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;
	                if (categoryAxesModels && categoryAxesModels[dimName]) {
	                    // If given value is a category string
	                    if (typeof val === 'string') {
	                        // Lazy get categories
	                        categories[dimName] = categories[dimName] || categoryAxesModels[dimName].getCategories();
	                        val = zrUtil.indexOf(categories[dimName], val);
	                        if (val < 0 && !isNaN(val)) {
	                            // In case some one write '1', '2' istead of 1, 2
	                            val = +val;
	                        }
	                    }
	                }
	                return val;
	            };
	        list.hasItemOption = false;
	        list.initData(data, nameList, dimValueGetter);
	        return list;
	    }
	    function isStackable(axisType) {
	        return axisType !== 'category' && axisType !== 'time';
	    }
	    function getDimTypeByAxis(axisType) {
	        return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	    }
	    /**
	     * Creaters for each coord system.
	     */
	    var creators = {
	            cartesian2d: function (data, seriesModel, ecModel) {
	                var xAxisModel = ecModel.getComponent('xAxis', seriesModel.get('xAxisIndex'));
	                var yAxisModel = ecModel.getComponent('yAxis', seriesModel.get('yAxisIndex'));
	                if (true) {
	                    if (!xAxisModel) {
	                        throw new Error('xAxis "' + seriesModel.get('xAxisIndex') + '" not found');
	                    }
	                    if (!yAxisModel) {
	                        throw new Error('yAxis "' + seriesModel.get('yAxisIndex') + '" not found');
	                    }
	                }
	                var xAxisType = xAxisModel.get('type');
	                var yAxisType = yAxisModel.get('type');
	                var dimensions = [
	                        {
	                            name: 'x',
	                            type: getDimTypeByAxis(xAxisType),
	                            stackable: isStackable(xAxisType)
	                        },
	                        {
	                            name: 'y',
	                            type: getDimTypeByAxis(yAxisType),
	                            stackable: isStackable(yAxisType)
	                        }
	                    ];
	                var isXAxisCateogry = xAxisType === 'category';
	                var isYAxisCategory = yAxisType === 'category';
	                completeDimensions(dimensions, data, [
	                    'x',
	                    'y',
	                    'z'
	                ]);
	                var categoryAxesModels = {};
	                if (isXAxisCateogry) {
	                    categoryAxesModels.x = xAxisModel;
	                }
	                if (isYAxisCategory) {
	                    categoryAxesModels.y = yAxisModel;
	                }
	                return {
	                    dimensions: dimensions,
	                    categoryIndex: isXAxisCateogry ? 0 : isYAxisCategory ? 1 : -1,
	                    categoryAxesModels: categoryAxesModels
	                };
	            },
	            polar: function (data, seriesModel, ecModel) {
	                var polarIndex = seriesModel.get('polarIndex') || 0;
	                var axisFinder = function (axisModel) {
	                    return axisModel.get('polarIndex') === polarIndex;
	                };
	                var angleAxisModel = ecModel.findComponents({
	                        mainType: 'angleAxis',
	                        filter: axisFinder
	                    })[0];
	                var radiusAxisModel = ecModel.findComponents({
	                        mainType: 'radiusAxis',
	                        filter: axisFinder
	                    })[0];
	                if (true) {
	                    if (!angleAxisModel) {
	                        throw new Error('angleAxis option not found');
	                    }
	                    if (!radiusAxisModel) {
	                        throw new Error('radiusAxis option not found');
	                    }
	                }
	                var radiusAxisType = radiusAxisModel.get('type');
	                var angleAxisType = angleAxisModel.get('type');
	                var dimensions = [
	                        {
	                            name: 'radius',
	                            type: getDimTypeByAxis(radiusAxisType),
	                            stackable: isStackable(radiusAxisType)
	                        },
	                        {
	                            name: 'angle',
	                            type: getDimTypeByAxis(angleAxisType),
	                            stackable: isStackable(angleAxisType)
	                        }
	                    ];
	                var isAngleAxisCateogry = angleAxisType === 'category';
	                var isRadiusAxisCateogry = radiusAxisType === 'category';
	                completeDimensions(dimensions, data, [
	                    'radius',
	                    'angle',
	                    'value'
	                ]);
	                var categoryAxesModels = {};
	                if (isRadiusAxisCateogry) {
	                    categoryAxesModels.radius = radiusAxisModel;
	                }
	                if (isAngleAxisCateogry) {
	                    categoryAxesModels.angle = angleAxisModel;
	                }
	                return {
	                    dimensions: dimensions,
	                    categoryIndex: isAngleAxisCateogry ? 1 : isRadiusAxisCateogry ? 0 : -1,
	                    categoryAxesModels: categoryAxesModels
	                };
	            },
	            geo: function (data, seriesModel, ecModel) {
	                // TODO Region
	                // 多个散点图系列在同一个地区的时候
	                return {
	                    dimensions: completeDimensions([
	                        { name: 'lng' },
	                        { name: 'lat' }
	                    ], data, [
	                        'lng',
	                        'lat',
	                        'value'
	                    ])
	                };
	            }
	        };
	    function createNameList(result, data) {
	        var nameList = [];
	        var categoryDim = result && result.dimensions[result.categoryIndex];
	        var categoryAxisModel;
	        if (categoryDim) {
	            categoryAxisModel = result.categoryAxesModels[categoryDim.name];
	        }
	        if (categoryAxisModel) {
	            // FIXME Two category axis
	            var categories = categoryAxisModel.getCategories();
	            if (categories) {
	                var dataLen = data.length;
	                // Ordered data is given explicitly like
	                // [[3, 0.2], [1, 0.3], [2, 0.15]]
	                // or given scatter data,
	                // pick the category
	                if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                    nameList = [];
	                    for (var i = 0; i < dataLen; i++) {
	                        nameList[i] = categories[data[i][result.categoryIndex || 0]];
	                    }
	                } else {
	                    nameList = categories.slice(0);
	                }
	            }
	        }
	        return nameList;
	    }
	    return createListFromArray;
	});
	define('echarts/data/helper/completeDimensions', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    /**
	     * Complete the dimensions array guessed from the data structure.
	     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	     * @param  {Array.<string>} defaultNames    Default names to fill not necessary dimensions, like ['value']
	     * @param  {string} extraPrefix             Prefix of name when filling the left dimensions.
	     * @return {Array.<string>}
	     */
	    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	        if (!data) {
	            return dimensions;
	        }
	        var value0 = retrieveValue(data[0]);
	        var dimSize = zrUtil.isArray(value0) && value0.length || 1;
	        defaultNames = defaultNames || [];
	        extraPrefix = extraPrefix || 'extra';
	        for (var i = 0; i < dimSize; i++) {
	            if (!dimensions[i]) {
	                var name = defaultNames[i] || extraPrefix + (i - defaultNames.length);
	                dimensions[i] = guessOrdinal(data, i) ? {
	                    type: 'ordinal',
	                    name: name
	                } : name;
	            }
	        }
	        return dimensions;
	    }
	    // The rule should not be complex, otherwise user might not
	    // be able to known where the data is wrong.
	    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {
	            for (var i = 0, len = data.length; i < len; i++) {
	                var value = retrieveValue(data[i]);
	                if (!zrUtil.isArray(value)) {
	                    return false;
	                }
	                var value = value[dimIndex];
	                if (value != null && isFinite(value)) {
	                    return false;
	                } else if (zrUtil.isString(value) && value !== '-') {
	                    return true;
	                }
	            }
	            return false;
	        };
	    function retrieveValue(o) {
	        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value : o;
	    }
	    return completeDimensions;
	});
	define('echarts/data/DataDiffer', ['require'], function (require) {
	    'use strict';
	    function defaultKeyGetter(item) {
	        return item;
	    }
	    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	        this._old = oldArr;
	        this._new = newArr;
	        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	        this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	    }
	    DataDiffer.prototype = {
	        constructor: DataDiffer,
	        add: function (func) {
	            this._add = func;
	            return this;
	        },
	        update: function (func) {
	            this._update = func;
	            return this;
	        },
	        remove: function (func) {
	            this._remove = func;
	            return this;
	        },
	        execute: function () {
	            var oldArr = this._old;
	            var newArr = this._new;
	            var oldKeyGetter = this._oldKeyGetter;
	            var newKeyGetter = this._newKeyGetter;
	            var oldDataIndexMap = {};
	            var newDataIndexMap = {};
	            var oldDataKeyArr = [];
	            var newDataKeyArr = [];
	            var i;
	            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);
	            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);
	            // Travel by inverted order to make sure order consistency
	            // when duplicate keys exists (consider newDataIndex.pop() below).
	            // For performance consideration, these code below do not look neat.
	            for (i = 0; i < oldArr.length; i++) {
	                var key = oldDataKeyArr[i];
	                var idx = newDataIndexMap[key];
	                // idx can never be empty array here. see 'set null' logic below.
	                if (idx != null) {
	                    // Consider there is duplicate key (for example, use dataItem.name as key).
	                    // We should make sure every item in newArr and oldArr can be visited.
	                    var len = idx.length;
	                    if (len) {
	                        len === 1 && (newDataIndexMap[key] = null);
	                        idx = idx.unshift();
	                    } else {
	                        newDataIndexMap[key] = null;
	                    }
	                    this._update && this._update(idx, i);
	                } else {
	                    this._remove && this._remove(i);
	                }
	            }
	            for (var i = 0; i < newDataKeyArr.length; i++) {
	                var key = newDataKeyArr[i];
	                if (newDataIndexMap.hasOwnProperty(key)) {
	                    var idx = newDataIndexMap[key];
	                    if (idx == null) {
	                        continue;
	                    }
	                    // idx can never be empty array here. see 'set null' logic above.
	                    if (!idx.length) {
	                        this._add && this._add(idx);
	                    } else {
	                        for (var j = 0, len = idx.length; j < len; j++) {
	                            this._add && this._add(idx[j]);
	                        }
	                    }
	                }
	            }
	        }
	    };
	    function initIndexMap(arr, map, keyArr, keyGetter) {
	        for (var i = 0; i < arr.length; i++) {
	            var key = keyGetter(arr[i], i);
	            var existence = map[key];
	            if (existence == null) {
	                keyArr.push(key);
	                map[key] = i;
	            } else {
	                if (!existence.length) {
	                    map[key] = existence = [existence];
	                }
	                existence.push(i);
	            }
	        }
	    }
	    return DataDiffer;
	});
	define('echarts/chart/bar/barItemStyle', ['require', '../../model/mixin/makeStyleMapper'], function (require) {
	    var getBarItemStyle = require('../../model/mixin/makeStyleMapper')([
	            [
	                'fill',
	                'color'
	            ],
	            [
	                'stroke',
	                'borderColor'
	            ],
	            [
	                'lineWidth',
	                'borderWidth'
	            ],
	            [
	                'stroke',
	                'barBorderColor'
	            ],
	            [
	                'lineWidth',
	                'barBorderWidth'
	            ],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]);
	    return {
	        getBarItemStyle: function (excludes) {
	            var style = getBarItemStyle.call(this, excludes);
	            if (this.getBorderLineDash) {
	                var lineDash = this.getBorderLineDash();
	                lineDash && (style.lineDash = lineDash);
	            }
	            return style;
	        }
	    };
	});
	define('zrender/animation/Animator', ['require', './Clip', '../tool/color', '../core/util'], function (require) {
	    var Clip = require('./Clip');
	    var color = require('../tool/color');
	    var util = require('../core/util');
	    var isArrayLike = util.isArrayLike;
	    var arraySlice = Array.prototype.slice;
	    function defaultGetter(target, key) {
	        return target[key];
	    }
	    function defaultSetter(target, key, value) {
	        target[key] = value;
	    }
	    /**
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} percent
	     * @return {number}
	     */
	    function interpolateNumber(p0, p1, percent) {
	        return (p1 - p0) * percent + p0;
	    }
	    /**
	     * @param  {string} p0
	     * @param  {string} p1
	     * @param  {number} percent
	     * @return {string}
	     */
	    function interpolateString(p0, p1, percent) {
	        return percent > 0.5 ? p1 : p0;
	    }
	    /**
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {number} percent
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function interpolateArray(p0, p1, percent, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = interpolateNumber(p0[i], p1[i], percent);
	            }
	        } else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	                }
	            }
	        }
	    }
	    // arr0 is source array, arr1 is target array.
	    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	    function fillArr(arr0, arr1, arrDim) {
	        var arr0Len = arr0.length;
	        var arr1Len = arr1.length;
	        if (arr0Len !== arr1Len) {
	            // FIXME Not work for TypedArray
	            var isPreviousLarger = arr0Len > arr1Len;
	            if (isPreviousLarger) {
	                // Cut the previous
	                arr0.length = arr1Len;
	            } else {
	                // Fill the previous
	                for (var i = arr0Len; i < arr1Len; i++) {
	                    arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	                }
	            }
	        }
	        // Handling NaN value
	        var len2 = arr0[0] && arr0[0].length;
	        for (var i = 0; i < arr0.length; i++) {
	            if (arrDim === 1) {
	                if (isNaN(arr0[i])) {
	                    arr0[i] = arr1[i];
	                }
	            } else {
	                for (var j = 0; j < len2; j++) {
	                    if (isNaN(arr0[i][j])) {
	                        arr0[i][j] = arr1[i][j];
	                    }
	                }
	            }
	        }
	    }
	    /**
	     * @param  {Array} arr0
	     * @param  {Array} arr1
	     * @param  {number} arrDim
	     * @return {boolean}
	     */
	    function isArraySame(arr0, arr1, arrDim) {
	        if (arr0 === arr1) {
	            return true;
	        }
	        var len = arr0.length;
	        if (len !== arr1.length) {
	            return false;
	        }
	        if (arrDim === 1) {
	            for (var i = 0; i < len; i++) {
	                if (arr0[i] !== arr1[i]) {
	                    return false;
	                }
	            }
	        } else {
	            var len2 = arr0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    if (arr0[i][j] !== arr1[i][j]) {
	                        return false;
	                    }
	                }
	            }
	        }
	        return true;
	    }
	    /**
	     * Catmull Rom interpolate array
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {Array} p2
	     * @param  {Array} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	            }
	        } else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	                }
	            }
	        }
	    }
	    /**
	     * Catmull Rom interpolate number
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @return {number}
	     */
	    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	    }
	    function cloneValue(value) {
	        if (isArrayLike(value)) {
	            var len = value.length;
	            if (isArrayLike(value[0])) {
	                var ret = [];
	                for (var i = 0; i < len; i++) {
	                    ret.push(arraySlice.call(value[i]));
	                }
	                return ret;
	            }
	            return arraySlice.call(value);
	        }
	        return value;
	    }
	    function rgba2String(rgba) {
	        rgba[0] = Math.floor(rgba[0]);
	        rgba[1] = Math.floor(rgba[1]);
	        rgba[2] = Math.floor(rgba[2]);
	        return 'rgba(' + rgba.join(',') + ')';
	    }
	    function createTrackClip(animator, easing, oneTrackDone, keyframes, propName) {
	        var getter = animator._getter;
	        var setter = animator._setter;
	        var useSpline = easing === 'spline';
	        var trackLen = keyframes.length;
	        if (!trackLen) {
	            return;
	        }
	        // Guess data type
	        var firstVal = keyframes[0].value;
	        var isValueArray = isArrayLike(firstVal);
	        var isValueColor = false;
	        var isValueString = false;
	        // For vertices morphing
	        var arrDim = isValueArray && isArrayLike(firstVal[0]) ? 2 : 1;
	        var trackMaxTime;
	        // Sort keyframe as ascending
	        keyframes.sort(function (a, b) {
	            return a.time - b.time;
	        });
	        trackMaxTime = keyframes[trackLen - 1].time;
	        // Percents of each keyframe
	        var kfPercents = [];
	        // Value of each keyframe
	        var kfValues = [];
	        var prevValue = keyframes[0].value;
	        var isAllValueEqual = true;
	        for (var i = 0; i < trackLen; i++) {
	            kfPercents.push(keyframes[i].time / trackMaxTime);
	            // Assume value is a color when it is a string
	            var value = keyframes[i].value;
	            // Check if value is equal, deep check if value is array
	            if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	                isAllValueEqual = false;
	            }
	            prevValue = value;
	            // Try converting a string to a color array
	            if (typeof value == 'string') {
	                var colorArray = color.parse(value);
	                if (colorArray) {
	                    value = colorArray;
	                    isValueColor = true;
	                } else {
	                    isValueString = true;
	                }
	            }
	            kfValues.push(value);
	        }
	        if (isAllValueEqual) {
	            return;
	        }
	        var lastValue = kfValues[trackLen - 1];
	        // Polyfill array and NaN value
	        for (var i = 0; i < trackLen - 1; i++) {
	            if (isValueArray) {
	                fillArr(kfValues[i], lastValue, arrDim);
	            } else {
	                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	                    kfValues[i] = lastValue;
	                }
	            }
	        }
	        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);
	        // Cache the key of last frame to speed up when
	        // animation playback is sequency
	        var lastFrame = 0;
	        var lastFramePercent = 0;
	        var start;
	        var w;
	        var p0;
	        var p1;
	        var p2;
	        var p3;
	        if (isValueColor) {
	            var rgba = [
	                    0,
	                    0,
	                    0,
	                    0
	                ];
	        }
	        var onframe = function (target, percent) {
	            // Find the range keyframes
	            // kf1-----kf2---------current--------kf3
	            // find kf2 and kf3 and do interpolation
	            var frame;
	            if (percent < lastFramePercent) {
	                // Start from next key
	                // PENDING start from lastFrame ?
	                start = Math.min(lastFrame + 1, trackLen - 1);
	                for (frame = start; frame >= 0; frame--) {
	                    if (kfPercents[frame] <= percent) {
	                        break;
	                    }
	                }
	                // PENDING really need to do this ?
	                frame = Math.min(frame, trackLen - 2);
	            } else {
	                for (frame = lastFrame; frame < trackLen; frame++) {
	                    if (kfPercents[frame] > percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame - 1, trackLen - 2);
	            }
	            lastFrame = frame;
	            lastFramePercent = percent;
	            var range = kfPercents[frame + 1] - kfPercents[frame];
	            if (range === 0) {
	                return;
	            } else {
	                w = (percent - kfPercents[frame]) / range;
	            }
	            if (useSpline) {
	                p1 = kfValues[frame];
	                p0 = kfValues[frame === 0 ? frame : frame - 1];
	                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	                if (isValueArray) {
	                    catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	                } else {
	                    var value;
	                    if (isValueColor) {
	                        value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	                        value = rgba2String(rgba);
	                    } else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(p1, p2, w);
	                    } else {
	                        value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	                    }
	                    setter(target, propName, value);
	                }
	            } else {
	                if (isValueArray) {
	                    interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	                } else {
	                    var value;
	                    if (isValueColor) {
	                        interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	                        value = rgba2String(rgba);
	                    } else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                    } else {
	                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    setter(target, propName, value);
	                }
	            }
	        };
	        var clip = new Clip({
	                target: animator._target,
	                life: trackMaxTime,
	                loop: animator._loop,
	                delay: animator._delay,
	                onframe: onframe,
	                ondestroy: oneTrackDone
	            });
	        if (easing && easing !== 'spline') {
	            clip.easing = easing;
	        }
	        return clip;
	    }
	    /**
	     * @alias module:zrender/animation/Animator
	     * @constructor
	     * @param {Object} target
	     * @param {boolean} loop
	     * @param {Function} getter
	     * @param {Function} setter
	     */
	    var Animator = function (target, loop, getter, setter) {
	        this._tracks = {};
	        this._target = target;
	        this._loop = loop || false;
	        this._getter = getter || defaultGetter;
	        this._setter = setter || defaultSetter;
	        this._clipCount = 0;
	        this._delay = 0;
	        this._doneList = [];
	        this._onframeList = [];
	        this._clipList = [];
	    };
	    Animator.prototype = {
	        when: function (time, props) {
	            var tracks = this._tracks;
	            for (var propName in props) {
	                if (!tracks[propName]) {
	                    tracks[propName] = [];
	                    // Invalid value
	                    var value = this._getter(this._target, propName);
	                    if (value == null) {
	                        // zrLog('Invalid property ' + propName);
	                        continue;
	                    }
	                    // If time is 0
	                    //  Then props is given initialize value
	                    // Else
	                    //  Initialize value from current prop value
	                    if (time !== 0) {
	                        tracks[propName].push({
	                            time: 0,
	                            value: cloneValue(value)
	                        });
	                    }
	                }
	                tracks[propName].push({
	                    time: time,
	                    value: props[propName]
	                });
	            }
	            return this;
	        },
	        during: function (callback) {
	            this._onframeList.push(callback);
	            return this;
	        },
	        _doneCallback: function () {
	            // Clear all tracks
	            this._tracks = {};
	            // Clear all clips
	            this._clipList.length = 0;
	            var doneList = this._doneList;
	            var len = doneList.length;
	            for (var i = 0; i < len; i++) {
	                doneList[i].call(this);
	            }
	        },
	        start: function (easing) {
	            var self = this;
	            var clipCount = 0;
	            var oneTrackDone = function () {
	                clipCount--;
	                if (!clipCount) {
	                    self._doneCallback();
	                }
	            };
	            var lastClip;
	            for (var propName in this._tracks) {
	                var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName);
	                if (clip) {
	                    this._clipList.push(clip);
	                    clipCount++;
	                    // If start after added to animation
	                    if (this.animation) {
	                        this.animation.addClip(clip);
	                    }
	                    lastClip = clip;
	                }
	            }
	            // Add during callback on the last clip
	            if (lastClip) {
	                var oldOnFrame = lastClip.onframe;
	                lastClip.onframe = function (target, percent) {
	                    oldOnFrame(target, percent);
	                    for (var i = 0; i < self._onframeList.length; i++) {
	                        self._onframeList[i](target, percent);
	                    }
	                };
	            }
	            if (!clipCount) {
	                this._doneCallback();
	            }
	            return this;
	        },
	        stop: function (forwardToLast) {
	            var clipList = this._clipList;
	            var animation = this.animation;
	            for (var i = 0; i < clipList.length; i++) {
	                var clip = clipList[i];
	                if (forwardToLast) {
	                    // Move to last frame before stop
	                    clip.onframe(this._target, 1);
	                }
	                animation && animation.removeClip(clip);
	            }
	            clipList.length = 0;
	        },
	        delay: function (time) {
	            this._delay = time;
	            return this;
	        },
	        done: function (cb) {
	            if (cb) {
	                this._doneList.push(cb);
	            }
	            return this;
	        },
	        getClips: function () {
	            return this._clipList;
	        }
	    };
	    return Animator;
	});
	define('zrender/animation/Clip', ['require', './easing'], function (require) {
	    var easingFuncs = require('./easing');
	    function Clip(options) {
	        this._target = options.target;
	        // 生命周期
	        this._life = options.life || 1000;
	        // 延时
	        this._delay = options.delay || 0;
	        // 开始时间
	        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	        this._initialized = false;
	        // 是否循环
	        this.loop = options.loop == null ? false : options.loop;
	        this.gap = options.gap || 0;
	        this.easing = options.easing || 'Linear';
	        this.onframe = options.onframe;
	        this.ondestroy = options.ondestroy;
	        this.onrestart = options.onrestart;
	    }
	    Clip.prototype = {
	        constructor: Clip,
	        step: function (time) {
	            // Set startTime on first step, or _startTime may has milleseconds different between clips
	            // PENDING
	            if (!this._initialized) {
	                this._startTime = new Date().getTime() + this._delay;
	                this._initialized = true;
	            }
	            var percent = (time - this._startTime) / this._life;
	            // 还没开始
	            if (percent < 0) {
	                return;
	            }
	            percent = Math.min(percent, 1);
	            var easing = this.easing;
	            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	            var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
	            this.fire('frame', schedule);
	            // 结束
	            if (percent == 1) {
	                if (this.loop) {
	                    this.restart();
	                    // 重新开始周期
	                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                    return 'restart';
	                }
	                // 动画完成将这个控制器标识为待删除
	                // 在Animation.update中进行批量删除
	                this._needsRemove = true;
	                return 'destroy';
	            }
	            return null;
	        },
	        restart: function () {
	            var time = new Date().getTime();
	            var remainder = (time - this._startTime) % this._life;
	            this._startTime = new Date().getTime() - remainder + this.gap;
	            this._needsRemove = false;
	        },
	        fire: function (eventType, arg) {
	            eventType = 'on' + eventType;
	            if (this[eventType]) {
	                this[eventType](this._target, arg);
	            }
	        }
	    };
	    return Clip;
	});
	define('zrender/animation/easing', [], function () {
	    var easing = {
	            linear: function (k) {
	                return k;
	            },
	            quadraticIn: function (k) {
	                return k * k;
	            },
	            quadraticOut: function (k) {
	                return k * (2 - k);
	            },
	            quadraticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k;
	                }
	                return -0.5 * (--k * (k - 2) - 1);
	            },
	            cubicIn: function (k) {
	                return k * k * k;
	            },
	            cubicOut: function (k) {
	                return --k * k * k + 1;
	            },
	            cubicInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k + 2);
	            },
	            quarticIn: function (k) {
	                return k * k * k * k;
	            },
	            quarticOut: function (k) {
	                return 1 - --k * k * k * k;
	            },
	            quarticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k;
	                }
	                return -0.5 * ((k -= 2) * k * k * k - 2);
	            },
	            quinticIn: function (k) {
	                return k * k * k * k * k;
	            },
	            quinticOut: function (k) {
	                return --k * k * k * k * k + 1;
	            },
	            quinticInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return 0.5 * k * k * k * k * k;
	                }
	                return 0.5 * ((k -= 2) * k * k * k * k + 2);
	            },
	            sinusoidalIn: function (k) {
	                return 1 - Math.cos(k * Math.PI / 2);
	            },
	            sinusoidalOut: function (k) {
	                return Math.sin(k * Math.PI / 2);
	            },
	            sinusoidalInOut: function (k) {
	                return 0.5 * (1 - Math.cos(Math.PI * k));
	            },
	            exponentialIn: function (k) {
	                return k === 0 ? 0 : Math.pow(1024, k - 1);
	            },
	            exponentialOut: function (k) {
	                return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	            },
	            exponentialInOut: function (k) {
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if ((k *= 2) < 1) {
	                    return 0.5 * Math.pow(1024, k - 1);
	                }
	                return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	            },
	            circularIn: function (k) {
	                return 1 - Math.sqrt(1 - k * k);
	            },
	            circularOut: function (k) {
	                return Math.sqrt(1 - --k * k);
	            },
	            circularInOut: function (k) {
	                if ((k *= 2) < 1) {
	                    return -0.5 * (Math.sqrt(1 - k * k) - 1);
	                }
	                return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	            },
	            elasticIn: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1;
	                    s = p / 4;
	                } else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	            },
	            elasticOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1;
	                    s = p / 4;
	                } else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	            },
	            elasticInOut: function (k) {
	                var s;
	                var a = 0.1;
	                var p = 0.4;
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	                if (!a || a < 1) {
	                    a = 1;
	                    s = p / 4;
	                } else {
	                    s = p * Math.asin(1 / a) / (2 * Math.PI);
	                }
	                if ((k *= 2) < 1) {
	                    return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	                }
	                return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	            },
	            backIn: function (k) {
	                var s = 1.70158;
	                return k * k * ((s + 1) * k - s);
	            },
	            backOut: function (k) {
	                var s = 1.70158;
	                return --k * k * ((s + 1) * k + s) + 1;
	            },
	            backInOut: function (k) {
	                var s = 1.70158 * 1.525;
	                if ((k *= 2) < 1) {
	                    return 0.5 * (k * k * ((s + 1) * k - s));
	                }
	                return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	            },
	            bounceIn: function (k) {
	                return 1 - easing.bounceOut(1 - k);
	            },
	            bounceOut: function (k) {
	                if (k < 1 / 2.75) {
	                    return 7.5625 * k * k;
	                } else if (k < 2 / 2.75) {
	                    return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	                } else if (k < 2.5 / 2.75) {
	                    return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	                } else {
	                    return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	                }
	            },
	            bounceInOut: function (k) {
	                if (k < 0.5) {
	                    return easing.bounceIn(k * 2) * 0.5;
	                }
	                return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	            }
	        };
	    return easing;
	});
	define('zrender/contain/util', ['require'], function (require) {
	    var PI2 = Math.PI * 2;
	    return {
	        normalizeRadian: function (angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	    };
	});
	define('zrender/contain/cubic', ['require', '../core/curve'], function (require) {
	    var curve = require('../core/curve');
	    return {
	        containStroke: function (x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	                return false;
	            }
	            var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	            return d <= _l / 2;
	        }
	    };
	});
	define('zrender/contain/line', [], function () {
	    return {
	        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	                return false;
	            }
	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	            } else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	    };
	});
	define('zrender/contain/quadratic', ['require', '../core/curve'], function (require) {
	    var curve = require('../core/curve');
	    return {
	        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	                return false;
	            }
	            var d = curve.quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	            return d <= _l / 2;
	        }
	    };
	});
	define('zrender/contain/arc', ['require', './util'], function (require) {
	    var normalizeRadian = require('./util').normalizeRadian;
	    var PI2 = Math.PI * 2;
	    return {
	        containStroke: function (cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);
	            if (d - _l > r || d + _l < r) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) % PI2 < 0.0001) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }
	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	        }
	    };
	});
	define('zrender/contain/windingLine', [], function () {
	    return function windingLine(x0, y0, x1, y1, x, y) {
	        if (y > y0 && y > y1 || y < y0 && y < y1) {
	            return 0;
	        }
	        // Ignore horizontal line
	        if (y1 === y0) {
	            return 0;
	        }
	        var dir = y1 < y0 ? 1 : -1;
	        var t = (y - y0) / (y1 - y0);
	        // Avoid winding error when intersection point is the connect point of two line of polygon
	        if (t === 1 || t === 0) {
	            dir = y1 < y0 ? 0.5 : -0.5;
	        }
	        var x_ = t * (x1 - x0) + x0;
	        return x_ > x ? dir : 0;
	    };
	});
	define('zrender/core/LRU', ['require'], function (require) {
	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     */
	    var LinkedList = function () {
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.head = null;
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.tail = null;
	        this._len = 0;
	    };
	    var linkedListProto = LinkedList.prototype;
	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {module:zrender/core/LRU~Entry}
	     */
	    linkedListProto.insert = function (val) {
	        var entry = new Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };
	    /**
	     * Insert an entry at the tail
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.insertEntry = function (entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        } else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            this.tail = entry;
	        }
	        this._len++;
	    };
	    /**
	     * Remove entry.
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.remove = function (entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        } else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        } else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._len--;
	    };
	    /**
	     * @return {number}
	     */
	    linkedListProto.len = function () {
	        return this._len;
	    };
	    /**
	     * @constructor
	     * @param {} val
	     */
	    var Entry = function (val) {
	        /**
	         * @type {}
	         */
	        this.value = val;
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.next;
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.prev;
	    };
	    /**
	     * LRU Cache
	     * @constructor
	     * @alias module:zrender/core/LRU
	     */
	    var LRU = function (maxSize) {
	        this._list = new LinkedList();
	        this._map = {};
	        this._maxSize = maxSize || 10;
	    };
	    var LRUProto = LRU.prototype;
	    /**
	     * @param  {string} key
	     * @param  {} value
	     */
	    LRUProto.put = function (key, value) {
	        var list = this._list;
	        var map = this._map;
	        if (map[key] == null) {
	            var len = list.len();
	            if (len >= this._maxSize && len > 0) {
	                // Remove the least recently used
	                var leastUsedEntry = list.head;
	                list.remove(leastUsedEntry);
	                delete map[leastUsedEntry.key];
	            }
	            var entry = list.insert(value);
	            entry.key = key;
	            map[key] = entry;
	        }
	    };
	    /**
	     * @param  {string} key
	     * @return {}
	     */
	    LRUProto.get = function (key) {
	        var entry = this._map[key];
	        var list = this._list;
	        if (entry != null) {
	            // Put the latest used entry in the tail
	            if (entry !== list.tail) {
	                list.remove(entry);
	                list.insertEntry(entry);
	            }
	            return entry.value;
	        }
	    };
	    /**
	     * Clear the cache
	     */
	    LRUProto.clear = function () {
	        this._list.clear();
	        this._map = {};
	    };
	    return LRU;
	});
	define('zrender/graphic/helper/poly', ['require', './smoothSpline', './smoothBezier'], function (require) {
	    var smoothSpline = require('./smoothSpline');
	    var smoothBezier = require('./smoothBezier');
	    return {
	        buildPath: function (ctx, shape, closePath) {
	            var points = shape.points;
	            var smooth = shape.smooth;
	            if (points && points.length >= 2) {
	                if (smooth && smooth !== 'spline') {
	                    var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
	                    ctx.moveTo(points[0][0], points[0][1]);
	                    var len = points.length;
	                    for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                        var cp1 = controlPoints[i * 2];
	                        var cp2 = controlPoints[i * 2 + 1];
	                        var p = points[(i + 1) % len];
	                        ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	                    }
	                } else {
	                    if (smooth === 'spline') {
	                        points = smoothSpline(points, closePath);
	                    }
	                    ctx.moveTo(points[0][0], points[0][1]);
	                    for (var i = 1, l = points.length; i < l; i++) {
	                        ctx.lineTo(points[i][0], points[i][1]);
	                    }
	                }
	                closePath && ctx.closePath();
	            }
	        }
	    };
	});
	define('zrender/Handler', ['require', './core/util', './mixin/Draggable', './mixin/Eventful'], function (require) {
	    'use strict';
	    var util = require('./core/util');
	    var Draggable = require('./mixin/Draggable');
	    var Eventful = require('./mixin/Eventful');
	    function makeEventPacket(eveType, target, event) {
	        return {
	            type: eveType,
	            event: event,
	            target: target,
	            cancelBubble: false,
	            offsetX: event.zrX,
	            offsetY: event.zrY,
	            gestureEvent: event.gestureEvent,
	            pinchX: event.pinchX,
	            pinchY: event.pinchY,
	            pinchScale: event.pinchScale,
	            wheelDelta: event.zrDelta
	        };
	    }
	    function EmptyProxy() {
	    }
	    EmptyProxy.prototype.dispose = function () {
	    };
	    var handlerNames = [
	            'click',
	            'dblclick',
	            'mousewheel',
	            'mouseout',
	            'mouseup',
	            'mousedown',
	            'mousemove'
	        ];
	    /**
	     * @alias module:zrender/Handler
	     * @constructor
	     * @extends module:zrender/mixin/Eventful
	     * @param {HTMLElement} root Main HTML element for painting.
	     * @param {module:zrender/Storage} storage Storage instance.
	     * @param {module:zrender/Painter} painter Painter instance.
	     */
	    var Handler = function (storage, painter, proxy) {
	        Eventful.call(this);
	        this.storage = storage;
	        this.painter = painter;
	        proxy = proxy || new EmptyProxy();
	        /**
	         * Proxy of event. can be Dom, WebGLSurface, etc.
	         */
	        this.proxy = proxy;
	        // Attach handler
	        proxy.handler = this;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._hovered;
	        /**
	         * @private
	         * @type {Date}
	         */
	        this._lastTouchMoment;
	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastX;
	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastY;
	        Draggable.call(this);
	        util.each(handlerNames, function (name) {
	            proxy.on && proxy.on(name, this[name], this);
	        }, this);
	    };
	    Handler.prototype = {
	        constructor: Handler,
	        mousemove: function (event) {
	            var x = event.zrX;
	            var y = event.zrY;
	            var hovered = this.findHover(x, y, null);
	            var lastHovered = this._hovered;
	            var proxy = this.proxy;
	            this._hovered = hovered;
	            proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');
	            // Mouse out on previous hovered element
	            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	                this.dispatchToElement(lastHovered, 'mouseout', event);
	            }
	            // Mouse moving on one element
	            this.dispatchToElement(hovered, 'mousemove', event);
	            // Mouse over on a new element
	            if (hovered && hovered !== lastHovered) {
	                this.dispatchToElement(hovered, 'mouseover', event);
	            }
	        },
	        mouseout: function (event) {
	            this.dispatchToElement(this._hovered, 'mouseout', event);
	            this.trigger('globalout', { event: event });
	        },
	        resize: function (event) {
	            this._hovered = null;
	        },
	        dispatch: function (eventName, eventArgs) {
	            var handler = this[eventName];
	            handler && handler.call(this, eventArgs);
	        },
	        dispose: function () {
	            this.proxy.dispose();
	            this.storage = this.proxy = this.painter = null;
	        },
	        setCursorStyle: function (cursorStyle) {
	            var proxy = this.proxy;
	            proxy.setCursor && proxy.setCursor(cursorStyle);
	        },
	        dispatchToElement: function (targetEl, eventName, event) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = makeEventPacket(eventName, targetEl, event);
	            var el = targetEl;
	            while (el) {
	                el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	                el.trigger(eventName, eventPacket);
	                el = el.parent;
	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }
	            if (!eventPacket.cancelBubble) {
	                // 冒泡到顶级 zrender 对象
	                this.trigger(eventName, eventPacket);
	                // 分发事件到用户自定义层
	                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	                this.painter && this.painter.eachOtherLayer(function (layer) {
	                    if (typeof layer[eventHandler] == 'function') {
	                        layer[eventHandler].call(layer, eventPacket);
	                    }
	                    if (layer.trigger) {
	                        layer.trigger(eventName, eventPacket);
	                    }
	                });
	            }
	        },
	        findHover: function (x, y, exclude) {
	            var list = this.storage.getDisplayList();
	            for (var i = list.length - 1; i >= 0; i--) {
	                if (!list[i].silent && list[i] !== exclude && !list[i].ignore && isHover(list[i], x, y)) {
	                    return list[i];
	                }
	            }
	        }
	    };
	    // Common handlers
	    util.each([
	        'click',
	        'mousedown',
	        'mouseup',
	        'mousewheel',
	        'dblclick'
	    ], function (name) {
	        Handler.prototype[name] = function (event) {
	            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	            var hovered = this.findHover(event.zrX, event.zrY, null);
	            if (name === 'mousedown') {
	                this._downel = hovered;
	                // In case click triggered before mouseup
	                this._upel = hovered;
	            } else if (name === 'mosueup') {
	                this._upel = hovered;
	            } else if (name === 'click') {
	                if (this._downel !== this._upel) {
	                    return;
	                }
	            }
	            this.dispatchToElement(hovered, name, event);
	        };
	    });
	    function isHover(displayable, x, y) {
	        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	            var el = displayable;
	            while (el) {
	                // If ancestor is silent or clipped by ancestor
	                if (el.silent || el.clipPath && !el.clipPath.contain(x, y)) {
	                    return false;
	                }
	                el = el.parent;
	            }
	            return true;
	        }
	        return false;
	    }
	    util.mixin(Handler, Eventful);
	    util.mixin(Handler, Draggable);
	    return Handler;
	});
	define('zrender/Storage', ['require', './core/util', './core/env', './container/Group', './core/timsort'], function (require) {
	    'use strict';
	    var util = require('./core/util');
	    var env = require('./core/env');
	    var Group = require('./container/Group');
	    // Use timsort because in most case elements are partially sorted
	    // https://jsfiddle.net/pissang/jr4x7mdm/8/
	    var timsort = require('./core/timsort');
	    function shapeCompareFunc(a, b) {
	        if (a.zlevel === b.zlevel) {
	            if (a.z === b.z) {
	                // if (a.z2 === b.z2) {
	                //     // FIXME Slow has renderidx compare
	                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	                //     return a.__renderidx - b.__renderidx;
	                // }
	                return a.z2 - b.z2;
	            }
	            return a.z - b.z;
	        }
	        return a.zlevel - b.zlevel;
	    }
	    /**
	     * 内容仓库 (M)
	     * @alias module:zrender/Storage
	     * @constructor
	     */
	    var Storage = function () {
	        // 所有常规形状，id索引的map
	        this._elements = {};
	        this._roots = [];
	        this._displayList = [];
	        this._displayListLen = 0;
	    };
	    Storage.prototype = {
	        constructor: Storage,
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._roots.length; i++) {
	                this._roots[i].traverse(cb, context);
	            }
	        },
	        getDisplayList: function (update, includeIgnore) {
	            includeIgnore = includeIgnore || false;
	            if (update) {
	                this.updateDisplayList(includeIgnore);
	            }
	            return this._displayList;
	        },
	        updateDisplayList: function (includeIgnore) {
	            this._displayListLen = 0;
	            var roots = this._roots;
	            var displayList = this._displayList;
	            for (var i = 0, len = roots.length; i < len; i++) {
	                this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	            }
	            displayList.length = this._displayListLen;
	            // for (var i = 0, len = displayList.length; i < len; i++) {
	            //     displayList[i].__renderidx = i;
	            // }
	            // displayList.sort(shapeCompareFunc);
	            env.canvasSupported && timsort(displayList, shapeCompareFunc);
	        },
	        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
	            if (el.ignore && !includeIgnore) {
	                return;
	            }
	            el.beforeUpdate();
	            if (el.__dirty) {
	                el.update();
	            }
	            el.afterUpdate();
	            var clipPath = el.clipPath;
	            if (clipPath) {
	                // clipPath 的变换是基于 group 的变换
	                clipPath.parent = el;
	                clipPath.updateTransform();
	                // FIXME 效率影响
	                if (clipPaths) {
	                    clipPaths = clipPaths.slice();
	                    clipPaths.push(clipPath);
	                } else {
	                    clipPaths = [clipPath];
	                }
	            }
	            if (el.isGroup) {
	                var children = el._children;
	                for (var i = 0; i < children.length; i++) {
	                    var child = children[i];
	                    // Force to mark as dirty if group is dirty
	                    // FIXME __dirtyPath ?
	                    if (el.__dirty) {
	                        child.__dirty = true;
	                    }
	                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	                }
	                // Mark group clean here
	                el.__dirty = false;
	            } else {
	                el.__clipPaths = clipPaths;
	                this._displayList[this._displayListLen++] = el;
	            }
	        },
	        addRoot: function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }
	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }
	            this.addToMap(el);
	            this._roots.push(el);
	        },
	        delRoot: function (elId) {
	            if (elId == null) {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }
	                this._elements = {};
	                this._roots = [];
	                this._displayList = [];
	                this._displayListLen = 0;
	                return;
	            }
	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }
	            var el;
	            if (typeof elId == 'string') {
	                el = this._elements[elId];
	            } else {
	                el = elId;
	            }
	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        },
	        addToMap: function (el) {
	            if (el instanceof Group) {
	                el.__storage = this;
	            }
	            el.dirty();
	            this._elements[el.id] = el;
	            return this;
	        },
	        get: function (elId) {
	            return this._elements[elId];
	        },
	        delFromMap: function (elId) {
	            var elements = this._elements;
	            var el = elements[elId];
	            if (el) {
	                delete elements[elId];
	                if (el instanceof Group) {
	                    el.__storage = null;
	                }
	            }
	            return this;
	        },
	        dispose: function () {
	            this._elements = this._renderList = this._roots = null;
	        },
	        displayableSortFunc: shapeCompareFunc
	    };
	    return Storage;
	});
	define('zrender/animation/Animation', ['require', '../core/util', '../core/event', './requestAnimationFrame', './Animator'], function (require) {
	    'use strict';
	    var util = require('../core/util');
	    var Dispatcher = require('../core/event').Dispatcher;
	    var requestAnimationFrame = require('./requestAnimationFrame');
	    var Animator = require('./Animator');
	    /**
	     * @typedef {Object} IZRenderStage
	     * @property {Function} update
	     */
	    /**
	     * @alias module:zrender/animation/Animation
	     * @constructor
	     * @param {Object} [options]
	     * @param {Function} [options.onframe]
	     * @param {IZRenderStage} [options.stage]
	     * @example
	     *     var animation = new Animation();
	     *     var obj = {
	     *         x: 100,
	     *         y: 100
	     *     };
	     *     animation.animate(node.position)
	     *         .when(1000, {
	     *             x: 500,
	     *             y: 500
	     *         })
	     *         .when(2000, {
	     *             x: 100,
	     *             y: 100
	     *         })
	     *         .start('spline');
	     */
	    var Animation = function (options) {
	        options = options || {};
	        this.stage = options.stage || {};
	        this.onframe = options.onframe || function () {
	        };
	        // private properties
	        this._clips = [];
	        this._running = false;
	        this._time = 0;
	        Dispatcher.call(this);
	    };
	    Animation.prototype = {
	        constructor: Animation,
	        addClip: function (clip) {
	            this._clips.push(clip);
	        },
	        addAnimator: function (animator) {
	            animator.animation = this;
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.addClip(clips[i]);
	            }
	        },
	        removeClip: function (clip) {
	            var idx = util.indexOf(this._clips, clip);
	            if (idx >= 0) {
	                this._clips.splice(idx, 1);
	            }
	        },
	        removeAnimator: function (animator) {
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.removeClip(clips[i]);
	            }
	            animator.animation = null;
	        },
	        _update: function () {
	            var time = new Date().getTime();
	            var delta = time - this._time;
	            var clips = this._clips;
	            var len = clips.length;
	            var deferredEvents = [];
	            var deferredClips = [];
	            for (var i = 0; i < len; i++) {
	                var clip = clips[i];
	                var e = clip.step(time);
	                // Throw out the events need to be called after
	                // stage.update, like destroy
	                if (e) {
	                    deferredEvents.push(e);
	                    deferredClips.push(clip);
	                }
	            }
	            // Remove the finished clip
	            for (var i = 0; i < len;) {
	                if (clips[i]._needsRemove) {
	                    clips[i] = clips[len - 1];
	                    clips.pop();
	                    len--;
	                } else {
	                    i++;
	                }
	            }
	            len = deferredEvents.length;
	            for (var i = 0; i < len; i++) {
	                deferredClips[i].fire(deferredEvents[i]);
	            }
	            this._time = time;
	            this.onframe(delta);
	            this.trigger('frame', delta);
	            if (this.stage.update) {
	                this.stage.update();
	            }
	        },
	        start: function () {
	            var self = this;
	            this._running = true;
	            function step() {
	                if (self._running) {
	                    requestAnimationFrame(step);
	                    self._update();
	                }
	            }
	            this._time = new Date().getTime();
	            requestAnimationFrame(step);
	        },
	        stop: function () {
	            this._running = false;
	        },
	        clear: function () {
	            this._clips = [];
	        },
	        animate: function (target, options) {
	            options = options || {};
	            var animator = new Animator(target, options.loop, options.getter, options.setter);
	            return animator;
	        }
	    };
	    util.mixin(Animation, Dispatcher);
	    return Animation;
	});
	define('zrender/dom/HandlerProxy', ['require', '../core/event', '../core/util', '../mixin/Eventful', '../core/env', '../core/GestureMgr'], function (require) {
	    var eventTool = require('../core/event');
	    var zrUtil = require('../core/util');
	    var Eventful = require('../mixin/Eventful');
	    var env = require('../core/env');
	    var GestureMgr = require('../core/GestureMgr');
	    var addEventListener = eventTool.addEventListener;
	    var removeEventListener = eventTool.removeEventListener;
	    var normalizeEvent = eventTool.normalizeEvent;
	    var TOUCH_CLICK_DELAY = 300;
	    var mouseHandlerNames = [
	            'click',
	            'dblclick',
	            'mousewheel',
	            'mouseout',
	            'mouseup',
	            'mousedown',
	            'mousemove'
	        ];
	    var touchHandlerNames = [
	            'touchstart',
	            'touchend',
	            'touchmove'
	        ];
	    function eventNameFix(name) {
	        return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	    }
	    function processGesture(proxy, event, stage) {
	        var gestureMgr = proxy._gestureMgr;
	        stage === 'start' && gestureMgr.clear();
	        var gestureInfo = gestureMgr.recognize(event, proxy.handler.findHover(event.zrX, event.zrY, null), proxy.dom);
	        stage === 'end' && gestureMgr.clear();
	        if (gestureInfo) {
	            // eventTool.stop(event);
	            var type = gestureInfo.type;
	            event.gestureEvent = type;
	            proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);
	        }
	    }
	    /**
	     * Prevent mouse event from being dispatched after Touch Events action
	     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	     * Result: Blocking Mouse Events for 700ms.
	     */
	    function setTouchTimer(instance) {
	        instance._touching = true;
	        clearTimeout(instance._touchTimer);
	        instance._touchTimer = setTimeout(function () {
	            instance._touching = false;
	        }, 700);
	    }
	    function useTouchEvent() {
	        return env.touchEventsSupported;
	    }
	    var domHandlers = {
	            mousemove: function (event) {
	                event = normalizeEvent(this.dom, event);
	                this.trigger('mousemove', event);
	            },
	            mouseout: function (event) {
	                event = normalizeEvent(this.dom, event);
	                var element = event.toElement || event.relatedTarget;
	                if (element != this.dom) {
	                    while (element && element.nodeType != 9) {
	                        // 忽略包含在root中的dom引起的mouseOut
	                        if (element === this.dom) {
	                            return;
	                        }
	                        element = element.parentNode;
	                    }
	                }
	                this.trigger('mouseout', event);
	            },
	            touchstart: function (event) {
	                // Default mouse behaviour should not be disabled here.
	                // For example, page may needs to be slided.
	                event = normalizeEvent(this.dom, event);
	                this._lastTouchMoment = new Date();
	                processGesture(this, event, 'start');
	                // 平板补充一次findHover
	                // this._mobileFindFixed(event);
	                // Trigger mousemove and mousedown
	                domHandlers.mousemove.call(this, event);
	                domHandlers.mousedown.call(this, event);
	                setTouchTimer(this);
	            },
	            touchmove: function (event) {
	                event = normalizeEvent(this.dom, event);
	                processGesture(this, event, 'change');
	                // Mouse move should always be triggered no matter whether
	                // there is gestrue event, because mouse move and pinch may
	                // be used at the same time.
	                domHandlers.mousemove.call(this, event);
	                setTouchTimer(this);
	            },
	            touchend: function (event) {
	                event = normalizeEvent(this.dom, event);
	                processGesture(this, event, 'end');
	                domHandlers.mouseup.call(this, event);
	                // click event should always be triggered no matter whether
	                // there is gestrue event. System click can not be prevented.
	                if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	                    domHandlers.click.call(this, event);
	                }
	                setTouchTimer(this);
	            }
	        };
	    // Common handlers
	    zrUtil.each([
	        'click',
	        'mousedown',
	        'mouseup',
	        'mousewheel',
	        'dblclick'
	    ], function (name) {
	        domHandlers[name] = function (event) {
	            event = normalizeEvent(this.dom, event);
	            this.trigger(name, event);
	        };
	    });
	    /**
	     * 为控制类实例初始化dom 事件处理函数
	     *
	     * @inner
	     * @param {module:zrender/Handler} instance 控制类实例
	     */
	    function initDomHandler(instance) {
	        for (var i = 0; i < touchHandlerNames.length; i++) {
	            var name = touchHandlerNames[i];
	            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	        }
	        for (var i = 0; i < mouseHandlerNames.length; i++) {
	            var name = mouseHandlerNames[i];
	            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	        }
	        function makeMouseHandler(fn, instance) {
	            return function () {
	                if (instance._touching) {
	                    return;
	                }
	                return fn.apply(instance, arguments);
	            };
	        }
	    }
	    function HandlerDomProxy(dom) {
	        Eventful.call(this);
	        this.dom = dom;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._touching = false;
	        /**
	         * @private
	         * @type {number}
	         */
	        this._touchTimer;
	        /**
	         * @private
	         * @type {module:zrender/core/GestureMgr}
	         */
	        this._gestureMgr = new GestureMgr();
	        this._handlers = {};
	        initDomHandler(this);
	        if (useTouchEvent()) {
	            mountHandlers(touchHandlerNames, this);    // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	                                                       // addEventListener(root, 'mouseout', this._mouseoutHandler);
	        }
	        // Considering some devices that both enable touch and mouse event (like MS Surface
	        // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	        // mouse event can not be handle in those devices.
	        mountHandlers(mouseHandlerNames, this);
	        function mountHandlers(handlerNames, instance) {
	            zrUtil.each(handlerNames, function (name) {
	                addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	            }, instance);
	        }
	    }
	    var handlerDomProxyProto = HandlerDomProxy.prototype;
	    handlerDomProxyProto.dispose = function () {
	        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);
	        for (var i = 0; i < handlerNames.length; i++) {
	            var name = handlerNames[i];
	            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	        }
	    };
	    handlerDomProxyProto.setCursor = function (cursorStyle) {
	        this.dom.style.cursor = cursorStyle || 'default';
	    };
	    zrUtil.mixin(HandlerDomProxy, Eventful);
	    return HandlerDomProxy;
	});
	define('zrender/Painter', ['require', './config', './core/util', './core/log', './core/BoundingRect', './core/timsort', './Layer', './animation/requestAnimationFrame', './graphic/Image'], function (require) {
	    'use strict';
	    var config = require('./config');
	    var util = require('./core/util');
	    var log = require('./core/log');
	    var BoundingRect = require('./core/BoundingRect');
	    var timsort = require('./core/timsort');
	    var Layer = require('./Layer');
	    var requestAnimationFrame = require('./animation/requestAnimationFrame');
	    // PENDIGN
	    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.
	    //
	    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.
	    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;
	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }
	    function isLayerValid(layer) {
	        if (!layer) {
	            return false;
	        }
	        if (layer.isBuildin) {
	            return true;
	        }
	        if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	            return false;
	        }
	        return true;
	    }
	    function preProcessLayer(layer) {
	        layer.__unusedCount++;
	    }
	    function postProcessLayer(layer) {
	        if (layer.__unusedCount == 1) {
	            layer.clear();
	        }
	    }
	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var viewRect = new BoundingRect(0, 0, 0, 0);
	    function isDisplayableCulled(el, width, height) {
	        tmpRect.copy(el.getBoundingRect());
	        if (el.transform) {
	            tmpRect.applyTransform(el.transform);
	        }
	        viewRect.width = width;
	        viewRect.height = height;
	        return !tmpRect.intersect(viewRect);
	    }
	    function isClipPathChanged(clipPaths, prevClipPaths) {
	        if (clipPaths == prevClipPaths) {
	            // Can both be null or undefined
	            return false;
	        }
	        if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	            return true;
	        }
	        for (var i = 0; i < clipPaths.length; i++) {
	            if (clipPaths[i] !== prevClipPaths[i]) {
	                return true;
	            }
	        }
	    }
	    function doClip(clipPaths, ctx) {
	        for (var i = 0; i < clipPaths.length; i++) {
	            var clipPath = clipPaths[i];
	            var m;
	            if (clipPath.transform) {
	                m = clipPath.transform;
	                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            }
	            var path = clipPath.path;
	            path.beginPath(ctx);
	            clipPath.buildPath(path, clipPath.shape);
	            ctx.clip();
	            // Transform back
	            if (clipPath.transform) {
	                m = clipPath.invTransform;
	                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            }
	        }
	    }
	    function createRoot(width, height) {
	        var domRoot = document.createElement('div');
	        var domRootStyle = domRoot.style;
	        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domRootStyle.position = 'relative';
	        domRootStyle.overflow = 'hidden';
	        domRootStyle.width = width + 'px';
	        domRootStyle.height = height + 'px';
	        return domRoot;
	    }
	    /**
	     * @alias module:zrender/Painter
	     * @constructor
	     * @param {HTMLElement} root 绘图容器
	     * @param {module:zrender/Storage} storage
	     * @param {Ojbect} opts
	     */
	    var Painter = function (root, storage, opts) {
	        // In node environment using node-canvas
	        var singleCanvas = !root.nodeName || root.nodeName.toUpperCase() === 'CANVAS';
	        opts = opts || {};
	        /**
	         * @type {number}
	         */
	        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._singleCanvas = singleCanvas;
	        /**
	         * 绘图容器
	         * @type {HTMLElement}
	         */
	        this.root = root;
	        var rootStyle = root.style;
	        if (rootStyle) {
	            rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	            rootStyle['-webkit-user-select'] = rootStyle['user-select'] = rootStyle['-webkit-touch-callout'] = 'none';
	            root.innerHTML = '';
	        }
	        /**
	         * @type {module:zrender/Storage}
	         */
	        this.storage = storage;
	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        var zlevelList = this._zlevelList = [];
	        /**
	         * @type {Object.<string, module:zrender/Layer>}
	         * @private
	         */
	        var layers = this._layers = {};
	        /**
	         * @type {Object.<string, Object>}
	         * @type {private}
	         */
	        this._layerConfig = {};
	        if (!singleCanvas) {
	            this._width = this._getWidth();
	            this._height = this._getHeight();
	            var domRoot = this._domRoot = createRoot(this._width, this._height);
	            root.appendChild(domRoot);
	        } else {
	            // Use canvas width and height directly
	            var width = root.width;
	            var height = root.height;
	            this._width = width;
	            this._height = height;
	            // Create layer if only one given canvas
	            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	            var mainLayer = new Layer(root, this, 1);
	            mainLayer.initContext();
	            // FIXME Use canvas width and height
	            // mainLayer.resize(width, height);
	            layers[0] = mainLayer;
	            zlevelList.push(0);
	        }
	        this.pathToImage = this._createPathToImage();
	        // Layers for progressive rendering
	        this._progressiveLayers = [];
	        /**
	         * @type {module:zrender/Layer}
	         * @private
	         */
	        this._hoverlayer;
	        this._hoverElements = [];
	    };
	    Painter.prototype = {
	        constructor: Painter,
	        isSingleCanvas: function () {
	            return this._singleCanvas;
	        },
	        getViewportRoot: function () {
	            return this._singleCanvas ? this._layers[0].dom : this._domRoot;
	        },
	        refresh: function (paintAll) {
	            var list = this.storage.getDisplayList(true);
	            var zlevelList = this._zlevelList;
	            this._paintList(list, paintAll);
	            // Paint custum layers
	            for (var i = 0; i < zlevelList.length; i++) {
	                var z = zlevelList[i];
	                var layer = this._layers[z];
	                if (!layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }
	            this.refreshHover();
	            if (this._progressiveLayers.length) {
	                this._startProgessive();
	            }
	            return this;
	        },
	        addHover: function (el, hoverStyle) {
	            if (el.__hoverMir) {
	                return;
	            }
	            var elMirror = new el.constructor({
	                    style: el.style,
	                    shape: el.shape
	                });
	            elMirror.__from = el;
	            el.__hoverMir = elMirror;
	            elMirror.setStyle(hoverStyle);
	            this._hoverElements.push(elMirror);
	        },
	        removeHover: function (el) {
	            var elMirror = el.__hoverMir;
	            var hoverElements = this._hoverElements;
	            var idx = util.indexOf(hoverElements, elMirror);
	            if (idx >= 0) {
	                hoverElements.splice(idx, 1);
	            }
	            el.__hoverMir = null;
	        },
	        clearHover: function (el) {
	            var hoverElements = this._hoverElements;
	            for (var i = 0; i < hoverElements.length; i++) {
	                var from = hoverElements[i].__from;
	                if (from) {
	                    from.__hoverMir = null;
	                }
	            }
	            hoverElements.length = 0;
	        },
	        refreshHover: function () {
	            var hoverElements = this._hoverElements;
	            var len = hoverElements.length;
	            var hoverLayer = this._hoverlayer;
	            hoverLayer && hoverLayer.clear();
	            if (!len) {
	                return;
	            }
	            timsort(hoverElements, this.storage.displayableSortFunc);
	            // Use a extream large zlevel
	            // FIXME?
	            if (!hoverLayer) {
	                hoverLayer = this._hoverlayer = this.getLayer(100000);
	            }
	            var scope = {};
	            hoverLayer.ctx.save();
	            for (var i = 0; i < len;) {
	                var el = hoverElements[i];
	                var originalEl = el.__from;
	                // Original el is removed
	                // PENDING
	                if (!(originalEl && originalEl.__zr)) {
	                    hoverElements.splice(i, 1);
	                    originalEl.__hoverMir = null;
	                    len--;
	                    continue;
	                }
	                i++;
	                // Use transform
	                // FIXME style and shape ?
	                if (!originalEl.invisible) {
	                    el.transform = originalEl.transform;
	                    el.invTransform = originalEl.invTransform;
	                    el.__clipPaths = originalEl.__clipPaths;
	                    // el.
	                    this._doPaintEl(el, hoverLayer, true, scope);
	                }
	            }
	            hoverLayer.ctx.restore();
	        },
	        _startProgessive: function () {
	            var self = this;
	            if (!self._furtherProgressive) {
	                return;
	            }
	            // Use a token to stop progress steps triggered by
	            // previous zr.refresh calling.
	            var token = self._progressiveToken = +new Date();
	            self._progress++;
	            requestAnimationFrame(step);
	            function step() {
	                // In case refreshed or disposed
	                if (token === self._progressiveToken && self.storage) {
	                    self._doPaintList(self.storage.getDisplayList());
	                    if (self._furtherProgressive) {
	                        self._progress++;
	                        requestAnimationFrame(step);
	                    } else {
	                        self._progressiveToken = -1;
	                    }
	                }
	            }
	        },
	        _clearProgressive: function () {
	            this._progressiveToken = -1;
	            this._progress = 0;
	            util.each(this._progressiveLayers, function (layer) {
	                layer.__dirty && layer.clear();
	            });
	        },
	        _paintList: function (list, paintAll) {
	            if (paintAll == null) {
	                paintAll = false;
	            }
	            this._updateLayerStatus(list);
	            this._clearProgressive();
	            this.eachBuildinLayer(preProcessLayer);
	            this._doPaintList(list, paintAll);
	            this.eachBuildinLayer(postProcessLayer);
	        },
	        _doPaintList: function (list, paintAll) {
	            var currentLayer;
	            var currentZLevel;
	            var ctx;
	            // var invTransform = [];
	            var scope;
	            var progressiveLayerIdx = 0;
	            var currentProgressiveLayer;
	            var width = this._width;
	            var height = this._height;
	            var layerProgress;
	            var frame = this._progress;
	            function flushProgressiveLayer(layer) {
	                ctx.save();
	                ctx.globalAlpha = 1;
	                ctx.shadowBlur = 0;
	                // Avoid layer don't clear in next progressive frame
	                currentLayer.__dirty = true;
	                ctx.drawImage(layer.dom, 0, 0, width, height);
	                ctx.restore();
	                currentLayer.ctx.restore();
	            }
	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var elZLevel = this._singleCanvas ? 0 : el.zlevel;
	                var elFrame = el.__frame;
	                // Flush at current context
	                // PENDING
	                if (elFrame < 0 && currentProgressiveLayer) {
	                    flushProgressiveLayer(currentProgressiveLayer);
	                    currentProgressiveLayer = null;
	                }
	                // Change draw layer
	                if (currentZLevel !== elZLevel) {
	                    if (ctx) {
	                        ctx.restore();
	                    }
	                    // Reset scope
	                    scope = {};
	                    // Only 0 zlevel if only has one canvas
	                    currentZLevel = elZLevel;
	                    currentLayer = this.getLayer(currentZLevel);
	                    if (!currentLayer.isBuildin) {
	                        log('ZLevel ' + currentZLevel + ' has been used by unkown layer ' + currentLayer.id);
	                    }
	                    ctx = currentLayer.ctx;
	                    ctx.save();
	                    // Reset the count
	                    currentLayer.__unusedCount = 0;
	                    if (currentLayer.__dirty || paintAll) {
	                        currentLayer.clear();
	                    }
	                }
	                if (!(currentLayer.__dirty || paintAll)) {
	                    continue;
	                }
	                if (elFrame >= 0) {
	                    // Progressive layer changed
	                    if (!currentProgressiveLayer) {
	                        currentProgressiveLayer = this._progressiveLayers[Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)];
	                        currentProgressiveLayer.ctx.save();
	                        currentProgressiveLayer.renderScope = {};
	                        if (currentProgressiveLayer && currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress) {
	                            // flushProgressiveLayer(currentProgressiveLayer);
	                            // Quick jump all progressive elements
	                            // All progressive element are not dirty, jump over and flush directly
	                            i = currentProgressiveLayer.__nextIdxNotProg - 1;
	                            // currentProgressiveLayer = null;
	                            continue;
	                        }
	                        layerProgress = currentProgressiveLayer.__progress;
	                        if (!currentProgressiveLayer.__dirty) {
	                            // Keep rendering
	                            frame = layerProgress;
	                        }
	                        currentProgressiveLayer.__progress = frame + 1;
	                    }
	                    if (elFrame === frame) {
	                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);
	                    }
	                } else {
	                    this._doPaintEl(el, currentLayer, paintAll, scope);
	                }
	                el.__dirty = false;
	            }
	            if (currentProgressiveLayer) {
	                flushProgressiveLayer(currentProgressiveLayer);
	            }
	            // Restore the lastLayer ctx
	            ctx && ctx.restore();
	            // If still has clipping state
	            // if (scope.prevElClipPaths) {
	            //     ctx.restore();
	            // }
	            this._furtherProgressive = false;
	            util.each(this._progressiveLayers, function (layer) {
	                if (layer.__maxProgress >= layer.__progress) {
	                    this._furtherProgressive = true;
	                }
	            }, this);
	        },
	        _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	            var ctx = currentLayer.ctx;
	            if ((currentLayer.__dirty || forcePaint) && !el.invisible && el.style.opacity !== 0 && el.scale[0] && el.scale[1] && !(el.culling && isDisplayableCulled(el, this._width, this._height))) {
	                var clipPaths = el.__clipPaths;
	                // Optimize when clipping on group with several elements
	                if (scope.prevClipLayer !== currentLayer || isClipPathChanged(clipPaths, scope.prevElClipPaths)) {
	                    // If has previous clipping state, restore from it
	                    if (scope.prevElClipPaths) {
	                        scope.prevClipLayer.ctx.restore();
	                        scope.prevClipLayer = scope.prevElClipPaths = null;
	                        // Reset prevEl since context has been restored
	                        scope.prevEl = null;
	                    }
	                    // New clipping state
	                    if (clipPaths) {
	                        ctx.save();
	                        doClip(clipPaths, ctx);
	                        scope.prevClipLayer = currentLayer;
	                        scope.prevElClipPaths = clipPaths;
	                    }
	                }
	                el.beforeBrush && el.beforeBrush(ctx);
	                el.brush(ctx, scope.prevEl || null);
	                scope.prevEl = el;
	                el.afterBrush && el.afterBrush(ctx);
	            }
	        },
	        getLayer: function (zlevel) {
	            if (this._singleCanvas) {
	                return this._layers[0];
	            }
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer('zr_' + zlevel, this, this.dpr);
	                layer.isBuildin = true;
	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }
	                this.insertLayer(zlevel, layer);
	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }
	            return layer;
	        },
	        insertLayer: function (zlevel, layer) {
	            var layersMap = this._layers;
	            var zlevelList = this._zlevelList;
	            var len = zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            var domRoot = this._domRoot;
	            if (layersMap[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }
	            if (len > 0 && zlevel > zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	                        break;
	                    }
	                }
	                prevLayer = layersMap[zlevelList[i]];
	            }
	            zlevelList.splice(i + 1, 0, zlevel);
	            if (prevLayer) {
	                var prevDom = prevLayer.dom;
	                if (prevDom.nextSibling) {
	                    domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	                } else {
	                    domRoot.appendChild(layer.dom);
	                }
	            } else {
	                if (domRoot.firstChild) {
	                    domRoot.insertBefore(layer.dom, domRoot.firstChild);
	                } else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }
	            layersMap[zlevel] = layer;
	        },
	        eachLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        },
	        eachBuildinLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },
	        eachOtherLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (!layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },
	        getLayers: function () {
	            return this._layers;
	        },
	        _updateLayerStatus: function (list) {
	            var layers = this._layers;
	            var progressiveLayers = this._progressiveLayers;
	            var elCountsLastFrame = {};
	            var progressiveElCountsLastFrame = {};
	            this.eachBuildinLayer(function (layer, z) {
	                elCountsLastFrame[z] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });
	            util.each(progressiveLayers, function (layer, idx) {
	                progressiveElCountsLastFrame[idx] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });
	            var progressiveLayerCount = 0;
	            var currentProgressiveLayer;
	            var lastProgressiveKey;
	            var frameCount = 0;
	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var zlevel = this._singleCanvas ? 0 : el.zlevel;
	                var layer = layers[zlevel];
	                var elProgress = el.progressive;
	                if (layer) {
	                    layer.elCount++;
	                    layer.__dirty = layer.__dirty || el.__dirty;
	                }
	                /////// Update progressive
	                if (elProgress >= 0) {
	                    // Fix wrong progressive sequence problem.
	                    if (lastProgressiveKey !== elProgress) {
	                        lastProgressiveKey = elProgress;
	                        frameCount++;
	                    }
	                    var elFrame = el.__frame = frameCount - 1;
	                    if (!currentProgressiveLayer) {
	                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);
	                        currentProgressiveLayer = progressiveLayers[idx];
	                        if (!currentProgressiveLayer) {
	                            currentProgressiveLayer = progressiveLayers[idx] = new Layer('progressive', this, this.dpr);
	                            currentProgressiveLayer.initContext();
	                        }
	                        currentProgressiveLayer.__maxProgress = 0;
	                    }
	                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;
	                    currentProgressiveLayer.elCount++;
	                    currentProgressiveLayer.__maxProgress = Math.max(currentProgressiveLayer.__maxProgress, elFrame);
	                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {
	                        // Should keep rendering this  layer because progressive rendering is not finished yet
	                        layer.__dirty = true;
	                    }
	                } else {
	                    el.__frame = -1;
	                    if (currentProgressiveLayer) {
	                        currentProgressiveLayer.__nextIdxNotProg = i;
	                        progressiveLayerCount++;
	                        currentProgressiveLayer = null;
	                    }
	                }
	            }
	            if (currentProgressiveLayer) {
	                progressiveLayerCount++;
	                currentProgressiveLayer.__nextIdxNotProg = i;
	            }
	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCountsLastFrame[z] !== layer.elCount) {
	                    layer.__dirty = true;
	                }
	            });
	            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);
	            util.each(progressiveLayers, function (layer, idx) {
	                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {
	                    el.__dirty = true;
	                }
	                if (layer.__dirty) {
	                    layer.__progress = 0;
	                }
	            });
	        },
	        clear: function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        },
	        _clearLayer: function (layer) {
	            layer.clear();
	        },
	        configLayer: function (zlevel, config) {
	            if (config) {
	                var layerConfig = this._layerConfig;
	                if (!layerConfig[zlevel]) {
	                    layerConfig[zlevel] = config;
	                } else {
	                    util.merge(layerConfig[zlevel], config, true);
	                }
	                var layer = this._layers[zlevel];
	                if (layer) {
	                    util.merge(layer, layerConfig[zlevel], true);
	                }
	            }
	        },
	        delLayer: function (zlevel) {
	            var layers = this._layers;
	            var zlevelList = this._zlevelList;
	            var layer = layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete layers[zlevel];
	            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	        },
	        resize: function (width, height) {
	            var domRoot = this._domRoot;
	            // FIXME Why ?
	            domRoot.style.display = 'none';
	            width = width || this._getWidth();
	            height = height || this._getHeight();
	            domRoot.style.display = '';
	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';
	                for (var id in this._layers) {
	                    this._layers[id].resize(width, height);
	                }
	                this.refresh(true);
	            }
	            this._width = width;
	            this._height = height;
	            return this;
	        },
	        clearLayer: function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (layer) {
	                layer.clear();
	            }
	        },
	        dispose: function () {
	            this.root.innerHTML = '';
	            this.root = this.storage = this._domRoot = this._layers = null;
	        },
	        getRenderedCanvas: function (opts) {
	            opts = opts || {};
	            if (this._singleCanvas) {
	                return this._layers[0].dom;
	            }
	            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	            imageLayer.initContext();
	            imageLayer.clearColor = opts.backgroundColor;
	            imageLayer.clear();
	            var displayList = this.storage.getDisplayList(true);
	            var scope = {};
	            for (var i = 0; i < displayList.length; i++) {
	                var el = displayList[i];
	                this._doPaintEl(el, imageLayer, true, scope);
	            }
	            return imageLayer.dom;
	        },
	        getWidth: function () {
	            return this._width;
	        },
	        getHeight: function () {
	            return this._height;
	        },
	        _getWidth: function () {
	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);
	            // FIXME Better way to get the width and height when element has not been append to the document
	            return (root.clientWidth || parseInt10(stl.width) || parseInt10(root.style.width)) - (parseInt10(stl.paddingLeft) || 0) - (parseInt10(stl.paddingRight) || 0) | 0;
	        },
	        _getHeight: function () {
	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);
	            return (root.clientHeight || parseInt10(stl.height) || parseInt10(root.style.height)) - (parseInt10(stl.paddingTop) || 0) - (parseInt10(stl.paddingBottom) || 0) | 0;
	        },
	        _pathToImage: function (id, path, width, height, dpr) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');
	            canvas.width = width * dpr;
	            canvas.height = height * dpr;
	            ctx.clearRect(0, 0, width * dpr, height * dpr);
	            var pathTransform = {
	                    position: path.position,
	                    rotation: path.rotation,
	                    scale: path.scale
	                };
	            path.position = [
	                0,
	                0,
	                0
	            ];
	            path.rotation = 0;
	            path.scale = [
	                1,
	                1
	            ];
	            if (path) {
	                path.brush(ctx);
	            }
	            var ImageShape = require('./graphic/Image');
	            var imgShape = new ImageShape({
	                    id: id,
	                    style: {
	                        x: 0,
	                        y: 0,
	                        image: canvas
	                    }
	                });
	            if (pathTransform.position != null) {
	                imgShape.position = path.position = pathTransform.position;
	            }
	            if (pathTransform.rotation != null) {
	                imgShape.rotation = path.rotation = pathTransform.rotation;
	            }
	            if (pathTransform.scale != null) {
	                imgShape.scale = path.scale = pathTransform.scale;
	            }
	            return imgShape;
	        },
	        _createPathToImage: function () {
	            var me = this;
	            return function (id, e, width, height) {
	                return me._pathToImage(id, e, width, height, me.dpr);
	            };
	        }
	    };
	    return Painter;
	});
	define('zrender/graphic/helper/smoothBezier', ['require', '../../core/vector'], function (require) {
	    var vec2 = require('../../core/vector');
	    var v2Min = vec2.min;
	    var v2Max = vec2.max;
	    var v2Scale = vec2.scale;
	    var v2Distance = vec2.distance;
	    var v2Add = vec2.add;
	    /**
	     * 贝塞尔平滑曲线
	     * @alias module:zrender/shape/util/smoothBezier
	     * @param {Array} points 线段顶点数组
	     * @param {number} smooth 平滑等级, 0-1
	     * @param {boolean} isLoop
	     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	     *                           整个折线的包围盒做一个并集用来约束控制点。
	     * @param {Array} 计算出来的控制点数组
	     */
	    return function (points, smooth, isLoop, constraint) {
	        var cps = [];
	        var v = [];
	        var v1 = [];
	        var v2 = [];
	        var prevPoint;
	        var nextPoint;
	        var min, max;
	        if (constraint) {
	            min = [
	                Infinity,
	                Infinity
	            ];
	            max = [
	                -Infinity,
	                -Infinity
	            ];
	            for (var i = 0, len = points.length; i < len; i++) {
	                v2Min(min, min, points[i]);
	                v2Max(max, max, points[i]);
	            }
	            // 与指定的包围盒做并集
	            v2Min(min, min, constraint[0]);
	            v2Max(max, max, constraint[1]);
	        }
	        for (var i = 0, len = points.length; i < len; i++) {
	            var point = points[i];
	            if (isLoop) {
	                prevPoint = points[i ? i - 1 : len - 1];
	                nextPoint = points[(i + 1) % len];
	            } else {
	                if (i === 0 || i === len - 1) {
	                    cps.push(vec2.clone(points[i]));
	                    continue;
	                } else {
	                    prevPoint = points[i - 1];
	                    nextPoint = points[i + 1];
	                }
	            }
	            vec2.sub(v, nextPoint, prevPoint);
	            // use degree to scale the handle length
	            v2Scale(v, v, smooth);
	            var d0 = v2Distance(point, prevPoint);
	            var d1 = v2Distance(point, nextPoint);
	            var sum = d0 + d1;
	            if (sum !== 0) {
	                d0 /= sum;
	                d1 /= sum;
	            }
	            v2Scale(v1, v, -d0);
	            v2Scale(v2, v, d1);
	            var cp0 = v2Add([], point, v1);
	            var cp1 = v2Add([], point, v2);
	            if (constraint) {
	                v2Max(cp0, cp0, min);
	                v2Min(cp0, cp0, max);
	                v2Max(cp1, cp1, min);
	                v2Min(cp1, cp1, max);
	            }
	            cps.push(cp0);
	            cps.push(cp1);
	        }
	        if (isLoop) {
	            cps.push(cps.shift());
	        }
	        return cps;
	    };
	});
	define('zrender/graphic/helper/smoothSpline', ['require', '../../core/vector'], function (require) {
	    var vec2 = require('../../core/vector');
	    /**
	     * @inner
	     */
	    function interpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	    }
	    /**
	     * @alias module:zrender/shape/util/smoothSpline
	     * @param {Array} points 线段顶点数组
	     * @param {boolean} isLoop
	     * @return {Array}
	     */
	    return function (points, isLoop) {
	        var len = points.length;
	        var ret = [];
	        var distance = 0;
	        for (var i = 1; i < len; i++) {
	            distance += vec2.distance(points[i - 1], points[i]);
	        }
	        var segs = distance / 2;
	        segs = segs < len ? len : segs;
	        for (var i = 0; i < segs; i++) {
	            var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	            var idx = Math.floor(pos);
	            var w = pos - idx;
	            var p0;
	            var p1 = points[idx % len];
	            var p2;
	            var p3;
	            if (!isLoop) {
	                p0 = points[idx === 0 ? idx : idx - 1];
	                p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	            } else {
	                p0 = points[(idx - 1 + len) % len];
	                p2 = points[(idx + 1) % len];
	                p3 = points[(idx + 2) % len];
	            }
	            var w2 = w * w;
	            var w3 = w * w2;
	            ret.push([
	                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	            ]);
	        }
	        return ret;
	    };
	});
	define('zrender/mixin/Draggable', ['require'], function (require) {
	    function Draggable() {
	        this.on('mousedown', this._dragStart, this);
	        this.on('mousemove', this._drag, this);
	        this.on('mouseup', this._dragEnd, this);
	        this.on('globalout', this._dragEnd, this);    // this._dropTarget = null;
	                                                      // this._draggingTarget = null;
	                                                      // this._x = 0;
	                                                      // this._y = 0;
	    }
	    Draggable.prototype = {
	        constructor: Draggable,
	        _dragStart: function (e) {
	            var draggingTarget = e.target;
	            if (draggingTarget && draggingTarget.draggable) {
	                this._draggingTarget = draggingTarget;
	                draggingTarget.dragging = true;
	                this._x = e.offsetX;
	                this._y = e.offsetY;
	                this.dispatchToElement(draggingTarget, 'dragstart', e.event);
	            }
	        },
	        _drag: function (e) {
	            var draggingTarget = this._draggingTarget;
	            if (draggingTarget) {
	                var x = e.offsetX;
	                var y = e.offsetY;
	                var dx = x - this._x;
	                var dy = y - this._y;
	                this._x = x;
	                this._y = y;
	                draggingTarget.drift(dx, dy, e);
	                this.dispatchToElement(draggingTarget, 'drag', e.event);
	                var dropTarget = this.findHover(x, y, draggingTarget);
	                var lastDropTarget = this._dropTarget;
	                this._dropTarget = dropTarget;
	                if (draggingTarget !== dropTarget) {
	                    if (lastDropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(lastDropTarget, 'dragleave', e.event);
	                    }
	                    if (dropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(dropTarget, 'dragenter', e.event);
	                    }
	                }
	            }
	        },
	        _dragEnd: function (e) {
	            var draggingTarget = this._draggingTarget;
	            if (draggingTarget) {
	                draggingTarget.dragging = false;
	            }
	            this.dispatchToElement(draggingTarget, 'dragend', e.event);
	            if (this._dropTarget) {
	                this.dispatchToElement(this._dropTarget, 'drop', e.event);
	            }
	            this._draggingTarget = null;
	            this._dropTarget = null;
	        }
	    };
	    return Draggable;
	});
	define('zrender/graphic/helper/roundRect', ['require'], function (require) {
	    return {
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            var r = shape.r;
	            var r1;
	            var r2;
	            var r3;
	            var r4;
	            // Convert width and height to positive for better borderRadius
	            if (width < 0) {
	                x = x + width;
	                width = -width;
	            }
	            if (height < 0) {
	                y = y + height;
	                height = -height;
	            }
	            if (typeof r === 'number') {
	                r1 = r2 = r3 = r4 = r;
	            } else if (r instanceof Array) {
	                if (r.length === 1) {
	                    r1 = r2 = r3 = r4 = r[0];
	                } else if (r.length === 2) {
	                    r1 = r3 = r[0];
	                    r2 = r4 = r[1];
	                } else if (r.length === 3) {
	                    r1 = r[0];
	                    r2 = r4 = r[1];
	                    r3 = r[2];
	                } else {
	                    r1 = r[0];
	                    r2 = r[1];
	                    r3 = r[2];
	                    r4 = r[3];
	                }
	            } else {
	                r1 = r2 = r3 = r4 = 0;
	            }
	            var total;
	            if (r1 + r2 > width) {
	                total = r1 + r2;
	                r1 *= width / total;
	                r2 *= width / total;
	            }
	            if (r3 + r4 > width) {
	                total = r3 + r4;
	                r3 *= width / total;
	                r4 *= width / total;
	            }
	            if (r2 + r3 > height) {
	                total = r2 + r3;
	                r2 *= height / total;
	                r3 *= height / total;
	            }
	            if (r1 + r4 > height) {
	                total = r1 + r4;
	                r1 *= height / total;
	                r4 *= height / total;
	            }
	            ctx.moveTo(x + r1, y);
	            ctx.lineTo(x + width - r2, y);
	            r2 !== 0 && ctx.quadraticCurveTo(x + width, y, x + width, y + r2);
	            ctx.lineTo(x + width, y + height - r3);
	            r3 !== 0 && ctx.quadraticCurveTo(x + width, y + height, x + width - r3, y + height);
	            ctx.lineTo(x + r4, y + height);
	            r4 !== 0 && ctx.quadraticCurveTo(x, y + height, x, y + height - r4);
	            ctx.lineTo(x, y + r1);
	            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	        }
	    };
	});
	define('zrender/core/event', ['require', '../mixin/Eventful'], function (require) {
	    'use strict';
	    var Eventful = require('../mixin/Eventful');
	    var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
	    function getBoundingClientRect(el) {
	        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	        return el.getBoundingClientRect ? el.getBoundingClientRect() : {
	            left: 0,
	            top: 0
	        };
	    }
	    function clientToLocal(el, e, out) {
	        // clientX/clientY is according to view port.
	        var box = getBoundingClientRect(el);
	        out = out || {};
	        out.zrX = e.clientX - box.left;
	        out.zrY = e.clientY - box.top;
	        return out;
	    }
	    /**
	     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
	     */
	    function normalizeEvent(el, e) {
	        e = e || window.event;
	        if (e.zrX != null) {
	            return e;
	        }
	        var eventType = e.type;
	        var isTouch = eventType && eventType.indexOf('touch') >= 0;
	        if (!isTouch) {
	            clientToLocal(el, e, e);
	            e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	        } else {
	            var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	            touch && clientToLocal(el, touch, e);
	        }
	        return e;
	    }
	    function addEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.addEventListener(name, handler);
	        } else {
	            el.attachEvent('on' + name, handler);
	        }
	    }
	    function removeEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.removeEventListener(name, handler);
	        } else {
	            el.detachEvent('on' + name, handler);
	        }
	    }
	    /**
	     * 停止冒泡和阻止默认行为
	     * @memberOf module:zrender/core/event
	     * @method
	     * @param {Event} e : event对象
	     */
	    var stop = isDomLevel2 ? function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	            e.cancelBubble = true;
	        } : function (e) {
	            e.returnValue = false;
	            e.cancelBubble = true;
	        };
	    return {
	        clientToLocal: clientToLocal,
	        normalizeEvent: normalizeEvent,
	        addEventListener: addEventListener,
	        removeEventListener: removeEventListener,
	        stop: stop,
	        Dispatcher: Eventful
	    };
	});
	define('zrender/animation/requestAnimationFrame', ['require'], function (require) {
	    return typeof window !== 'undefined' && (window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	        setTimeout(func, 16);
	    };
	});
	define('echarts/component/axis/AxisView', ['require', 'zrender/core/util', '../../util/graphic', './AxisBuilder', '../../echarts'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var graphic = require('../../util/graphic');
	    var AxisBuilder = require('./AxisBuilder');
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	    var getInterval = AxisBuilder.getInterval;
	    var axisBuilderAttrs = [
	            'axisLine',
	            'axisLabel',
	            'axisTick',
	            'axisName'
	        ];
	    var selfBuilderAttrs = [
	            'splitArea',
	            'splitLine'
	        ];
	    // function getAlignWithLabel(model, axisModel) {
	    //     var alignWithLabel = model.get('alignWithLabel');
	    //     if (alignWithLabel === 'auto') {
	    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	    //     }
	    //     return alignWithLabel;
	    // }
	    var AxisView = require('../../echarts').extendComponentView({
	            type: 'axis',
	            render: function (axisModel, ecModel) {
	                this.group.removeAll();
	                var oldAxisGroup = this._axisGroup;
	                this._axisGroup = new graphic.Group();
	                this.group.add(this._axisGroup);
	                if (!axisModel.get('show')) {
	                    return;
	                }
	                var gridModel = ecModel.getComponent('grid', axisModel.get('gridIndex'));
	                var layout = layoutAxis(gridModel, axisModel);
	                var axisBuilder = new AxisBuilder(axisModel, layout);
	                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	                this._axisGroup.add(axisBuilder.getGroup());
	                zrUtil.each(selfBuilderAttrs, function (name) {
	                    if (axisModel.get(name + '.show')) {
	                        this['_' + name](axisModel, gridModel, layout.labelInterval);
	                    }
	                }, this);
	                graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	            },
	            _splitLine: function (axisModel, gridModel, labelInterval) {
	                var axis = axisModel.axis;
	                var splitLineModel = axisModel.getModel('splitLine');
	                var lineStyleModel = splitLineModel.getModel('lineStyle');
	                var lineColors = lineStyleModel.get('color');
	                var lineInterval = getInterval(splitLineModel, labelInterval);
	                lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	                var gridRect = gridModel.coordinateSystem.getRect();
	                var isHorizontal = axis.isHorizontal();
	                var lineCount = 0;
	                var ticksCoords = axis.getTicksCoords();
	                var ticks = axis.scale.getTicks();
	                var p1 = [];
	                var p2 = [];
	                // Simple optimization
	                // Batching the lines if color are the same
	                var lineStyle = lineStyleModel.getLineStyle();
	                for (var i = 0; i < ticksCoords.length; i++) {
	                    if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                        continue;
	                    }
	                    var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	                    if (isHorizontal) {
	                        p1[0] = tickCoord;
	                        p1[1] = gridRect.y;
	                        p2[0] = tickCoord;
	                        p2[1] = gridRect.y + gridRect.height;
	                    } else {
	                        p1[0] = gridRect.x;
	                        p1[1] = tickCoord;
	                        p2[0] = gridRect.x + gridRect.width;
	                        p2[1] = tickCoord;
	                    }
	                    var colorIndex = lineCount++ % lineColors.length;
	                    this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                        anid: 'line_' + ticks[i],
	                        shape: {
	                            x1: p1[0],
	                            y1: p1[1],
	                            x2: p2[0],
	                            y2: p2[1]
	                        },
	                        style: zrUtil.defaults({ stroke: lineColors[colorIndex] }, lineStyle),
	                        silent: true
	                    })));
	                }
	            },
	            _splitArea: function (axisModel, gridModel, labelInterval) {
	                var axis = axisModel.axis;
	                var splitAreaModel = axisModel.getModel('splitArea');
	                var areaStyleModel = splitAreaModel.getModel('areaStyle');
	                var areaColors = areaStyleModel.get('color');
	                var gridRect = gridModel.coordinateSystem.getRect();
	                var ticksCoords = axis.getTicksCoords();
	                var ticks = axis.scale.getTicks();
	                var prevX = axis.toGlobalCoord(ticksCoords[0]);
	                var prevY = axis.toGlobalCoord(ticksCoords[0]);
	                var count = 0;
	                var areaInterval = getInterval(splitAreaModel, labelInterval);
	                var areaStyle = areaStyleModel.getAreaStyle();
	                areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];
	                for (var i = 1; i < ticksCoords.length; i++) {
	                    if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                        continue;
	                    }
	                    var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	                    var x;
	                    var y;
	                    var width;
	                    var height;
	                    if (axis.isHorizontal()) {
	                        x = prevX;
	                        y = gridRect.y;
	                        width = tickCoord - x;
	                        height = gridRect.height;
	                    } else {
	                        x = gridRect.x;
	                        y = prevY;
	                        width = gridRect.width;
	                        height = tickCoord - y;
	                    }
	                    var colorIndex = count++ % areaColors.length;
	                    this._axisGroup.add(new graphic.Rect({
	                        anid: 'area_' + ticks[i],
	                        shape: {
	                            x: x,
	                            y: y,
	                            width: width,
	                            height: height
	                        },
	                        style: zrUtil.defaults({ fill: areaColors[colorIndex] }, areaStyle),
	                        silent: true
	                    }));
	                    prevX = x + width;
	                    prevY = y + height;
	                }
	            }
	        });
	    AxisView.extend({ type: 'xAxis' });
	    AxisView.extend({ type: 'yAxis' });
	    /**
	     * @inner
	     */
	    function layoutAxis(gridModel, axisModel) {
	        var grid = gridModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};
	        var rawAxisPosition = axis.position;
	        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	        var axisDim = axis.dim;
	        // [left, right, top, bottom]
	        var rect = grid.getRect();
	        var rectBound = [
	                rect.x,
	                rect.x + rect.width,
	                rect.y,
	                rect.y + rect.height
	            ];
	        var axisOffset = axisModel.get('offset') || 0;
	        var posMap = {
	                x: {
	                    top: rectBound[2] - axisOffset,
	                    bottom: rectBound[3] + axisOffset
	                },
	                y: {
	                    left: rectBound[0] - axisOffset,
	                    right: rectBound[1] + axisOffset
	                }
	            };
	        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);
	        function getZero(dim, val) {
	            var theAxis = grid.getAxis(dim);
	            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	        }
	        // Axis position
	        layout.position = [
	            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],
	            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]
	        ];
	        // Axis rotation
	        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);
	        // Tick and label direction, x y is axisDim
	        var dirMap = {
	                top: -1,
	                bottom: 1,
	                left: -1,
	                right: 1
	            };
	        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	        if (axis.onZero) {
	            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	        }
	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }
	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }
	        // Special label rotation
	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;
	        // label interval when auto mode.
	        layout.labelInterval = axis.getLabelInterval();
	        // Over splitLine and splitArea
	        layout.z2 = 1;
	        return layout;
	    }
	});
	define('zrender/core/GestureMgr', ['require', './event'], function (require) {
	    'use strict';
	    var eventUtil = require('./event');
	    var GestureMgr = function () {
	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._track = [];
	    };
	    GestureMgr.prototype = {
	        constructor: GestureMgr,
	        recognize: function (event, target, root) {
	            this._doTrack(event, target, root);
	            return this._recognize(event);
	        },
	        clear: function () {
	            this._track.length = 0;
	            return this;
	        },
	        _doTrack: function (event, target, root) {
	            var touches = event.touches;
	            if (!touches) {
	                return;
	            }
	            var trackItem = {
	                    points: [],
	                    touches: [],
	                    target: target,
	                    event: event
	                };
	            for (var i = 0, len = touches.length; i < len; i++) {
	                var touch = touches[i];
	                var pos = eventUtil.clientToLocal(root, touch);
	                trackItem.points.push([
	                    pos.zrX,
	                    pos.zrY
	                ]);
	                trackItem.touches.push(touch);
	            }
	            this._track.push(trackItem);
	        },
	        _recognize: function (event) {
	            for (var eventName in recognizers) {
	                if (recognizers.hasOwnProperty(eventName)) {
	                    var gestureInfo = recognizers[eventName](this._track, event);
	                    if (gestureInfo) {
	                        return gestureInfo;
	                    }
	                }
	            }
	        }
	    };
	    function dist(pointPair) {
	        var dx = pointPair[1][0] - pointPair[0][0];
	        var dy = pointPair[1][1] - pointPair[0][1];
	        return Math.sqrt(dx * dx + dy * dy);
	    }
	    function center(pointPair) {
	        return [
	            (pointPair[0][0] + pointPair[1][0]) / 2,
	            (pointPair[0][1] + pointPair[1][1]) / 2
	        ];
	    }
	    var recognizers = {
	            pinch: function (track, event) {
	                var trackLen = track.length;
	                if (!trackLen) {
	                    return;
	                }
	                var pinchEnd = (track[trackLen - 1] || {}).points;
	                var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;
	                if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	                    var pinchScale = dist(pinchEnd) / dist(pinchPre);
	                    !isFinite(pinchScale) && (pinchScale = 1);
	                    event.pinchScale = pinchScale;
	                    var pinchCenter = center(pinchEnd);
	                    event.pinchX = pinchCenter[0];
	                    event.pinchY = pinchCenter[1];
	                    return {
	                        type: 'pinch',
	                        target: track[0].target,
	                        event: event
	                    };
	                }
	            }    // Only pinch currently.
	        };
	    return GestureMgr;
	});
	define('echarts/component/axis/AxisBuilder', ['require', 'zrender/core/util', '../../util/format', '../../util/graphic', '../../model/Model', '../../util/number', 'zrender/core/vector'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var formatUtil = require('../../util/format');
	    var graphic = require('../../util/graphic');
	    var Model = require('../../model/Model');
	    var numberUtil = require('../../util/number');
	    var remRadian = numberUtil.remRadian;
	    var isRadianAroundZero = numberUtil.isRadianAroundZero;
	    var vec2 = require('zrender/core/vector');
	    var v2ApplyTransform = vec2.applyTransform;
	    var retrieve = zrUtil.retrieve;
	    var PI = Math.PI;
	    function makeAxisEventDataBase(axisModel) {
	        var eventData = { componentType: axisModel.mainType };
	        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	        return eventData;
	    }
	    /**
	     * A final axis is translated and rotated from a "standard axis".
	     * So opt.position and opt.rotation is required.
	     *
	     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	     * for example: (0, 0) ------------> (0, 50)
	     *
	     * nameDirection or tickDirection or labelDirection is 1 means tick
	     * or label is below the standard axis, whereas is -1 means above
	     * the standard axis. labelOffset means offset between label and axis,
	     * which is useful when 'onZero', where axisLabel is in the grid and
	     * label in outside grid.
	     *
	     * Tips: like always,
	     * positive rotation represents anticlockwise, and negative rotation
	     * represents clockwise.
	     * The direction of position coordinate is the same as the direction
	     * of screen coordinate.
	     *
	     * Do not need to consider axis 'inverse', which is auto processed by
	     * axis extent.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} axisModel
	     * @param {Object} opt Standard axis parameters.
	     * @param {Array.<number>} opt.position [x, y]
	     * @param {number} opt.rotation by radian
	     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	     * @param {number} [opt.tickDirection=1] 1 or -1
	     * @param {number} [opt.labelDirection=1] 1 or -1
	     * @param {number} [opt.labelOffset=0] Usefull when onZero.
	     * @param {string} [opt.axisLabelShow] default get from axisModel.
	     * @param {string} [opt.axisName] default get from axisModel.
	     * @param {number} [opt.axisNameAvailableWidth]
	     * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	     * @param {number} [opt.labelInterval] Default label interval when label
	     *                                     interval from model is null or 'auto'.
	     * @param {number} [opt.strokeContainThreshold] Default label interval when label
	     */
	    var AxisBuilder = function (axisModel, opt) {
	        /**
	         * @readOnly
	         */
	        this.opt = opt;
	        /**
	         * @readOnly
	         */
	        this.axisModel = axisModel;
	        // Default value
	        zrUtil.defaults(opt, {
	            labelOffset: 0,
	            nameDirection: 1,
	            tickDirection: 1,
	            labelDirection: 1,
	            silent: true
	        });
	        /**
	         * @readOnly
	         */
	        this.group = new graphic.Group();
	        // FIXME Not use a seperate text group?
	        var dumbGroup = new graphic.Group({
	                position: opt.position.slice(),
	                rotation: opt.rotation
	            });
	        // this.group.add(dumbGroup);
	        // this._dumbGroup = dumbGroup;
	        dumbGroup.updateTransform();
	        this._transform = dumbGroup.transform;
	        this._dumbGroup = dumbGroup;
	    };
	    AxisBuilder.prototype = {
	        constructor: AxisBuilder,
	        hasBuilder: function (name) {
	            return !!builders[name];
	        },
	        add: function (name) {
	            builders[name].call(this);
	        },
	        getGroup: function () {
	            return this.group;
	        }
	    };
	    var builders = {
	            axisLine: function () {
	                var opt = this.opt;
	                var axisModel = this.axisModel;
	                if (!axisModel.get('axisLine.show')) {
	                    return;
	                }
	                var extent = this.axisModel.axis.getExtent();
	                var matrix = this._transform;
	                var pt1 = [
	                        extent[0],
	                        0
	                    ];
	                var pt2 = [
	                        extent[1],
	                        0
	                    ];
	                if (matrix) {
	                    v2ApplyTransform(pt1, pt1, matrix);
	                    v2ApplyTransform(pt2, pt2, matrix);
	                }
	                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                    anid: 'line',
	                    shape: {
	                        x1: pt1[0],
	                        y1: pt1[1],
	                        x2: pt2[0],
	                        y2: pt2[1]
	                    },
	                    style: zrUtil.extend({ lineCap: 'round' }, axisModel.getModel('axisLine.lineStyle').getLineStyle()),
	                    strokeContainThreshold: opt.strokeContainThreshold || 5,
	                    silent: true,
	                    z2: 1
	                })));
	            },
	            axisTick: function () {
	                var axisModel = this.axisModel;
	                if (!axisModel.get('axisTick.show')) {
	                    return;
	                }
	                var axis = axisModel.axis;
	                var tickModel = axisModel.getModel('axisTick');
	                var opt = this.opt;
	                var lineStyleModel = tickModel.getModel('lineStyle');
	                var tickLen = tickModel.get('length');
	                var tickInterval = getInterval(tickModel, opt.labelInterval);
	                var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));
	                var ticks = axis.scale.getTicks();
	                var pt1 = [];
	                var pt2 = [];
	                var matrix = this._transform;
	                for (var i = 0; i < ticksCoords.length; i++) {
	                    // Only ordinal scale support tick interval
	                    if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                        continue;
	                    }
	                    var tickCoord = ticksCoords[i];
	                    pt1[0] = tickCoord;
	                    pt1[1] = 0;
	                    pt2[0] = tickCoord;
	                    pt2[1] = opt.tickDirection * tickLen;
	                    if (matrix) {
	                        v2ApplyTransform(pt1, pt1, matrix);
	                        v2ApplyTransform(pt2, pt2, matrix);
	                    }
	                    // Tick line, Not use group transform to have better line draw
	                    this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                        anid: 'tick_' + ticks[i],
	                        shape: {
	                            x1: pt1[0],
	                            y1: pt1[1],
	                            x2: pt2[0],
	                            y2: pt2[1]
	                        },
	                        style: zrUtil.defaults(lineStyleModel.getLineStyle(), { stroke: axisModel.get('axisLine.lineStyle.color') }),
	                        z2: 2,
	                        silent: true
	                    })));
	                }
	            },
	            axisLabel: function () {
	                var opt = this.opt;
	                var axisModel = this.axisModel;
	                var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));
	                if (!show) {
	                    return;
	                }
	                var axis = axisModel.axis;
	                var labelModel = axisModel.getModel('axisLabel');
	                var textStyleModel = labelModel.getModel('textStyle');
	                var labelMargin = labelModel.get('margin');
	                var ticks = axis.scale.getTicks();
	                var labels = axisModel.getFormattedLabels();
	                // Special label rotate.
	                var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;
	                // To radian.
	                labelRotation = labelRotation * PI / 180;
	                var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	                var categoryData = axisModel.get('data');
	                var textEls = [];
	                var silent = isSilent(axisModel);
	                var triggerEvent = axisModel.get('triggerEvent');
	                for (var i = 0; i < ticks.length; i++) {
	                    if (ifIgnoreOnTick(axis, i, opt.labelInterval)) {
	                        continue;
	                    }
	                    var itemTextStyleModel = textStyleModel;
	                    if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                        itemTextStyleModel = new Model(categoryData[i].textStyle, textStyleModel, axisModel.ecModel);
	                    }
	                    var textColor = itemTextStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color');
	                    var tickCoord = axis.dataToCoord(ticks[i]);
	                    var pos = [
	                            tickCoord,
	                            opt.labelOffset + opt.labelDirection * labelMargin
	                        ];
	                    var labelBeforeFormat = axis.scale.getLabel(ticks[i]);
	                    var textEl = new graphic.Text({
	                            anid: 'label_' + ticks[i],
	                            style: {
	                                text: labels[i],
	                                textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                                textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                                textFont: itemTextStyleModel.getFont(),
	                                fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor
	                            },
	                            position: pos,
	                            rotation: labelLayout.rotation,
	                            silent: silent,
	                            z2: 10
	                        });
	                    // Pack data for mouse event
	                    if (triggerEvent) {
	                        textEl.eventData = makeAxisEventDataBase(axisModel);
	                        textEl.eventData.targetType = 'axisLabel';
	                        textEl.eventData.value = labelBeforeFormat;
	                    }
	                    // FIXME
	                    this._dumbGroup.add(textEl);
	                    textEl.updateTransform();
	                    textEls.push(textEl);
	                    this.group.add(textEl);
	                    textEl.decomposeTransform();
	                }
	                function isTwoLabelOverlapped(current, next) {
	                    var firstRect = current && current.getBoundingRect().clone();
	                    var nextRect = next && next.getBoundingRect().clone();
	                    if (firstRect && nextRect) {
	                        firstRect.applyTransform(current.getLocalTransform());
	                        nextRect.applyTransform(next.getLocalTransform());
	                        return firstRect.intersect(nextRect);
	                    }
	                }
	                if (axis.type !== 'category') {
	                    // If min or max are user set, we need to check
	                    // If the tick on min(max) are overlap on their neighbour tick
	                    // If they are overlapped, we need to hide the min(max) tick label
	                    if (axisModel.getMin ? axisModel.getMin() : axisModel.get('min')) {
	                        var firstLabel = textEls[0];
	                        var nextLabel = textEls[1];
	                        if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                            firstLabel.ignore = true;
	                        }
	                    }
	                    if (axisModel.getMax ? axisModel.getMax() : axisModel.get('max')) {
	                        var lastLabel = textEls[textEls.length - 1];
	                        var prevLabel = textEls[textEls.length - 2];
	                        if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                            lastLabel.ignore = true;
	                        }
	                    }
	                }
	            },
	            axisName: function () {
	                var opt = this.opt;
	                var axisModel = this.axisModel;
	                var name = retrieve(opt.axisName, axisModel.get('name'));
	                if (!name) {
	                    return;
	                }
	                var nameLocation = axisModel.get('nameLocation');
	                var nameDirection = opt.nameDirection;
	                var textStyleModel = axisModel.getModel('nameTextStyle');
	                var gap = axisModel.get('nameGap') || 0;
	                var extent = this.axisModel.axis.getExtent();
	                var gapSignal = extent[0] > extent[1] ? -1 : 1;
	                var pos = [
	                        nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2,
	                        nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0
	                    ];
	                var labelLayout;
	                var nameRotation = axisModel.get('nameRotate');
	                if (nameRotation != null) {
	                    nameRotation = nameRotation * PI / 180;    // To radian.
	                }
	                var axisNameAvailableWidth;
	                if (nameLocation === 'middle') {
	                    labelLayout = innerTextLayout(opt, nameRotation != null ? nameRotation : opt.rotation, nameDirection);
	                } else {
	                    labelLayout = endTextLayout(opt, nameLocation, nameRotation || 0, extent);
	                    axisNameAvailableWidth = opt.axisNameAvailableWidth;
	                    if (axisNameAvailableWidth != null) {
	                        axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
	                        !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	                    }
	                }
	                var textFont = textStyleModel.getFont();
	                var truncateOpt = axisModel.get('nameTruncate', true) || {};
	                var ellipsis = truncateOpt.ellipsis;
	                var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);
	                var truncatedText = ellipsis != null && maxWidth != null ? formatUtil.truncateText(name, maxWidth, textFont, ellipsis, {
	                        minChar: 2,
	                        placeholder: truncateOpt.placeholder
	                    }) : name;
	                var tooltipOpt = axisModel.get('tooltip', true);
	                var mainType = axisModel.mainType;
	                var formatterParams = {
	                        componentType: mainType,
	                        name: name,
	                        $vars: ['name']
	                    };
	                formatterParams[mainType + 'Index'] = axisModel.componentIndex;
	                var textEl = new graphic.Text({
	                        anid: 'name',
	                        __fullText: name,
	                        __truncatedText: truncatedText,
	                        style: {
	                            text: truncatedText,
	                            textFont: textFont,
	                            fill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	                            textAlign: labelLayout.textAlign,
	                            textVerticalAlign: labelLayout.verticalAlign
	                        },
	                        position: pos,
	                        rotation: labelLayout.rotation,
	                        silent: isSilent(axisModel),
	                        z2: 1,
	                        tooltip: tooltipOpt && tooltipOpt.show ? zrUtil.extend({
	                            content: name,
	                            formatter: function () {
	                                return name;
	                            },
	                            formatterParams: formatterParams
	                        }, tooltipOpt) : null
	                    });
	                if (axisModel.get('triggerEvent')) {
	                    textEl.eventData = makeAxisEventDataBase(axisModel);
	                    textEl.eventData.targetType = 'axisName';
	                    textEl.eventData.name = name;
	                }
	                // FIXME
	                this._dumbGroup.add(textEl);
	                textEl.updateTransform();
	                this.group.add(textEl);
	                textEl.decomposeTransform();
	            }
	        };
	    /**
	     * @inner
	     */
	    function innerTextLayout(opt, textRotation, direction) {
	        var rotationDiff = remRadian(textRotation - opt.rotation);
	        var textAlign;
	        var verticalAlign;
	        if (isRadianAroundZero(rotationDiff)) {
	            // Label is parallel with axis line.
	            verticalAlign = direction > 0 ? 'top' : 'bottom';
	            textAlign = 'center';
	        } else if (isRadianAroundZero(rotationDiff - PI)) {
	            // Label is inverse parallel with axis line.
	            verticalAlign = direction > 0 ? 'bottom' : 'top';
	            textAlign = 'center';
	        } else {
	            verticalAlign = 'middle';
	            if (rotationDiff > 0 && rotationDiff < PI) {
	                textAlign = direction > 0 ? 'right' : 'left';
	            } else {
	                textAlign = direction > 0 ? 'left' : 'right';
	            }
	        }
	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }
	    /**
	     * @inner
	     */
	    function endTextLayout(opt, textPosition, textRotate, extent) {
	        var rotationDiff = remRadian(textRotate - opt.rotation);
	        var textAlign;
	        var verticalAlign;
	        var inverse = extent[0] > extent[1];
	        var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;
	        if (isRadianAroundZero(rotationDiff - PI / 2)) {
	            verticalAlign = onLeft ? 'bottom' : 'top';
	            textAlign = 'center';
	        } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	            verticalAlign = onLeft ? 'top' : 'bottom';
	            textAlign = 'center';
	        } else {
	            verticalAlign = 'middle';
	            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	                textAlign = onLeft ? 'left' : 'right';
	            } else {
	                textAlign = onLeft ? 'right' : 'left';
	            }
	        }
	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }
	    /**
	     * @inner
	     */
	    function isSilent(axisModel) {
	        var tooltipOpt = axisModel.get('tooltip');
	        return axisModel.get('silent') || !(axisModel.get('triggerEvent') || tooltipOpt && tooltipOpt.show);
	    }
	    /**
	     * @static
	     */
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	            var rawTick;
	            var scale = axis.scale;
	            return scale.type === 'ordinal' && (typeof interval === 'function' ? (rawTick = scale.getTicks()[i], !interval(rawTick, scale.getLabel(rawTick))) : i % (interval + 1));
	        };
	    /**
	     * @static
	     */
	    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	            var interval = model.get('interval');
	            if (interval == null || interval == 'auto') {
	                interval = labelInterval;
	            }
	            return interval;
	        };
	    return AxisBuilder;
	});
	define('zrender/Layer', ['require', './core/util', './config', './graphic/Style', './graphic/Pattern'], function (require) {
	    var util = require('./core/util');
	    var config = require('./config');
	    var Style = require('./graphic/Style');
	    var Pattern = require('./graphic/Pattern');
	    function returnFalse() {
	        return false;
	    }
	    /**
	     * 创建dom
	     *
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     * @param {number} number
	     */
	    function createDom(id, type, painter, dpr) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();
	        var newDomStyle = newDom.style;
	        // 没append呢，请原谅我这样写，清晰~
	        newDomStyle.position = 'absolute';
	        newDomStyle.left = 0;
	        newDomStyle.top = 0;
	        newDomStyle.width = width + 'px';
	        newDomStyle.height = height + 'px';
	        newDom.width = width * dpr;
	        newDom.height = height * dpr;
	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }
	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     * @param {number} [dpr]
	     */
	    var Layer = function (id, painter, dpr) {
	        var dom;
	        dpr = dpr || config.devicePixelRatio;
	        if (typeof id === 'string') {
	            dom = createDom(id, 'canvas', painter, dpr);
	        }    // Not using isDom because in node it will return false
	        else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	        this.id = id;
	        this.dom = dom;
	        var domStyle = dom.style;
	        if (domStyle) {
	            // Not in node
	            dom.onselectstart = returnFalse;
	            // 避免页面选中的尴尬
	            domStyle['-webkit-user-select'] = 'none';
	            domStyle['user-select'] = 'none';
	            domStyle['-webkit-touch-callout'] = 'none';
	            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	        }
	        this.domBack = null;
	        this.ctxBack = null;
	        this.painter = painter;
	        this.config = null;
	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;
	        /**
	         * Layer dpr
	         * @type {number}
	         */
	        this.dpr = dpr;
	    };
	    Layer.prototype = {
	        constructor: Layer,
	        elCount: 0,
	        __dirty: true,
	        initContext: function () {
	            this.ctx = this.dom.getContext('2d');
	            var dpr = this.dpr;
	            if (dpr != 1) {
	                this.ctx.scale(dpr, dpr);
	            }
	        },
	        createBackBuffer: function () {
	            var dpr = this.dpr;
	            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	            this.ctxBack = this.domBack.getContext('2d');
	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        },
	        resize: function (width, height) {
	            var dpr = this.dpr;
	            var dom = this.dom;
	            var domStyle = dom.style;
	            var domBack = this.domBack;
	            domStyle.width = width + 'px';
	            domStyle.height = height + 'px';
	            dom.width = width * dpr;
	            dom.height = height * dpr;
	            if (dpr != 1) {
	                this.ctx.scale(dpr, dpr);
	            }
	            if (domBack) {
	                domBack.width = width * dpr;
	                domBack.height = height * dpr;
	                if (dpr != 1) {
	                    this.ctxBack.scale(dpr, dpr);
	                }
	            }
	        },
	        clear: function (clearAll) {
	            var dom = this.dom;
	            var ctx = this.ctx;
	            var width = dom.width;
	            var height = dom.height;
	            var clearColor = this.clearColor;
	            var haveMotionBLur = this.motionBlur && !clearAll;
	            var lastFrameAlpha = this.lastFrameAlpha;
	            var dpr = this.dpr;
	            if (haveMotionBLur) {
	                if (!this.domBack) {
	                    this.createBackBuffer();
	                }
	                this.ctxBack.globalCompositeOperation = 'copy';
	                this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	            }
	            ctx.clearRect(0, 0, width / dpr, height / dpr);
	            if (clearColor) {
	                var clearColorGradientOrPattern;
	                // Gradient
	                if (clearColor.colorStops) {
	                    // Cache canvas gradient
	                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	                        x: 0,
	                        y: 0,
	                        width: width / dpr,
	                        height: height / dpr
	                    });
	                    clearColor.__canvasGradient = clearColorGradientOrPattern;
	                }    // Pattern
	                else if (clearColor.image) {
	                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	                }
	                ctx.save();
	                ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	                ctx.fillRect(0, 0, width / dpr, height / dpr);
	                ctx.restore();
	            }
	            if (haveMotionBLur) {
	                var domBack = this.domBack;
	                ctx.save();
	                ctx.globalAlpha = lastFrameAlpha;
	                ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
	                ctx.restore();
	            }
	        }
	    };
	    return Layer;
	});
	define('echarts/preprocessor/helper/compatStyle', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var POSSIBLE_STYLES = [
	            'areaStyle',
	            'lineStyle',
	            'nodeStyle',
	            'linkStyle',
	            'chordStyle',
	            'label',
	            'labelLine'
	        ];
	    function compatItemStyle(opt) {
	        var itemStyleOpt = opt && opt.itemStyle;
	        if (itemStyleOpt) {
	            zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	                var normalItemStyleOpt = itemStyleOpt.normal;
	                var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].normal) {
	                        opt[styleName].normal = normalItemStyleOpt[styleName];
	                    } else {
	                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                    }
	                    normalItemStyleOpt[styleName] = null;
	                }
	                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].emphasis) {
	                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                    } else {
	                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                    }
	                    emphasisItemStyleOpt[styleName] = null;
	                }
	            });
	        }
	    }
	    return function (seriesOpt) {
	        if (!seriesOpt) {
	            return;
	        }
	        compatItemStyle(seriesOpt);
	        compatItemStyle(seriesOpt.markPoint);
	        compatItemStyle(seriesOpt.markLine);
	        var data = seriesOpt.data;
	        if (data) {
	            for (var i = 0; i < data.length; i++) {
	                compatItemStyle(data[i]);
	            }
	            // mark point data
	            var markPoint = seriesOpt.markPoint;
	            if (markPoint && markPoint.data) {
	                var mpData = markPoint.data;
	                for (var i = 0; i < mpData.length; i++) {
	                    compatItemStyle(mpData[i]);
	                }
	            }
	            // mark line data
	            var markLine = seriesOpt.markLine;
	            if (markLine && markLine.data) {
	                var mlData = markLine.data;
	                for (var i = 0; i < mlData.length; i++) {
	                    if (zrUtil.isArray(mlData[i])) {
	                        compatItemStyle(mlData[i][0]);
	                        compatItemStyle(mlData[i][1]);
	                    } else {
	                        compatItemStyle(mlData[i]);
	                    }
	                }
	            }
	        }
	    };
	});
	define('echarts/chart/helper/SymbolDraw', ['require', '../../util/graphic', './Symbol'], function (require) {
	    var graphic = require('../../util/graphic');
	    var Symbol = require('./Symbol');
	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/SymbolDraw
	     * @param {module:zrender/graphic/Group} [symbolCtor]
	     */
	    function SymbolDraw(symbolCtor) {
	        this.group = new graphic.Group();
	        this._symbolCtor = symbolCtor || Symbol;
	    }
	    var symbolDrawProto = SymbolDraw.prototype;
	    function symbolNeedsDraw(data, idx, isIgnore) {
	        var point = data.getItemLayout(idx);
	        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx)) && data.getItemVisual(idx, 'symbol') !== 'none';
	    }
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     * @param {Array.<boolean>} [isIgnore]
	     */
	    symbolDrawProto.updateData = function (data, isIgnore) {
	        var group = this.group;
	        var seriesModel = data.hostModel;
	        var oldData = this._data;
	        var SymbolCtor = this._symbolCtor;
	        var seriesScope = {
	                itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),
	                hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),
	                symbolRotate: seriesModel.get('symbolRotate'),
	                symbolOffset: seriesModel.get('symbolOffset'),
	                hoverAnimation: seriesModel.get('hoverAnimation'),
	                labelModel: seriesModel.getModel('label.normal'),
	                hoverLabelModel: seriesModel.getModel('label.emphasis')
	            };
	        data.diff(oldData).add(function (newIdx) {
	            var point = data.getItemLayout(newIdx);
	            if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	                var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	                symbolEl.attr('position', point);
	                data.setItemGraphicEl(newIdx, symbolEl);
	                group.add(symbolEl);
	            }
	        }).update(function (newIdx, oldIdx) {
	            var symbolEl = oldData.getItemGraphicEl(oldIdx);
	            var point = data.getItemLayout(newIdx);
	            if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	                group.remove(symbolEl);
	                return;
	            }
	            if (!symbolEl) {
	                symbolEl = new SymbolCtor(data, newIdx);
	                symbolEl.attr('position', point);
	            } else {
	                symbolEl.updateData(data, newIdx, seriesScope);
	                graphic.updateProps(symbolEl, { position: point }, seriesModel);
	            }
	            // Add back
	            group.add(symbolEl);
	            data.setItemGraphicEl(newIdx, symbolEl);
	        }).remove(function (oldIdx) {
	            var el = oldData.getItemGraphicEl(oldIdx);
	            el && el.fadeOut(function () {
	                group.remove(el);
	            });
	        }).execute();
	        this._data = data;
	    };
	    symbolDrawProto.updateLayout = function () {
	        var data = this._data;
	        if (data) {
	            // Not use animation
	            data.eachItemGraphicEl(function (el, idx) {
	                var point = data.getItemLayout(idx);
	                el.attr('position', point);
	            });
	        }
	    };
	    symbolDrawProto.remove = function (enableAnimation) {
	        var group = this.group;
	        var data = this._data;
	        if (data) {
	            if (enableAnimation) {
	                data.eachItemGraphicEl(function (el) {
	                    el.fadeOut(function () {
	                        group.remove(el);
	                    });
	                });
	            } else {
	                group.removeAll();
	            }
	        }
	    };
	    return SymbolDraw;
	});
	define('echarts/component/helper/selectableMixin', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    return {
	        updateSelectedMap: function (targetList) {
	            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	                targetMap[target.name] = target;
	                return targetMap;
	            }, {});
	        },
	        select: function (name) {
	            var targetMap = this._selectTargetMap;
	            var target = targetMap[name];
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                zrUtil.each(targetMap, function (target) {
	                    target.selected = false;
	                });
	            }
	            target && (target.selected = true);
	        },
	        unSelect: function (name) {
	            var target = this._selectTargetMap[name];
	            // var selectedMode = this.get('selectedMode');
	            // selectedMode !== 'single' && target && (target.selected = false);
	            target && (target.selected = false);
	        },
	        toggleSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            if (target != null) {
	                this[target.selected ? 'unSelect' : 'select'](name);
	                return target.selected;
	            }
	        },
	        isSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            return target && target.selected;
	        }
	    };
	});
	define('echarts/chart/line/poly', ['require', 'zrender/graphic/Path', 'zrender/core/vector'], function (require) {
	    var Path = require('zrender/graphic/Path');
	    var vec2 = require('zrender/core/vector');
	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;
	    var scaleAndAdd = vec2.scaleAndAdd;
	    var v2Copy = vec2.copy;
	    // Temporary variable
	    var v = [];
	    var cp0 = [];
	    var cp1 = [];
	    function isPointNull(p) {
	        return isNaN(p[0]) || isNaN(p[1]);
	    }
	    function drawSegment(ctx, points, start, segLen, allLen, dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
	        var prevIdx = 0;
	        var idx = start;
	        for (var k = 0; k < segLen; k++) {
	            var p = points[idx];
	            if (idx >= allLen || idx < 0) {
	                break;
	            }
	            if (isPointNull(p)) {
	                if (connectNulls) {
	                    idx += dir;
	                    continue;
	                }
	                break;
	            }
	            if (idx === start) {
	                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	                v2Copy(cp0, p);
	            } else {
	                if (smooth > 0) {
	                    var nextIdx = idx + dir;
	                    var nextP = points[nextIdx];
	                    if (connectNulls) {
	                        // Find next point not null
	                        while (nextP && isPointNull(points[nextIdx])) {
	                            nextIdx += dir;
	                            nextP = points[nextIdx];
	                        }
	                    }
	                    var ratioNextSeg = 0.5;
	                    var prevP = points[prevIdx];
	                    var nextP = points[nextIdx];
	                    // Last point
	                    if (!nextP || isPointNull(nextP)) {
	                        v2Copy(cp1, p);
	                    } else {
	                        // If next data is null in not connect case
	                        if (isPointNull(nextP) && !connectNulls) {
	                            nextP = p;
	                        }
	                        vec2.sub(v, nextP, prevP);
	                        var lenPrevSeg;
	                        var lenNextSeg;
	                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                            var dim = smoothMonotone === 'x' ? 0 : 1;
	                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                        } else {
	                            lenPrevSeg = vec2.dist(p, prevP);
	                            lenNextSeg = vec2.dist(p, nextP);
	                        }
	                        // Use ratio of seg length
	                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
	                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                    }
	                    // Smooth constraint
	                    vec2Min(cp0, cp0, smoothMax);
	                    vec2Max(cp0, cp0, smoothMin);
	                    vec2Min(cp1, cp1, smoothMax);
	                    vec2Max(cp1, cp1, smoothMin);
	                    ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
	                    // cp0 of next segment
	                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	                } else {
	                    ctx.lineTo(p[0], p[1]);
	                }
	            }
	            prevIdx = idx;
	            idx += dir;
	        }
	        return k;
	    }
	    function getBoundingBox(points, smoothConstraint) {
	        var ptMin = [
	                Infinity,
	                Infinity
	            ];
	        var ptMax = [
	                -Infinity,
	                -Infinity
	            ];
	        if (smoothConstraint) {
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                if (pt[0] < ptMin[0]) {
	                    ptMin[0] = pt[0];
	                }
	                if (pt[1] < ptMin[1]) {
	                    ptMin[1] = pt[1];
	                }
	                if (pt[0] > ptMax[0]) {
	                    ptMax[0] = pt[0];
	                }
	                if (pt[1] > ptMax[1]) {
	                    ptMax[1] = pt[1];
	                }
	            }
	        }
	        return {
	            min: smoothConstraint ? ptMin : ptMax,
	            max: smoothConstraint ? ptMax : ptMin
	        };
	    }
	    return {
	        Polyline: Path.extend({
	            type: 'ec-polyline',
	            shape: {
	                points: [],
	                smooth: 0,
	                smoothConstraint: true,
	                smoothMonotone: null,
	                connectNulls: false
	            },
	            style: {
	                fill: null,
	                stroke: '#000'
	            },
	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	                var i = 0;
	                var len = points.length;
	                var result = getBoundingBox(points, shape.smoothConstraint);
	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    i += drawSegment(ctx, points, i, len, len, 1, result.min, result.max, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
	                }
	            }
	        }),
	        Polygon: Path.extend({
	            type: 'ec-polygon',
	            shape: {
	                points: [],
	                stackedOnPoints: [],
	                smooth: 0,
	                stackedOnSmooth: 0,
	                smoothConstraint: true,
	                smoothMonotone: null,
	                connectNulls: false
	            },
	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	                var stackedOnPoints = shape.stackedOnPoints;
	                var i = 0;
	                var len = points.length;
	                var smoothMonotone = shape.smoothMonotone;
	                var bbox = getBoundingBox(points, shape.smoothConstraint);
	                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    var k = drawSegment(ctx, points, i, len, len, 1, bbox.min, bbox.max, shape.smooth, smoothMonotone, shape.connectNulls);
	                    drawSegment(ctx, stackedOnPoints, i + k - 1, k, len, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
	                    i += k + 1;
	                    ctx.closePath();
	                }
	            }
	        })
	    };
	});
	define('echarts/chart/helper/Symbol', ['require', 'zrender/core/util', '../../util/symbol', '../../util/graphic', '../../util/number'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var symbolUtil = require('../../util/symbol');
	    var graphic = require('../../util/graphic');
	    var numberUtil = require('../../util/number');
	    function normalizeSymbolSize(symbolSize) {
	        if (!(symbolSize instanceof Array)) {
	            symbolSize = [
	                +symbolSize,
	                +symbolSize
	            ];
	        }
	        return symbolSize;
	    }
	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/Symbol}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function Symbol(data, idx, seriesScope) {
	        graphic.Group.call(this);
	        this.updateData(data, idx, seriesScope);
	    }
	    var symbolProto = Symbol.prototype;
	    function driftSymbol(dx, dy) {
	        this.parent.drift(dx, dy);
	    }
	    symbolProto._createSymbol = function (symbolType, data, idx) {
	        // Remove paths created before
	        this.removeAll();
	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');
	        var symbolPath = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	        symbolPath.attr({
	            z2: 100,
	            culling: true,
	            scale: [
	                0,
	                0
	            ]
	        });
	        // Rewrite drift method
	        symbolPath.drift = driftSymbol;
	        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        graphic.initProps(symbolPath, { scale: size }, seriesModel, idx);
	        this._symbolType = symbolType;
	        this.add(symbolPath);
	    };
	    /**
	     * Stop animation
	     * @param {boolean} toLastFrame
	     */
	    symbolProto.stopSymbolAnimation = function (toLastFrame) {
	        this.childAt(0).stopAnimation(toLastFrame);
	    };
	    /**
	     * Get scale(aka, current symbol size).
	     * Including the change caused by animation
	     */
	    symbolProto.getScale = function () {
	        return this.childAt(0).scale;
	    };
	    /**
	     * Highlight symbol
	     */
	    symbolProto.highlight = function () {
	        this.childAt(0).trigger('emphasis');
	    };
	    /**
	     * Downplay symbol
	     */
	    symbolProto.downplay = function () {
	        this.childAt(0).trigger('normal');
	    };
	    /**
	     * @param {number} zlevel
	     * @param {number} z
	     */
	    symbolProto.setZ = function (zlevel, z) {
	        var symbolPath = this.childAt(0);
	        symbolPath.zlevel = zlevel;
	        symbolPath.z = z;
	    };
	    symbolProto.setDraggable = function (draggable) {
	        var symbolPath = this.childAt(0);
	        symbolPath.draggable = draggable;
	        symbolPath.cursor = draggable ? 'move' : 'pointer';
	    };
	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    symbolProto.updateData = function (data, idx, seriesScope) {
	        this.silent = false;
	        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	        var seriesModel = data.hostModel;
	        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        if (symbolType !== this._symbolType) {
	            this._createSymbol(symbolType, data, idx);
	        } else {
	            var symbolPath = this.childAt(0);
	            graphic.updateProps(symbolPath, { scale: symbolSize }, seriesModel, idx);
	        }
	        this._updateCommon(data, idx, symbolSize, seriesScope);
	        this._seriesModel = seriesModel;
	    };
	    // Update common properties
	    var normalStyleAccessPath = [
	            'itemStyle',
	            'normal'
	        ];
	    var emphasisStyleAccessPath = [
	            'itemStyle',
	            'emphasis'
	        ];
	    var normalLabelAccessPath = [
	            'label',
	            'normal'
	        ];
	    var emphasisLabelAccessPath = [
	            'label',
	            'emphasis'
	        ];
	    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	        var symbolPath = this.childAt(0);
	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');
	        // Reset style
	        if (symbolPath.type !== 'image') {
	            symbolPath.useStyle({ strokeNoScale: true });
	        }
	        seriesScope = seriesScope || null;
	        var itemStyle = seriesScope && seriesScope.itemStyle;
	        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	        var symbolRotate = seriesScope && seriesScope.symbolRotate;
	        var symbolOffset = seriesScope && seriesScope.symbolOffset;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;
	        if (!seriesScope || data.hasItemOption) {
	            var itemModel = data.getItemModel(idx);
	            // Color must be excluded.
	            // Because symbol provide setColor individually to set fill and stroke
	            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	            symbolRotate = itemModel.getShallow('symbolRotate');
	            symbolOffset = itemModel.getShallow('symbolOffset');
	            labelModel = itemModel.getModel(normalLabelAccessPath);
	            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	            hoverAnimation = itemModel.getShallow('hoverAnimation');
	        } else {
	            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	        }
	        var elStyle = symbolPath.style;
	        symbolPath.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	        if (symbolOffset) {
	            symbolPath.attr('position', [
	                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),
	                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])
	            ]);
	        }
	        // PENDING setColor before setStyle!!!
	        symbolPath.setColor(color);
	        symbolPath.setStyle(itemStyle);
	        var opacity = data.getItemVisual(idx, 'opacity');
	        if (opacity != null) {
	            elStyle.opacity = opacity;
	        }
	        // Get last value dim
	        var dimensions = data.dimensions.slice();
	        var valueDim;
	        var dataType;
	        while (dimensions.length && (valueDim = dimensions.pop(), dataType = data.getDimensionInfo(valueDim).type, dataType === 'ordinal' || dataType === 'time')) {
	        }
	        // jshint ignore:line
	        if (valueDim != null && labelModel.getShallow('show')) {
	            graphic.setText(elStyle, labelModel, color);
	            elStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), data.get(valueDim, idx));
	        } else {
	            elStyle.text = '';
	        }
	        if (valueDim != null && hoverLabelModel.getShallow('show')) {
	            graphic.setText(hoverItemStyle, hoverLabelModel, color);
	            hoverItemStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), data.get(valueDim, idx));
	        } else {
	            hoverItemStyle.text = '';
	        }
	        var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        symbolPath.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        graphic.setHoverStyle(symbolPath, hoverItemStyle);
	        if (hoverAnimation && seriesModel.ifEnableAnimation()) {
	            var onEmphasis = function () {
	                var ratio = size[1] / size[0];
	                this.animateTo({
	                    scale: [
	                        Math.max(size[0] * 1.1, size[0] + 3),
	                        Math.max(size[1] * 1.1, size[1] + 3 * ratio)
	                    ]
	                }, 400, 'elasticOut');
	            };
	            var onNormal = function () {
	                this.animateTo({ scale: size }, 400, 'elasticOut');
	            };
	            symbolPath.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	        }
	    };
	    symbolProto.fadeOut = function (cb) {
	        var symbolPath = this.childAt(0);
	        // Avoid mistaken hover when fading out
	        this.silent = true;
	        // Not show text when animating
	        symbolPath.style.text = '';
	        graphic.updateProps(symbolPath, {
	            scale: [
	                0,
	                0
	            ]
	        }, this._seriesModel, this.dataIndex, cb);
	    };
	    zrUtil.inherits(Symbol, graphic.Group);
	    return Symbol;
	});
	define('echarts/chart/line/lineAnimationDiff', ['require'], function (require) {
	    // var arrayDiff = require('zrender/core/arrayDiff');
	    // 'zrender/core/arrayDiff' has been used before, but it did
	    // not do well in performance when roam with fixed dataZoom window.
	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	    function getStackedOnPoint(coordSys, data, idx) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];
	        var valueDim = valueAxis.dim;
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        var val = data.get(valueDim, idx);
	        // Find first stacked value with same sign
	        while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	        return coordSys.dataToPoint(stackedData);
	    }
	    // function convertToIntId(newIdList, oldIdList) {
	    //     // Generate int id instead of string id.
	    //     // Compare string maybe slow in score function of arrDiff
	    //     // Assume id in idList are all unique
	    //     var idIndicesMap = {};
	    //     var idx = 0;
	    //     for (var i = 0; i < newIdList.length; i++) {
	    //         idIndicesMap[newIdList[i]] = idx;
	    //         newIdList[i] = idx++;
	    //     }
	    //     for (var i = 0; i < oldIdList.length; i++) {
	    //         var oldId = oldIdList[i];
	    //         // Same with newIdList
	    //         if (idIndicesMap[oldId]) {
	    //             oldIdList[i] = idIndicesMap[oldId];
	    //         }
	    //         else {
	    //             oldIdList[i] = idx++;
	    //         }
	    //     }
	    // }
	    function diffData(oldData, newData) {
	        var diffResult = [];
	        newData.diff(oldData).add(function (idx) {
	            diffResult.push({
	                cmd: '+',
	                idx: idx
	            });
	        }).update(function (newIdx, oldIdx) {
	            diffResult.push({
	                cmd: '=',
	                idx: oldIdx,
	                idx1: newIdx
	            });
	        }).remove(function (idx) {
	            diffResult.push({
	                cmd: '-',
	                idx: idx
	            });
	        }).execute();
	        return diffResult;
	    }
	    return function (oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys) {
	        var diff = diffData(oldData, newData);
	        // var newIdList = newData.mapArray(newData.getId);
	        // var oldIdList = oldData.mapArray(oldData.getId);
	        // convertToIntId(newIdList, oldIdList);
	        // // FIXME One data ?
	        // diff = arrayDiff(oldIdList, newIdList);
	        var currPoints = [];
	        var nextPoints = [];
	        // Points for stacking base line
	        var currStackedPoints = [];
	        var nextStackedPoints = [];
	        var status = [];
	        var sortedIndices = [];
	        var rawIndices = [];
	        var dims = newCoordSys.dimensions;
	        for (var i = 0; i < diff.length; i++) {
	            var diffItem = diff[i];
	            var pointAdded = true;
	            // FIXME, animation is not so perfect when dataZoom window moves fast
	            // Which is in case remvoing or add more than one data in the tail or head
	            switch (diffItem.cmd) {
	            case '=':
	                var currentPt = oldData.getItemLayout(diffItem.idx);
	                var nextPt = newData.getItemLayout(diffItem.idx1);
	                // If previous data is NaN, use next point directly
	                if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                    currentPt = nextPt.slice();
	                }
	                currPoints.push(currentPt);
	                nextPoints.push(nextPt);
	                currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
	                rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                break;
	            case '+':
	                var idx = diffItem.idx;
	                currPoints.push(oldCoordSys.dataToPoint([
	                    newData.get(dims[0], idx, true),
	                    newData.get(dims[1], idx, true)
	                ]));
	                nextPoints.push(newData.getItemLayout(idx).slice());
	                currStackedPoints.push(getStackedOnPoint(oldCoordSys, newData, idx));
	                nextStackedPoints.push(newStackedOnPoints[idx]);
	                rawIndices.push(newData.getRawIndex(idx));
	                break;
	            case '-':
	                var idx = diffItem.idx;
	                var rawIndex = oldData.getRawIndex(idx);
	                // Data is replaced. In the case of dynamic data queue
	                // FIXME FIXME FIXME
	                if (rawIndex !== idx) {
	                    currPoints.push(oldData.getItemLayout(idx));
	                    nextPoints.push(newCoordSys.dataToPoint([
	                        oldData.get(dims[0], idx, true),
	                        oldData.get(dims[1], idx, true)
	                    ]));
	                    currStackedPoints.push(oldStackedOnPoints[idx]);
	                    nextStackedPoints.push(getStackedOnPoint(newCoordSys, oldData, idx));
	                    rawIndices.push(rawIndex);
	                } else {
	                    pointAdded = false;
	                }
	            }
	            // Original indices
	            if (pointAdded) {
	                status.push(diffItem);
	                sortedIndices.push(sortedIndices.length);
	            }
	        }
	        // Diff result may be crossed if all items are changed
	        // Sort by data index
	        sortedIndices.sort(function (a, b) {
	            return rawIndices[a] - rawIndices[b];
	        });
	        var sortedCurrPoints = [];
	        var sortedNextPoints = [];
	        var sortedCurrStackedPoints = [];
	        var sortedNextStackedPoints = [];
	        var sortedStatus = [];
	        for (var i = 0; i < sortedIndices.length; i++) {
	            var idx = sortedIndices[i];
	            sortedCurrPoints[i] = currPoints[idx];
	            sortedNextPoints[i] = nextPoints[idx];
	            sortedCurrStackedPoints[i] = currStackedPoints[idx];
	            sortedNextStackedPoints[i] = nextStackedPoints[idx];
	            sortedStatus[i] = status[idx];
	        }
	        return {
	            current: sortedCurrPoints,
	            next: sortedNextPoints,
	            stackedOnCurrent: sortedCurrStackedPoints,
	            stackedOnNext: sortedNextStackedPoints,
	            status: sortedStatus
	        };
	    };
	});
	define('echarts/util/symbol', ['require', './graphic', 'zrender/core/BoundingRect'], function (require) {
	    'use strict';
	    var graphic = require('./graphic');
	    var BoundingRect = require('zrender/core/BoundingRect');
	    /**
	     * Triangle shape
	     * @inner
	     */
	    var Triangle = graphic.extendShape({
	            type: 'triangle',
	            shape: {
	                cx: 0,
	                cy: 0,
	                width: 0,
	                height: 0
	            },
	            buildPath: function (path, shape) {
	                var cx = shape.cx;
	                var cy = shape.cy;
	                var width = shape.width / 2;
	                var height = shape.height / 2;
	                path.moveTo(cx, cy - height);
	                path.lineTo(cx + width, cy + height);
	                path.lineTo(cx - width, cy + height);
	                path.closePath();
	            }
	        });
	    /**
	     * Diamond shape
	     * @inner
	     */
	    var Diamond = graphic.extendShape({
	            type: 'diamond',
	            shape: {
	                cx: 0,
	                cy: 0,
	                width: 0,
	                height: 0
	            },
	            buildPath: function (path, shape) {
	                var cx = shape.cx;
	                var cy = shape.cy;
	                var width = shape.width / 2;
	                var height = shape.height / 2;
	                path.moveTo(cx, cy - height);
	                path.lineTo(cx + width, cy);
	                path.lineTo(cx, cy + height);
	                path.lineTo(cx - width, cy);
	                path.closePath();
	            }
	        });
	    /**
	     * Pin shape
	     * @inner
	     */
	    var Pin = graphic.extendShape({
	            type: 'pin',
	            shape: {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0
	            },
	            buildPath: function (path, shape) {
	                var x = shape.x;
	                var y = shape.y;
	                var w = shape.width / 5 * 3;
	                // Height must be larger than width
	                var h = Math.max(w, shape.height);
	                var r = w / 2;
	                // Dist on y with tangent point and circle center
	                var dy = r * r / (h - r);
	                var cy = y - h + r + dy;
	                var angle = Math.asin(dy / r);
	                // Dist on x with tangent point and circle center
	                var dx = Math.cos(angle) * r;
	                var tanX = Math.sin(angle);
	                var tanY = Math.cos(angle);
	                path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
	                var cpLen = r * 0.6;
	                var cpLen2 = r * 0.7;
	                path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	                path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	                path.closePath();
	            }
	        });
	    /**
	     * Arrow shape
	     * @inner
	     */
	    var Arrow = graphic.extendShape({
	            type: 'arrow',
	            shape: {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0
	            },
	            buildPath: function (ctx, shape) {
	                var height = shape.height;
	                var width = shape.width;
	                var x = shape.x;
	                var y = shape.y;
	                var dx = width / 3 * 2;
	                ctx.moveTo(x, y);
	                ctx.lineTo(x + dx, y + height);
	                ctx.lineTo(x, y + height / 4 * 3);
	                ctx.lineTo(x - dx, y + height);
	                ctx.lineTo(x, y);
	                ctx.closePath();
	            }
	        });
	    /**
	     * Map of path contructors
	     * @type {Object.<string, module:zrender/graphic/Path>}
	     */
	    var symbolCtors = {
	            line: graphic.Line,
	            rect: graphic.Rect,
	            roundRect: graphic.Rect,
	            square: graphic.Rect,
	            circle: graphic.Circle,
	            diamond: Diamond,
	            pin: Pin,
	            arrow: Arrow,
	            triangle: Triangle
	        };
	    var symbolShapeMakers = {
	            line: function (x, y, w, h, shape) {
	                // FIXME
	                shape.x1 = x;
	                shape.y1 = y + h / 2;
	                shape.x2 = x + w;
	                shape.y2 = y + h / 2;
	            },
	            rect: function (x, y, w, h, shape) {
	                shape.x = x;
	                shape.y = y;
	                shape.width = w;
	                shape.height = h;
	            },
	            roundRect: function (x, y, w, h, shape) {
	                shape.x = x;
	                shape.y = y;
	                shape.width = w;
	                shape.height = h;
	                shape.r = Math.min(w, h) / 4;
	            },
	            square: function (x, y, w, h, shape) {
	                var size = Math.min(w, h);
	                shape.x = x;
	                shape.y = y;
	                shape.width = size;
	                shape.height = size;
	            },
	            circle: function (x, y, w, h, shape) {
	                // Put circle in the center of square
	                shape.cx = x + w / 2;
	                shape.cy = y + h / 2;
	                shape.r = Math.min(w, h) / 2;
	            },
	            diamond: function (x, y, w, h, shape) {
	                shape.cx = x + w / 2;
	                shape.cy = y + h / 2;
	                shape.width = w;
	                shape.height = h;
	            },
	            pin: function (x, y, w, h, shape) {
	                shape.x = x + w / 2;
	                shape.y = y + h / 2;
	                shape.width = w;
	                shape.height = h;
	            },
	            arrow: function (x, y, w, h, shape) {
	                shape.x = x + w / 2;
	                shape.y = y + h / 2;
	                shape.width = w;
	                shape.height = h;
	            },
	            triangle: function (x, y, w, h, shape) {
	                shape.cx = x + w / 2;
	                shape.cy = y + h / 2;
	                shape.width = w;
	                shape.height = h;
	            }
	        };
	    var symbolBuildProxies = {};
	    for (var name in symbolCtors) {
	        symbolBuildProxies[name] = new symbolCtors[name]();
	    }
	    var Symbol = graphic.extendShape({
	            type: 'symbol',
	            shape: {
	                symbolType: '',
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0
	            },
	            beforeBrush: function () {
	                var style = this.style;
	                var shape = this.shape;
	                // FIXME
	                if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	                    style.textPosition = [
	                        '50%',
	                        '40%'
	                    ];
	                    style.textAlign = 'center';
	                    style.textVerticalAlign = 'middle';
	                }
	            },
	            buildPath: function (ctx, shape, inBundle) {
	                var symbolType = shape.symbolType;
	                var proxySymbol = symbolBuildProxies[symbolType];
	                if (shape.symbolType !== 'none') {
	                    if (!proxySymbol) {
	                        // Default rect
	                        symbolType = 'rect';
	                        proxySymbol = symbolBuildProxies[symbolType];
	                    }
	                    symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	                    proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	                }
	            }
	        });
	    // Provide setColor helper method to avoid determine if set the fill or stroke outside
	    var symbolPathSetColor = function (color) {
	        if (this.type !== 'image') {
	            var symbolStyle = this.style;
	            var symbolShape = this.shape;
	            if (symbolShape && symbolShape.symbolType === 'line') {
	                symbolStyle.stroke = color;
	            } else if (this.__isEmptyBrush) {
	                symbolStyle.stroke = color;
	                symbolStyle.fill = '#fff';
	            } else {
	                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	                symbolStyle.fill && (symbolStyle.fill = color);
	                symbolStyle.stroke && (symbolStyle.stroke = color);
	            }
	            this.dirty(false);
	        }
	    };
	    var symbolUtil = {
	            createSymbol: function (symbolType, x, y, w, h, color) {
	                var isEmpty = symbolType.indexOf('empty') === 0;
	                if (isEmpty) {
	                    symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	                }
	                var symbolPath;
	                if (symbolType.indexOf('image://') === 0) {
	                    symbolPath = new graphic.Image({
	                        style: {
	                            image: symbolType.slice(8),
	                            x: x,
	                            y: y,
	                            width: w,
	                            height: h
	                        }
	                    });
	                } else if (symbolType.indexOf('path://') === 0) {
	                    symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	                } else {
	                    symbolPath = new Symbol({
	                        shape: {
	                            symbolType: symbolType,
	                            x: x,
	                            y: y,
	                            width: w,
	                            height: h
	                        }
	                    });
	                }
	                symbolPath.__isEmptyBrush = isEmpty;
	                symbolPath.setColor = symbolPathSetColor;
	                symbolPath.setColor(color);
	                return symbolPath;
	            }
	        };
	    return symbolUtil;
	});
	define('echarts/component/tooltip/TooltipContent', ['require', 'zrender/core/util', 'zrender/tool/color', 'zrender/core/event', '../../util/format', 'zrender/core/env'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var zrColor = require('zrender/tool/color');
	    var eventUtil = require('zrender/core/event');
	    var formatUtil = require('../../util/format');
	    var each = zrUtil.each;
	    var toCamelCase = formatUtil.toCamelCase;
	    var env = require('zrender/core/env');
	    var vendors = [
	            '',
	            '-webkit-',
	            '-moz-',
	            '-o-'
	        ];
	    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
	    /**
	     * @param {number} duration
	     * @return {string}
	     * @inner
	     */
	    function assembleTransition(duration) {
	        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	        var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	        return zrUtil.map(vendors, function (vendorPrefix) {
	            return vendorPrefix + 'transition:' + transitionText;
	        }).join(';');
	    }
	    /**
	     * @param {Object} textStyle
	     * @return {string}
	     * @inner
	     */
	    function assembleFont(textStyleModel) {
	        var cssText = [];
	        var fontSize = textStyleModel.get('fontSize');
	        var color = textStyleModel.getTextColor();
	        color && cssText.push('color:' + color);
	        cssText.push('font:' + textStyleModel.getFont());
	        fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	        each([
	            'decoration',
	            'align'
	        ], function (name) {
	            var val = textStyleModel.get(name);
	            val && cssText.push('text-' + name + ':' + val);
	        });
	        return cssText.join(';');
	    }
	    /**
	     * @param {Object} tooltipModel
	     * @return {string}
	     * @inner
	     */
	    function assembleCssText(tooltipModel) {
	        tooltipModel = tooltipModel;
	        var cssText = [];
	        var transitionDuration = tooltipModel.get('transitionDuration');
	        var backgroundColor = tooltipModel.get('backgroundColor');
	        var textStyleModel = tooltipModel.getModel('textStyle');
	        var padding = tooltipModel.get('padding');
	        // Animation transition
	        transitionDuration && cssText.push(assembleTransition(transitionDuration));
	        if (backgroundColor) {
	            if (env.canvasSupported) {
	                cssText.push('background-Color:' + backgroundColor);
	            } else {
	                // for ie
	                cssText.push('background-Color:#' + zrColor.toHex(backgroundColor));
	                cssText.push('filter:alpha(opacity=70)');
	            }
	        }
	        // Border style
	        each([
	            'width',
	            'color',
	            'radius'
	        ], function (name) {
	            var borderName = 'border-' + name;
	            var camelCase = toCamelCase(borderName);
	            var val = tooltipModel.get(camelCase);
	            val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	        });
	        // Text style
	        cssText.push(assembleFont(textStyleModel));
	        // Padding
	        if (padding != null) {
	            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	        }
	        return cssText.join(';') + ';';
	    }
	    /**
	     * @alias module:echarts/component/tooltip/TooltipContent
	     * @constructor
	     */
	    function TooltipContent(container, api) {
	        var el = document.createElement('div');
	        var zr = api.getZr();
	        this.el = el;
	        this._x = api.getWidth() / 2;
	        this._y = api.getHeight() / 2;
	        container.appendChild(el);
	        this._container = container;
	        this._show = false;
	        /**
	         * @private
	         */
	        this._hideTimeout;
	        var self = this;
	        el.onmouseenter = function () {
	            // clear the timeout in hideLater and keep showing tooltip
	            if (self.enterable) {
	                clearTimeout(self._hideTimeout);
	                self._show = true;
	            }
	            self._inContent = true;
	        };
	        el.onmousemove = function (e) {
	            if (!self.enterable) {
	                // Try trigger zrender event to avoid mouse
	                // in and out shape too frequently
	                var handler = zr.handler;
	                eventUtil.normalizeEvent(container, e);
	                handler.dispatch('mousemove', e);
	            }
	        };
	        el.onmouseleave = function () {
	            if (self.enterable) {
	                if (self._show) {
	                    self.hideLater(self._hideDelay);
	                }
	            }
	            self._inContent = false;
	        };
	        compromiseMobile(el, container);
	    }
	    function compromiseMobile(tooltipContentEl, container) {
	        // Prevent default behavior on mobile. For example,
	        // default pinch gesture will cause browser zoom.
	        // We do not preventing event on tooltip contnet el,
	        // because user may need customization in tooltip el.
	        eventUtil.addEventListener(container, 'touchstart', preventDefault);
	        eventUtil.addEventListener(container, 'touchmove', preventDefault);
	        eventUtil.addEventListener(container, 'touchend', preventDefault);
	        function preventDefault(e) {
	            if (contains(e.target)) {
	                e.preventDefault();
	            }
	        }
	        function contains(targetEl) {
	            while (targetEl && targetEl !== container) {
	                if (targetEl === tooltipContentEl) {
	                    return true;
	                }
	                targetEl = targetEl.parentNode;
	            }
	        }
	    }
	    TooltipContent.prototype = {
	        constructor: TooltipContent,
	        enterable: true,
	        update: function () {
	            var container = this._container;
	            var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	            var domStyle = container.style;
	            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	                domStyle.position = 'relative';
	            }    // Hide the tooltip
	                 // PENDING
	                 // this.hide();
	        },
	        show: function (tooltipModel) {
	            clearTimeout(this._hideTimeout);
	            var el = this.el;
	            el.style.cssText = gCssText + assembleCssText(tooltipModel) + ';left:' + this._x + 'px;top:' + this._y + 'px;' + (tooltipModel.get('extraCssText') || '');
	            el.style.display = el.innerHTML ? 'block' : 'none';
	            this._show = true;
	        },
	        setContent: function (content) {
	            var el = this.el;
	            el.innerHTML = content;
	            el.style.display = content ? 'block' : 'none';
	        },
	        moveTo: function (x, y) {
	            var style = this.el.style;
	            style.left = x + 'px';
	            style.top = y + 'px';
	            this._x = x;
	            this._y = y;
	        },
	        hide: function () {
	            this.el.style.display = 'none';
	            this._show = false;
	        },
	        hideLater: function (time) {
	            if (this._show && !(this._inContent && this.enterable)) {
	                if (time) {
	                    this._hideDelay = time;
	                    // Set show false to avoid invoke hideLater mutiple times
	                    this._show = false;
	                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	                } else {
	                    this.hide();
	                }
	            }
	        },
	        isShow: function () {
	            return this._show;
	        }
	    };
	    return TooltipContent;
	});
	define('echarts/component/marker/MarkerView', ['require', '../../echarts'], function (require) {
	    return require('../../echarts').extendComponentView({
	        type: 'marker',
	        init: function () {
	            /**
	             * Markline grouped by series
	             * @private
	             * @type {Object}
	             */
	            this.markerGroupMap = {};
	        },
	        render: function (markerModel, ecModel, api) {
	            var markerGroupMap = this.markerGroupMap;
	            for (var name in markerGroupMap) {
	                markerGroupMap[name].__keep = false;
	            }
	            var markerModelKey = this.type + 'Model';
	            ecModel.eachSeries(function (seriesModel) {
	                var markerModel = seriesModel[markerModelKey];
	                markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);
	            }, this);
	            for (var name in markerGroupMap) {
	                if (!markerGroupMap[name].__keep) {
	                    this.group.remove(markerGroupMap[name].group);
	                }
	            }
	        },
	        renderSeries: function () {
	        }
	    });
	});
	define('echarts/chart/helper/LineDraw', ['require', '../../util/graphic', './Line'], function (require) {
	    var graphic = require('../../util/graphic');
	    var LineGroup = require('./Line');
	    function isPointNaN(pt) {
	        return isNaN(pt[0]) || isNaN(pt[1]);
	    }
	    function lineNeedsDraw(pts) {
	        return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
	    }
	    /**
	     * @alias module:echarts/component/marker/LineDraw
	     * @constructor
	     */
	    function LineDraw(ctor) {
	        this._ctor = ctor || LineGroup;
	        this.group = new graphic.Group();
	    }
	    var lineDrawProto = LineDraw.prototype;
	    /**
	     * @param {module:echarts/data/List} lineData
	     */
	    lineDrawProto.updateData = function (lineData) {
	        var oldLineData = this._lineData;
	        var group = this.group;
	        var LineCtor = this._ctor;
	        var hostModel = lineData.hostModel;
	        var seriesScope = {
	                lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),
	                hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),
	                labelModel: hostModel.getModel('label.normal'),
	                hoverLabelModel: hostModel.getModel('label.emphasis')
	            };
	        lineData.diff(oldLineData).add(function (idx) {
	            if (!lineNeedsDraw(lineData.getItemLayout(idx))) {
	                return;
	            }
	            var lineGroup = new LineCtor(lineData, idx, seriesScope);
	            lineData.setItemGraphicEl(idx, lineGroup);
	            group.add(lineGroup);
	        }).update(function (newIdx, oldIdx) {
	            var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
	            if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {
	                group.remove(lineGroup);
	                return;
	            }
	            if (!lineGroup) {
	                lineGroup = new LineCtor(lineData, newIdx, seriesScope);
	            } else {
	                lineGroup.updateData(lineData, newIdx, seriesScope);
	            }
	            lineData.setItemGraphicEl(newIdx, lineGroup);
	            group.add(lineGroup);
	        }).remove(function (idx) {
	            group.remove(oldLineData.getItemGraphicEl(idx));
	        }).execute();
	        this._lineData = lineData;
	    };
	    lineDrawProto.updateLayout = function () {
	        var lineData = this._lineData;
	        lineData.eachItemGraphicEl(function (el, idx) {
	            el.updateLayout(lineData, idx);
	        }, this);
	    };
	    lineDrawProto.remove = function () {
	        this.group.removeAll();
	    };
	    return LineDraw;
	});
	define('echarts/chart/pie/labelLayout', ['require', 'zrender/contain/text'], function (require) {
	    'use strict';
	    var textContain = require('zrender/contain/text');
	    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	        list.sort(function (a, b) {
	            return a.y - b.y;
	        });
	        // 压
	        function shiftDown(start, end, delta, dir) {
	            for (var j = start; j < end; j++) {
	                list[j].y += delta;
	                if (j > start && j + 1 < end && list[j + 1].y > list[j].y + list[j].height) {
	                    shiftUp(j, delta / 2);
	                    return;
	                }
	            }
	            shiftUp(end - 1, delta / 2);
	        }
	        // 弹
	        function shiftUp(end, delta) {
	            for (var j = end; j >= 0; j--) {
	                list[j].y -= delta;
	                if (j > 0 && list[j].y > list[j - 1].y + list[j - 1].height) {
	                    break;
	                }
	            }
	        }
	        function changeX(list, isDownList, cx, cy, r, dir) {
	            var lastDeltaX = dir > 0 ? isDownList ? Number.MAX_VALUE : 0 : isDownList ? Number.MAX_VALUE : 0;
	            // 上
	            for (var i = 0, l = list.length; i < l; i++) {
	                // Not change x for center label
	                if (list[i].position === 'center') {
	                    continue;
	                }
	                var deltaY = Math.abs(list[i].y - cy);
	                var length = list[i].len;
	                var length2 = list[i].len2;
	                var deltaX = deltaY < r + length ? Math.sqrt((r + length + length2) * (r + length + length2) - deltaY * deltaY) : Math.abs(list[i].x - cx);
	                if (isDownList && deltaX >= lastDeltaX) {
	                    // 右下，左下
	                    deltaX = lastDeltaX - 10;
	                }
	                if (!isDownList && deltaX <= lastDeltaX) {
	                    // 右上，左上
	                    deltaX = lastDeltaX + 10;
	                }
	                list[i].x = cx + deltaX * dir;
	                lastDeltaX = deltaX;
	            }
	        }
	        var lastY = 0;
	        var delta;
	        var len = list.length;
	        var upList = [];
	        var downList = [];
	        for (var i = 0; i < len; i++) {
	            delta = list[i].y - lastY;
	            if (delta < 0) {
	                shiftDown(i, len, -delta, dir);
	            }
	            lastY = list[i].y + list[i].height;
	        }
	        if (viewHeight - lastY < 0) {
	            shiftUp(len - 1, lastY - viewHeight);
	        }
	        for (var i = 0; i < len; i++) {
	            if (list[i].y >= cy) {
	                downList.push(list[i]);
	            } else {
	                upList.push(list[i]);
	            }
	        }
	        changeX(upList, false, cx, cy, r, dir);
	        changeX(downList, true, cx, cy, r, dir);
	    }
	    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	        var leftList = [];
	        var rightList = [];
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            if (labelLayoutList[i].x < cx) {
	                leftList.push(labelLayoutList[i]);
	            } else {
	                rightList.push(labelLayoutList[i]);
	            }
	        }
	        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            var linePoints = labelLayoutList[i].linePoints;
	            if (linePoints) {
	                var dist = linePoints[1][0] - linePoints[2][0];
	                if (labelLayoutList[i].x < cx) {
	                    linePoints[2][0] = labelLayoutList[i].x + 3;
	                } else {
	                    linePoints[2][0] = labelLayoutList[i].x - 3;
	                }
	                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	                linePoints[1][0] = linePoints[2][0] + dist;
	            }
	        }
	    }
	    return function (seriesModel, r, viewWidth, viewHeight) {
	        var data = seriesModel.getData();
	        var labelLayoutList = [];
	        var cx;
	        var cy;
	        var hasLabelRotate = false;
	        data.each(function (idx) {
	            var layout = data.getItemLayout(idx);
	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            // Use position in normal or emphasis
	            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');
	            var labelLineModel = itemModel.getModel('labelLine.normal');
	            var labelLineLen = labelLineModel.get('length');
	            var labelLineLen2 = labelLineModel.get('length2');
	            var midAngle = (layout.startAngle + layout.endAngle) / 2;
	            var dx = Math.cos(midAngle);
	            var dy = Math.sin(midAngle);
	            var textX;
	            var textY;
	            var linePoints;
	            var textAlign;
	            cx = layout.cx;
	            cy = layout.cy;
	            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	            if (labelPosition === 'center') {
	                textX = layout.cx;
	                textY = layout.cy;
	                textAlign = 'center';
	            } else {
	                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;
	                textX = x1 + dx * 3;
	                textY = y1 + dy * 3;
	                if (!isLabelInside) {
	                    // For roseType
	                    var x2 = x1 + dx * (labelLineLen + r - layout.r);
	                    var y2 = y1 + dy * (labelLineLen + r - layout.r);
	                    var x3 = x2 + (dx < 0 ? -1 : 1) * labelLineLen2;
	                    var y3 = y2;
	                    textX = x3 + (dx < 0 ? -5 : 5);
	                    textY = y3;
	                    linePoints = [
	                        [
	                            x1,
	                            y1
	                        ],
	                        [
	                            x2,
	                            y2
	                        ],
	                        [
	                            x3,
	                            y3
	                        ]
	                    ];
	                }
	                textAlign = isLabelInside ? 'center' : dx > 0 ? 'left' : 'right';
	            }
	            var font = labelModel.getModel('textStyle').getFont();
	            var labelRotate = labelModel.get('rotate') ? dx < 0 ? -midAngle + Math.PI : -midAngle : 0;
	            var text = seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx);
	            var textRect = textContain.getBoundingRect(text, font, textAlign, 'top');
	            hasLabelRotate = !!labelRotate;
	            layout.label = {
	                x: textX,
	                y: textY,
	                position: labelPosition,
	                height: textRect.height,
	                len: labelLineLen,
	                len2: labelLineLen2,
	                linePoints: linePoints,
	                textAlign: textAlign,
	                verticalAlign: 'middle',
	                font: font,
	                rotation: labelRotate
	            };
	            // Not layout the inside label
	            if (!isLabelInside) {
	                labelLayoutList.push(layout.label);
	            }
	        });
	        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	        }
	    };
	});
	define('echarts/component/marker/markerHelper', ['require', 'zrender/core/util', '../../util/number'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('../../util/number');
	    var indexOf = zrUtil.indexOf;
	    function hasXOrY(item) {
	        return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
	    }
	    function hasXAndY(item) {
	        return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
	    }
	    function getPrecision(data, valueAxisDim, dataIndex) {
	        var precision = -1;
	        do {
	            precision = Math.max(numberUtil.getPrecision(data.get(valueAxisDim, dataIndex)), precision);
	            data = data.stackedOn;
	        } while (data);
	        return precision;
	    }
	    function markerTypeCalculatorWithExtent(mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {
	        var coordArr = [];
	        var value = numCalculate(data, targetDataDim, mlType);
	        var dataIndex = data.indexOfNearest(targetDataDim, value, true);
	        coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);
	        coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);
	        var precision = getPrecision(data, targetDataDim, dataIndex);
	        if (precision >= 0) {
	            coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
	        }
	        return coordArr;
	    }
	    var curry = zrUtil.curry;
	    // TODO Specified percent
	    var markerTypeCalculator = {
	            min: curry(markerTypeCalculatorWithExtent, 'min'),
	            max: curry(markerTypeCalculatorWithExtent, 'max'),
	            average: curry(markerTypeCalculatorWithExtent, 'average')
	        };
	    /**
	     * Transform markPoint data item to format used in List by do the following
	     * 1. Calculate statistic like `max`, `min`, `average`
	     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {Object}
	     */
	    var dataTransform = function (seriesModel, item) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;
	        // 1. If not specify the position with pixel directly
	        // 2. If `coord` is not a data array. Which uses `xAxis`,
	        // `yAxis` to specify the coord on each dimension
	        // parseFloat first because item.x and item.y can be percent string like '20%'
	        if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {
	            var dims = coordSys.dimensions;
	            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);
	            // Clone the option
	            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
	            item = zrUtil.clone(item);
	            if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {
	                var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	                var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);
	                item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);
	                // Force to use the value of calculated value.
	                item.value = item.coord[targetCoordIndex];
	            } else {
	                // FIXME Only has one of xAxis and yAxis.
	                var coord = [
	                        item.xAxis != null ? item.xAxis : item.radiusAxis,
	                        item.yAxis != null ? item.yAxis : item.angleAxis
	                    ];
	                // Each coord support max, min, average
	                for (var i = 0; i < 2; i++) {
	                    if (markerTypeCalculator[coord[i]]) {
	                        var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];
	                        coord[i] = numCalculate(data, dataDim, coord[i]);
	                    }
	                }
	                item.coord = coord;
	            }
	        }
	        return item;
	    };
	    var getAxisInfo = function (item, data, coordSys, seriesModel) {
	        var ret = {};
	        if (item.valueIndex != null || item.valueDim != null) {
	            ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;
	            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	        } else {
	            ret.baseAxis = seriesModel.getBaseAxis();
	            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	        }
	        return ret;
	    };
	    /**
	     * Filter data which is out of coordinateSystem range
	     * [dataFilter description]
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {boolean}
	     */
	    var dataFilter = function (coordSys, item) {
	        // Alwalys return true if there is no coordSys
	        return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;
	    };
	    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {
	        // x, y, radius, angle
	        if (dimIndex < 2) {
	            return item.coord && item.coord[dimIndex];
	        }
	        return item.value;
	    };
	    var numCalculate = function (data, valueDataDim, type) {
	        if (type === 'average') {
	            var sum = 0;
	            var count = 0;
	            data.each(valueDataDim, function (val, idx) {
	                if (!isNaN(val)) {
	                    sum += val;
	                    count++;
	                }
	            }, true);
	            return sum / count;
	        } else {
	            return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];
	        }
	    };
	    return {
	        dataTransform: dataTransform,
	        dataFilter: dataFilter,
	        dimValueGetter: dimValueGetter,
	        getAxisInfo: getAxisInfo,
	        numCalculate: numCalculate
	    };
	});
	define('echarts/component/helper/listComponent', ['require', '../../util/layout', '../../util/format', '../../util/graphic'], function (require) {
	    // List layout
	    var layout = require('../../util/layout');
	    var formatUtil = require('../../util/format');
	    var graphic = require('../../util/graphic');
	    function positionGroup(group, model, api) {
	        layout.positionGroup(group, model.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        }, model.get('padding'));
	    }
	    return {
	        layout: function (group, componentModel, api) {
	            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }, componentModel.get('padding'));
	            layout.box(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);
	            positionGroup(group, componentModel, api);
	        },
	        addBackground: function (group, componentModel) {
	            var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	            var boundingRect = group.getBoundingRect();
	            var style = componentModel.getItemStyle([
	                    'color',
	                    'opacity'
	                ]);
	            style.fill = componentModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                    shape: {
	                        x: boundingRect.x - padding[3],
	                        y: boundingRect.y - padding[0],
	                        width: boundingRect.width + padding[1] + padding[3],
	                        height: boundingRect.height + padding[0] + padding[2]
	                    },
	                    style: style,
	                    silent: true,
	                    z2: -1
	                });
	            graphic.subPixelOptimizeRect(rect);
	            group.add(rect);
	        }
	    };
	});
	define('echarts/chart/helper/Line', ['require', '../../util/symbol', 'zrender/core/vector', './LinePath', '../../util/graphic', 'zrender/core/util', '../../util/number'], function (require) {
	    var symbolUtil = require('../../util/symbol');
	    var vector = require('zrender/core/vector');
	    // var matrix = require('zrender/core/matrix');
	    var LinePath = require('./LinePath');
	    var graphic = require('../../util/graphic');
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('../../util/number');
	    var SYMBOL_CATEGORIES = [
	            'fromSymbol',
	            'toSymbol'
	        ];
	    function makeSymbolTypeKey(symbolCategory) {
	        return '_' + symbolCategory + 'Type';
	    }
	    /**
	     * @inner
	     */
	    function createSymbol(name, lineData, idx) {
	        var color = lineData.getItemVisual(idx, 'color');
	        var symbolType = lineData.getItemVisual(idx, name);
	        var symbolSize = lineData.getItemVisual(idx, name + 'Size');
	        if (!symbolType || symbolType === 'none') {
	            return;
	        }
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [
	                symbolSize,
	                symbolSize
	            ];
	        }
	        var symbolPath = symbolUtil.createSymbol(symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2, symbolSize[0], symbolSize[1], color);
	        symbolPath.name = name;
	        return symbolPath;
	    }
	    function createLine(points) {
	        var line = new LinePath({ name: 'line' });
	        setLinePoints(line.shape, points);
	        return line;
	    }
	    function setLinePoints(targetShape, points) {
	        var p1 = points[0];
	        var p2 = points[1];
	        var cp1 = points[2];
	        targetShape.x1 = p1[0];
	        targetShape.y1 = p1[1];
	        targetShape.x2 = p2[0];
	        targetShape.y2 = p2[1];
	        targetShape.percent = 1;
	        if (cp1) {
	            targetShape.cpx1 = cp1[0];
	            targetShape.cpy1 = cp1[1];
	        }
	    }
	    function updateSymbolAndLabelBeforeLineUpdate() {
	        var lineGroup = this;
	        var symbolFrom = lineGroup.childOfName('fromSymbol');
	        var symbolTo = lineGroup.childOfName('toSymbol');
	        var label = lineGroup.childOfName('label');
	        // Quick reject
	        if (!symbolFrom && !symbolTo && label.ignore) {
	            return;
	        }
	        var invScale = 1;
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode.scale) {
	                invScale /= parentNode.scale[0];
	            }
	            parentNode = parentNode.parent;
	        }
	        var line = lineGroup.childOfName('line');
	        // If line not changed
	        // FIXME Parent scale changed
	        if (!this.__dirty && !line.__dirty) {
	            return;
	        }
	        var percent = line.shape.percent;
	        var fromPos = line.pointAt(0);
	        var toPos = line.pointAt(percent);
	        var d = vector.sub([], toPos, fromPos);
	        vector.normalize(d, d);
	        if (symbolFrom) {
	            symbolFrom.attr('position', fromPos);
	            var tangent = line.tangentAt(0);
	            symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	            symbolFrom.attr('scale', [
	                invScale * percent,
	                invScale * percent
	            ]);
	        }
	        if (symbolTo) {
	            symbolTo.attr('position', toPos);
	            var tangent = line.tangentAt(1);
	            symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(tangent[1], tangent[0]));
	            symbolTo.attr('scale', [
	                invScale * percent,
	                invScale * percent
	            ]);
	        }
	        if (!label.ignore) {
	            label.attr('position', toPos);
	            var textPosition;
	            var textAlign;
	            var textVerticalAlign;
	            var distance = 5 * invScale;
	            // End
	            if (label.__position === 'end') {
	                textPosition = [
	                    d[0] * distance + toPos[0],
	                    d[1] * distance + toPos[1]
	                ];
	                textAlign = d[0] > 0.8 ? 'left' : d[0] < -0.8 ? 'right' : 'center';
	                textVerticalAlign = d[1] > 0.8 ? 'top' : d[1] < -0.8 ? 'bottom' : 'middle';
	            }    // Middle
	            else if (label.__position === 'middle') {
	                var halfPercent = percent / 2;
	                var tangent = line.tangentAt(halfPercent);
	                var n = [
	                        tangent[1],
	                        -tangent[0]
	                    ];
	                var cp = line.pointAt(halfPercent);
	                if (n[1] > 0) {
	                    n[0] = -n[0];
	                    n[1] = -n[1];
	                }
	                textPosition = [
	                    cp[0] + n[0] * distance,
	                    cp[1] + n[1] * distance
	                ];
	                textAlign = 'center';
	                textVerticalAlign = 'bottom';
	                var rotation = -Math.atan2(tangent[1], tangent[0]);
	                if (toPos[0] < fromPos[0]) {
	                    rotation = Math.PI + rotation;
	                }
	                label.attr('rotation', rotation);
	            }    // Start
	            else {
	                textPosition = [
	                    -d[0] * distance + fromPos[0],
	                    -d[1] * distance + fromPos[1]
	                ];
	                textAlign = d[0] > 0.8 ? 'right' : d[0] < -0.8 ? 'left' : 'center';
	                textVerticalAlign = d[1] > 0.8 ? 'bottom' : d[1] < -0.8 ? 'top' : 'middle';
	            }
	            label.attr({
	                style: {
	                    textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	                    textAlign: label.__textAlign || textAlign
	                },
	                position: textPosition,
	                scale: [
	                    invScale,
	                    invScale
	                ]
	            });
	        }
	    }
	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Line}
	     */
	    function Line(lineData, idx, seriesScope) {
	        graphic.Group.call(this);
	        this._createLine(lineData, idx, seriesScope);
	    }
	    var lineProto = Line.prototype;
	    // Update symbol position and rotation
	    lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;
	    lineProto._createLine = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	        var linePoints = lineData.getItemLayout(idx);
	        var line = createLine(linePoints);
	        line.shape.percent = 0;
	        graphic.initProps(line, { shape: { percent: 1 } }, seriesModel, idx);
	        this.add(line);
	        var label = new graphic.Text({ name: 'label' });
	        this.add(label);
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbol = createSymbol(symbolCategory, lineData, idx);
	            // symbols must added after line to make sure
	            // it will be updated after line#update.
	            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
	            this.add(symbol);
	            this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
	        }, this);
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	    lineProto.updateData = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	        var line = this.childOfName('line');
	        var linePoints = lineData.getItemLayout(idx);
	        var target = { shape: {} };
	        setLinePoints(target.shape, linePoints);
	        graphic.updateProps(line, target, seriesModel, idx);
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbolType = lineData.getItemVisual(idx, symbolCategory);
	            var key = makeSymbolTypeKey(symbolCategory);
	            // Symbol changed
	            if (this[key] !== symbolType) {
	                this.remove(this.childOfName(symbolCategory));
	                var symbol = createSymbol(symbolCategory, lineData, idx);
	                this.add(symbol);
	            }
	            this[key] = symbolType;
	        }, this);
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	    lineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	        var line = this.childOfName('line');
	        var lineStyle = seriesScope && seriesScope.lineStyle;
	        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	        // Optimization for large dataset
	        if (!seriesScope || lineData.hasItemOption) {
	            var itemModel = lineData.getItemModel(idx);
	            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	            labelModel = itemModel.getModel('label.normal');
	            hoverLabelModel = itemModel.getModel('label.emphasis');
	        }
	        var visualColor = lineData.getItemVisual(idx, 'color');
	        if (isNaN(defaultText)) {
	            // Use name
	            defaultText = lineData.getName(idx);
	        }
	        line.useStyle(zrUtil.defaults({
	            strokeNoScale: true,
	            fill: 'none',
	            stroke: visualColor
	        }, lineStyle));
	        line.hoverStyle = hoverLineStyle;
	        var showLabel = labelModel.getShallow('show');
	        var hoverShowLabel = hoverLabelModel.getShallow('show');
	        var defaultText;
	        var label = this.childOfName('label');
	        var defaultLabelColor;
	        if (showLabel || hoverShowLabel) {
	            defaultText = numberUtil.round(seriesModel.getRawValue(idx));
	            defaultLabelColor = visualColor || '#000';
	        }
	        // label.afterUpdate = lineAfterUpdate;
	        if (showLabel) {
	            var textStyleModel = labelModel.getModel('textStyle');
	            label.setStyle({
	                text: zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType), defaultText),
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor() || defaultLabelColor
	            });
	            label.__textAlign = textStyleModel.get('align');
	            label.__verticalAlign = textStyleModel.get('baseline');
	            label.__position = labelModel.get('position');
	        } else {
	            label.setStyle('text', '');
	        }
	        if (hoverShowLabel) {
	            var textStyleHoverModel = hoverLabelModel.getModel('textStyle');
	            label.hoverStyle = {
	                text: zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType), defaultText),
	                textFont: textStyleHoverModel.getFont(),
	                fill: textStyleHoverModel.getTextColor() || defaultLabelColor
	            };
	        } else {
	            label.hoverStyle = { text: '' };
	        }
	        label.ignore = !showLabel && !hoverShowLabel;
	        graphic.setHoverStyle(this);
	    };
	    lineProto.updateLayout = function (lineData, idx) {
	        this.setLinePoints(lineData.getItemLayout(idx));
	    };
	    lineProto.setLinePoints = function (points) {
	        var linePath = this.childOfName('line');
	        setLinePoints(linePath.shape, points);
	        linePath.dirty();
	    };
	    zrUtil.inherits(Line, graphic.Group);
	    return Line;
	});
	define('echarts/component/dataZoom/history', ['require', 'zrender/core/util'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var each = zrUtil.each;
	    var ATTR = ' _ec_hist_store';
	    var history = {
	            push: function (ecModel, newSnapshot) {
	                var store = giveStore(ecModel);
	                // If previous dataZoom can not be found,
	                // complete an range with current range.
	                each(newSnapshot, function (batchItem, dataZoomId) {
	                    var i = store.length - 1;
	                    for (; i >= 0; i--) {
	                        var snapshot = store[i];
	                        if (snapshot[dataZoomId]) {
	                            break;
	                        }
	                    }
	                    if (i < 0) {
	                        // No origin range set, create one by current range.
	                        var dataZoomModel = ecModel.queryComponents({
	                                mainType: 'dataZoom',
	                                subType: 'select',
	                                id: dataZoomId
	                            })[0];
	                        if (dataZoomModel) {
	                            var percentRange = dataZoomModel.getPercentRange();
	                            store[0][dataZoomId] = {
	                                dataZoomId: dataZoomId,
	                                start: percentRange[0],
	                                end: percentRange[1]
	                            };
	                        }
	                    }
	                });
	                store.push(newSnapshot);
	            },
	            pop: function (ecModel) {
	                var store = giveStore(ecModel);
	                var head = store[store.length - 1];
	                store.length > 1 && store.pop();
	                // Find top for all dataZoom.
	                var snapshot = {};
	                each(head, function (batchItem, dataZoomId) {
	                    for (var i = store.length - 1; i >= 0; i--) {
	                        var batchItem = store[i][dataZoomId];
	                        if (batchItem) {
	                            snapshot[dataZoomId] = batchItem;
	                            break;
	                        }
	                    }
	                });
	                return snapshot;
	            },
	            clear: function (ecModel) {
	                ecModel[ATTR] = null;
	            },
	            count: function (ecModel) {
	                return giveStore(ecModel).length;
	            }
	        };
	    /**
	     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	     * History length of each dataZoom may be different.
	     * this._history[0] is used to store origin range.
	     * @type {Array.<Object>}
	     */
	    function giveStore(ecModel) {
	        var store = ecModel[ATTR];
	        if (!store) {
	            store = ecModel[ATTR] = [{}];
	        }
	        return store;
	    }
	    return history;
	});
	define('echarts/component/dataZoomSelect', ['require', './dataZoom/typeDefaulter', './dataZoom/DataZoomModel', './dataZoom/DataZoomView', './dataZoom/SelectZoomModel', './dataZoom/SelectZoomView', './dataZoom/dataZoomProcessor', './dataZoom/dataZoomAction'], function (require) {
	    require('./dataZoom/typeDefaulter');
	    require('./dataZoom/DataZoomModel');
	    require('./dataZoom/DataZoomView');
	    require('./dataZoom/SelectZoomModel');
	    require('./dataZoom/SelectZoomView');
	    require('./dataZoom/dataZoomProcessor');
	    require('./dataZoom/dataZoomAction');
	});
	define('echarts/component/helper/brushHelper', ['require', 'zrender/core/util', '../../util/graphic'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var graphic = require('../../util/graphic');
	    var each = zrUtil.each;
	    var helper = {};
	    var COMPONENT_NAMES = [
	            'geo',
	            'xAxis',
	            'yAxis'
	        ];
	    var PANEL_ID_SPLIT = '--';
	    var COORD_CONVERTS = [
	            'dataToPoint',
	            'pointToData'
	        ];
	    helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {
	        each(areas, function (area, index) {
	            var panelId = area.panelId;
	            if (panelId) {
	                panelId = panelId.split(PANEL_ID_SPLIT);
	                area[panelId[0] + 'Index'] = +panelId[1];
	                var coordInfo = findCoordInfo(area, coordInfoList);
	                area.coordRange = coordConvert[area.brushType](1, coordInfo, area.range);
	                rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);
	            }
	        });
	    };
	    helper.parseInputRanges = function (brushModel, ecModel) {
	        each(brushModel.areas, function (area) {
	            var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	            if (true) {
	                zrUtil.assert(!coordInfo || coordInfo === true || area.coordRange, 'coordRange must be specified when coord index specified.');
	                zrUtil.assert(!coordInfo || coordInfo !== true || area.range, 'range must be specified.');
	            }
	            area.range = area.range || [];
	            // convert coordRange to global range and set panelId.
	            if (coordInfo && coordInfo !== true) {
	                area.range = coordConvert[area.brushType](0, coordInfo, area.coordRange);
	                area.panelId = coordInfo.panelId;
	            }
	        });
	    };
	    helper.makePanelOpts = function (coordInfoList) {
	        var panelOpts = [];
	        each(coordInfoList, function (coordInfo) {
	            var coordSys = coordInfo.coordSys;
	            var rect;
	            if (coordInfo.geoIndex >= 0) {
	                rect = coordSys.getBoundingRect().clone();
	                // geo roam and zoom transform
	                rect.applyTransform(graphic.getTransform(coordSys));
	            } else {
	                // xAxis or yAxis
	                // grid is not Transformable.
	                rect = coordSys.grid.getRect().clone();
	            }
	            panelOpts.push({
	                panelId: coordInfo.panelId,
	                rect: rect
	            });
	        });
	        return panelOpts;
	    };
	    /**
	     * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Array.<Obejct>} coordInfoList
	     */
	    helper.makeCoordInfoList = function (option, ecModel) {
	        var coordInfoList = [];
	        each(COMPONENT_NAMES, function (componentName) {
	            var componentIndices = option[componentName + 'Index'];
	            if (componentIndices == null || componentIndices === 'none') {
	                return;
	            }
	            if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {
	                componentIndices = [componentIndices];
	            }
	            ecModel.eachComponent({ mainType: componentName }, function (componentModel, index) {
	                if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {
	                    return;
	                }
	                var grid;
	                var coordSys;
	                componentName === 'xAxis' || componentName === 'yAxis' ? grid = componentModel.axis.grid : coordSys = componentModel.coordinateSystem;
	                // geo
	                var coordInfo;
	                // Check duplicate and find cartesian when tranval to yAxis.
	                for (var i = 0, len = coordInfoList.length; i < len; i++) {
	                    var cInfo = coordInfoList[i];
	                    if (true) {
	                        zrUtil.assert(cInfo[componentName + 'Index'] != index, 'Coord should not be defined duplicately: ' + componentName + index);
	                    }
	                    // CoordSys is always required for `rect brush` or `polygon brush`.
	                    // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.
	                    if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {
	                        var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);
	                        if (aCoordSys) {
	                            // The yAxis and xAxis are in the same cartesian.
	                            coordSys = aCoordSys;
	                            coordInfo = cInfo;
	                            break;
	                        }
	                    }
	                }
	                !coordInfo && coordInfoList.push(coordInfo = {});
	                coordInfo[componentName] = componentModel;
	                coordInfo[componentName + 'Index'] = index;
	                // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,
	                // which is enough to index panel.
	                coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;
	                coordInfo.coordSys = coordSys || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);
	                coordInfo.coordSys ? coordInfoList[componentName + 'Has'] = true : coordInfoList.pop();    // If a coordInfo exists originally, existance of coordSys is ensured.
	            });
	        });
	        return coordInfoList;
	    };
	    helper.controlSeries = function (area, brushModel, seriesModel) {
	        // Check whether area is bound in coord, and series do not belong to that coord.
	        // If do not do this check, some brush (like lineX) will controll all axes.
	        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	        return coordInfo === true || coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem;
	    };
	    function formatMinMax(minMax) {
	        minMax[0] > minMax[1] && minMax.reverse();
	        return minMax;
	    }
	    /**
	     * If return Object, a coord found.
	     * If reutrn true, global found.
	     * Otherwise nothing found.
	     *
	     * @param {Object} area {<componentName>Index}
	     * @param {Array} coordInfoList
	     * @return {Obejct|boolean}
	     */
	    function findCoordInfo(area, coordInfoList) {
	        var isGlobal = true;
	        for (var j = 0; j < COMPONENT_NAMES.length; j++) {
	            var indexAttr = COMPONENT_NAMES[j] + 'Index';
	            if (area[indexAttr] >= 0) {
	                isGlobal = false;
	                for (var i = 0; i < coordInfoList.length; i++) {
	                    if (coordInfoList[i][indexAttr] === area[indexAttr]) {
	                        return coordInfoList[i];
	                    }
	                }
	            }
	        }
	        return isGlobal;
	    }
	    function axisConvert(axisName, to, coordInfo, coordRange) {
	        var axis = coordInfo.coordSys.getAxis(axisName);
	        if (true) {
	            zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');
	        }
	        return formatMinMax(zrUtil.map([
	            0,
	            1
	        ], function (i) {
	            return to ? axis.coordToData(axis.toLocalCoord(coordRange[i])) : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));
	        }));
	    }
	    var coordConvert = {
	            lineX: zrUtil.curry(axisConvert, 'x'),
	            lineY: zrUtil.curry(axisConvert, 'y'),
	            rect: function (to, coordInfo, coordRange) {
	                var coordSys = coordInfo.coordSys;
	                var xminymin = coordSys[COORD_CONVERTS[to]]([
	                        coordRange[0][0],
	                        coordRange[1][0]
	                    ]);
	                var xmaxymax = coordSys[COORD_CONVERTS[to]]([
	                        coordRange[0][1],
	                        coordRange[1][1]
	                    ]);
	                return [
	                    formatMinMax([
	                        xminymin[0],
	                        xmaxymax[0]
	                    ]),
	                    formatMinMax([
	                        xminymin[1],
	                        xmaxymax[1]
	                    ])
	                ];
	            },
	            polygon: function (to, coordInfo, coordRange) {
	                var coordSys = coordInfo.coordSys;
	                return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);
	            }
	        };
	    return helper;
	});
	define('echarts/component/helper/BrushController', ['require', 'zrender/mixin/Eventful', 'zrender/core/util', '../../util/graphic', './interactionMutex', '../../data/DataDiffer'], function (require) {
	    var Eventful = require('zrender/mixin/Eventful');
	    var zrUtil = require('zrender/core/util');
	    var graphic = require('../../util/graphic');
	    var interactionMutex = require('./interactionMutex');
	    var DataDiffer = require('../../data/DataDiffer');
	    var curry = zrUtil.curry;
	    var each = zrUtil.each;
	    var map = zrUtil.map;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathPow = Math.pow;
	    var COVER_Z = 10000;
	    var UNSELECT_THRESHOLD = 6;
	    var MIN_RESIZE_LINE_WIDTH = 6;
	    var MUTEX_RESOURCE_KEY = 'globalPan';
	    var DIRECTION_MAP = {
	            w: [
	                0,
	                0
	            ],
	            e: [
	                0,
	                1
	            ],
	            n: [
	                1,
	                0
	            ],
	            s: [
	                1,
	                1
	            ]
	        };
	    var CURSOR_MAP = {
	            w: 'ew',
	            e: 'ew',
	            n: 'ns',
	            s: 'ns',
	            ne: 'nesw',
	            sw: 'nesw',
	            nw: 'nwse',
	            se: 'nwse'
	        };
	    var DEFAULT_BRUSH_OPT = {
	            brushStyle: {
	                lineWidth: 2,
	                stroke: 'rgba(0,0,0,0.3)',
	                fill: 'rgba(0,0,0,0.1)'
	            },
	            transformable: true,
	            brushMode: 'single',
	            removeOnClick: false
	        };
	    var baseUID = 0;
	    /**
	     * @alias module:echarts/component/helper/BrushController
	     * @constructor
	     * @mixin {module:zrender/mixin/Eventful}
	     * @event module:echarts/component/helper/BrushController#brush
	     *        params:
	     *            areas: Array.<Array>, coord relates to container group,
	     *                                    If no container specified, to global.
	     *            opt {
	     *                isEnd: boolean,
	     *                removeOnClick: boolean
	     *            }
	     *
	     * @param {module:zrender/zrender~ZRender} zr
	     */
	    function BrushController(zr) {
	        if (true) {
	            zrUtil.assert(zr);
	        }
	        Eventful.call(this);
	        /**
	         * @type {module:zrender/zrender~ZRender}
	         * @private
	         */
	        this._zr = zr;
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new graphic.Group();
	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {string}
	         */
	        this._brushType;
	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {Object}
	         */
	        this._brushOption;
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._panels;
	        /**
	         * @private
	         * @type {Array.<nubmer>}
	         */
	        this._track = [];
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._dragging;
	        /**
	         * @private
	         * @type {Array}
	         */
	        this._covers = [];
	        /**
	         * @private
	         * @type {moudule:zrender/container/Group}
	         */
	        this._creatingCover;
	        /**
	         * true means global panel
	         * @private
	         * @type {module:zrender/container/Group|boolean}
	         */
	        this._creatingPanel;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._enableGlobalPan;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        if (true) {
	            this._mounted;
	        }
	        /**
	         * @private
	         * @type {string}
	         */
	        this._uid = 'brushController_' + baseUID++;
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._handlers = {};
	        each(mouseHandlers, function (handler, eventName) {
	            this._handlers[eventName] = zrUtil.bind(handler, this);
	        }, this);
	    }
	    BrushController.prototype = {
	        constructor: BrushController,
	        enableBrush: function (brushOption) {
	            if (true) {
	                zrUtil.assert(this._mounted);
	            }
	            this._brushType && doDisableBrush(this);
	            brushOption.brushType && doEnableBrush(this, brushOption);
	            return this;
	        },
	        setPanels: function (panelOpts) {
	            var oldPanels = this._panels || {};
	            var newPanels = this._panels = panelOpts && panelOpts.length && {};
	            var thisGroup = this.group;
	            newPanels && each(panelOpts, function (panelOpt) {
	                var panelId = panelOpt.panelId;
	                var panel = oldPanels[panelId];
	                if (!panel) {
	                    panel = new graphic.Rect({
	                        silent: true,
	                        invisible: true
	                    });
	                    thisGroup.add(panel);
	                }
	                panel.attr('shape', panelOpt.rect);
	                panel.__brushPanelId = panelId;
	                newPanels[panelId] = panel;
	                oldPanels[panelId] = null;
	            });
	            each(oldPanels, function (panel) {
	                panel && thisGroup.remove(panel);
	            });
	            return this;
	        },
	        mount: function (opt) {
	            opt = opt || {};
	            if (true) {
	                this._mounted = true;    // should be at first.
	            }
	            this._enableGlobalPan = opt.enableGlobalPan;
	            var thisGroup = this.group;
	            this._zr.add(thisGroup);
	            thisGroup.attr({
	                position: opt.position || [
	                    0,
	                    0
	                ],
	                rotation: opt.rotation || 0,
	                scale: opt.scale || [
	                    1,
	                    1
	                ]
	            });
	            return this;
	        },
	        eachCover: function (cb, context) {
	            each(this._covers, cb, context);
	        },
	        updateCovers: function (brushOptionList) {
	            if (true) {
	                zrUtil.assert(this._mounted);
	            }
	            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	            });
	            var tmpIdPrefix = ' -brush-index-';
	            var oldCovers = this._covers;
	            var newCovers = this._covers = [];
	            var controller = this;
	            var creatingCover = this._creatingCover;
	            new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();
	            return this;
	            function getKey(brushOption, index) {
	                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + '-' + brushOption.brushType;
	            }
	            function oldGetKey(cover, index) {
	                return getKey(cover.__brushOption, index);
	            }
	            function addOrUpdate(newIndex, oldIndex) {
	                var newBrushOption = brushOptionList[newIndex];
	                // Consider setOption in event listener of brushSelect,
	                // where updating cover when creating should be forbiden.
	                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	                    newCovers[newIndex] = oldCovers[oldIndex];
	                } else {
	                    var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushOption, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushOption));
	                    updateCoverAfterCreation(controller, cover);
	                }
	            }
	            function remove(oldIndex) {
	                if (oldCovers[oldIndex] !== creatingCover) {
	                    controller.group.remove(oldCovers[oldIndex]);
	                }
	            }
	        },
	        unmount: function () {
	            this.enableBrush(false);
	            // container may 'removeAll' outside.
	            clearCovers(this);
	            this._zr.remove(this.group);
	            if (true) {
	                this._mounted = false;    // should be at last.
	            }
	            return this;
	        },
	        dispose: function () {
	            this.unmount();
	            this.off();
	        }
	    };
	    zrUtil.mixin(BrushController, Eventful);
	    function doEnableBrush(controller, brushOption) {
	        var zr = controller._zr;
	        // Consider roam, which takes globalPan too.
	        if (!controller._enableGlobalPan) {
	            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	        }
	        each(controller._handlers, function (handler, eventName) {
	            zr.on(eventName, handler);
	        });
	        controller._brushType = brushOption.brushType;
	        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	    }
	    function doDisableBrush(controller) {
	        var zr = controller._zr;
	        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);
	        each(controller._handlers, function (handler, eventName) {
	            zr.off(eventName, handler);
	        });
	        controller._brushType = controller._brushOption = null;
	    }
	    function createCover(controller, brushOption) {
	        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	        updateZ(cover);
	        cover.__brushOption = brushOption;
	        controller.group.add(cover);
	        return cover;
	    }
	    function endCreating(controller, creatingCover) {
	        var coverRenderer = getCoverRenderer(creatingCover);
	        if (coverRenderer.endCreating) {
	            coverRenderer.endCreating(controller, creatingCover);
	            updateZ(creatingCover);
	        }
	        return creatingCover;
	    }
	    function updateCoverShape(controller, cover) {
	        var brushOption = cover.__brushOption;
	        getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
	    }
	    function updateZ(group) {
	        group.traverse(function (el) {
	            el.z = COVER_Z;
	            el.z2 = COVER_Z;    // Consider in given container.
	        });
	    }
	    function updateCoverAfterCreation(controller, cover) {
	        getCoverRenderer(cover).updateCommon(controller, cover);
	        updateCoverShape(controller, cover);
	    }
	    function getCoverRenderer(cover) {
	        return coverRenderers[cover.__brushOption.brushType];
	    }
	    function getPanelByPoint(controller, x, y) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true;    // Global panel
	        }
	        var panel;
	        each(panels, function (pn) {
	            pn.contain(x, y) && (panel = pn);
	        });
	        return panel;
	    }
	    function getPanelByCover(controller, cover) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true;    // Global panel
	        }
	        var panelId = cover.__brushOption.panelId;
	        // User may give cover without coord sys info,
	        // which is then treated as global panel.
	        return panelId != null ? panels[panelId] : true;
	    }
	    function clearCovers(controller) {
	        var covers = controller._covers;
	        var originalLength = covers.length;
	        each(covers, function (cover) {
	            controller.group.remove(cover);
	        }, controller);
	        covers.length = 0;
	        return !!originalLength;
	    }
	    function trigger(controller, opt) {
	        var areas = map(controller._covers, function (cover) {
	                var brushOption = cover.__brushOption;
	                var range = zrUtil.clone(brushOption.range);
	                return {
	                    brushType: brushOption.brushType,
	                    panelId: brushOption.panelId,
	                    range: range
	                };
	            });
	        controller.trigger('brush', areas, {
	            isEnd: !!opt.isEnd,
	            removeOnClick: !!opt.removeOnClick
	        });
	    }
	    function shouldShowCover(controller) {
	        var track = controller._track;
	        if (!track.length) {
	            return false;
	        }
	        var p2 = track[track.length - 1];
	        var p1 = track[0];
	        var dx = p2[0] - p1[0];
	        var dy = p2[1] - p1[1];
	        var dist = mathPow(dx * dx + dy * dy, 0.5);
	        return dist > UNSELECT_THRESHOLD;
	    }
	    function getTrackEnds(track) {
	        var tail = track.length - 1;
	        tail < 0 && (tail = 0);
	        return [
	            track[0],
	            track[tail]
	        ];
	    }
	    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	        var cover = new graphic.Group();
	        cover.add(new graphic.Rect({
	            name: 'main',
	            style: makeStyle(brushOption),
	            silent: true,
	            draggable: true,
	            cursor: 'move',
	            drift: curry(doDrift, controller, cover, 'nswe'),
	            ondragend: curry(trigger, controller, { isEnd: true })
	        }));
	        each(edgeNames, function (name) {
	            cover.add(new graphic.Rect({
	                name: name,
	                style: { opacity: 0 },
	                draggable: true,
	                silent: true,
	                invisible: true,
	                drift: curry(doDrift, controller, cover, name),
	                ondragend: curry(trigger, controller, { isEnd: true })
	            }));
	        });
	        return cover;
	    }
	    function updateBaseRect(controller, cover, localRange, brushOption) {
	        var lineWidth = brushOption.brushStyle.lineWidth || 0;
	        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	        var x = localRange[0][0];
	        var y = localRange[1][0];
	        var xa = x - lineWidth / 2;
	        var ya = y - lineWidth / 2;
	        var x2 = localRange[0][1];
	        var y2 = localRange[1][1];
	        var x2a = x2 - handleSize + lineWidth / 2;
	        var y2a = y2 - handleSize + lineWidth / 2;
	        var width = x2 - x;
	        var height = y2 - y;
	        var widtha = width + lineWidth;
	        var heighta = height + lineWidth;
	        updateRectShape(controller, cover, 'main', x, y, width, height);
	        if (brushOption.transformable) {
	            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);
	            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	        }
	    }
	    function updateCommon(controller, cover) {
	        var brushOption = cover.__brushOption;
	        var transformable = brushOption.transformable;
	        var mainEl = cover.childAt(0);
	        mainEl.useStyle(makeStyle(brushOption));
	        mainEl.attr({
	            silent: !transformable,
	            cursor: transformable ? 'move' : 'default'
	        });
	        each([
	            'w',
	            'e',
	            'n',
	            's',
	            'se',
	            'sw',
	            'ne',
	            'nw'
	        ], function (name) {
	            var el = cover.childOfName(name);
	            var globalDir = getGlobalDirection(controller, name);
	            el && el.attr({
	                silent: !transformable,
	                invisible: !transformable,
	                cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	            });
	        });
	    }
	    function updateRectShape(controller, cover, name, x, y, w, h) {
	        var el = cover.childOfName(name);
	        el && el.setShape(pointsToRect(clipByPanel(controller, cover, [
	            [
	                x,
	                y
	            ],
	            [
	                x + w,
	                y + h
	            ]
	        ])));
	    }
	    function makeStyle(brushOption) {
	        return zrUtil.defaults({ strokeNoScale: true }, brushOption.brushStyle);
	    }
	    function formatRectRange(x, y, x2, y2) {
	        var min = [
	                mathMin(x, x2),
	                mathMin(y, y2)
	            ];
	        var max = [
	                mathMax(x, x2),
	                mathMax(y, y2)
	            ];
	        return [
	            [
	                min[0],
	                max[0]
	            ],
	            [
	                min[1],
	                max[1]
	            ]
	        ];
	    }
	    function getTransform(controller) {
	        return graphic.getTransform(controller.group);
	    }
	    function getGlobalDirection(controller, localDirection) {
	        if (localDirection.length > 1) {
	            localDirection = localDirection.split('');
	            var globalDir = [
	                    getGlobalDirection(controller, localDirection[0]),
	                    getGlobalDirection(controller, localDirection[1])
	                ];
	            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	            return globalDir.join('');
	        } else {
	            var map = {
	                    w: 'left',
	                    e: 'right',
	                    n: 'top',
	                    s: 'bottom'
	                };
	            var inverseMap = {
	                    left: 'w',
	                    right: 'e',
	                    top: 'n',
	                    bottom: 's'
	                };
	            var globalDir = graphic.transformDirection(map[localDirection], getTransform(controller));
	            return inverseMap[globalDir];
	        }
	    }
	    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	        var brushOption = cover.__brushOption;
	        var rectRange = toRectRange(brushOption.range);
	        var localDelta = toLocalDelta(controller, dx, dy);
	        each(name.split(''), function (namePart) {
	            var ind = DIRECTION_MAP[namePart];
	            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	        });
	        brushOption.range = fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));
	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, { isEnd: false });
	    }
	    function driftPolygon(controller, cover, dx, dy, e) {
	        var range = cover.__brushOption.range;
	        var localDelta = toLocalDelta(controller, dx, dy);
	        each(range, function (point) {
	            point[0] += localDelta[0];
	            point[1] += localDelta[1];
	        });
	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, { isEnd: false });
	    }
	    function toLocalDelta(controller, dx, dy) {
	        var thisGroup = controller.group;
	        var localD = thisGroup.transformCoordToLocal(dx, dy);
	        var localZero = thisGroup.transformCoordToLocal(0, 0);
	        return [
	            localD[0] - localZero[0],
	            localD[1] - localZero[1]
	        ];
	    }
	    function clipByPanel(controller, cover, data) {
	        var panel = getPanelByCover(controller, cover);
	        if (panel === true) {
	            // Global panel
	            return zrUtil.clone(data);
	        }
	        var panelRect = panel.getBoundingRect();
	        return zrUtil.map(data, function (point) {
	            var x = point[0];
	            x = mathMax(x, panelRect.x);
	            x = mathMin(x, panelRect.x + panelRect.width);
	            var y = point[1];
	            y = mathMax(y, panelRect.y);
	            y = mathMin(y, panelRect.y + panelRect.height);
	            return [
	                x,
	                y
	            ];
	        });
	    }
	    function pointsToRect(points) {
	        var xmin = mathMin(points[0][0], points[1][0]);
	        var ymin = mathMin(points[0][1], points[1][1]);
	        var xmax = mathMax(points[0][0], points[1][0]);
	        var ymax = mathMax(points[0][1], points[1][1]);
	        return {
	            x: xmin,
	            y: ymin,
	            width: xmax - xmin,
	            height: ymax - ymin
	        };
	    }
	    function resetCursor(controller, e) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var zr = controller._zr;
	        if (controller._brushType) {
	            // If active
	            var panels = controller._panels;
	            var covers = controller._covers;
	            var inCover;
	            for (var i = 0; i < covers.length; i++) {
	                if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {
	                    inCover = true;
	                    break;
	                }
	            }
	            if (!inCover) {
	                if (panels) {
	                    // Brush on panels
	                    each(panels, function (panel) {
	                        panel.contain(x, y) && zr.setCursorStyle('crosshair');
	                    });
	                } else {
	                    // Global brush
	                    zr.setCursorStyle('crosshair');
	                }
	            }
	        }
	    }
	    function preventDefault(e) {
	        var rawE = e.event;
	        rawE.preventDefault && rawE.preventDefault();
	    }
	    function mainShapeContain(cover, x, y) {
	        return cover.childOfName('main').contain(x, y);
	    }
	    function updateCoverByMouse(controller, e, isEnd) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var creatingCover = controller._creatingCover;
	        var panel = controller._creatingPanel;
	        var thisBrushOption = controller._brushOption;
	        var eventParams;
	        controller._track.push(controller.group.transformCoordToLocal(x, y));
	        if (shouldShowCover(controller) || creatingCover) {
	            if (panel && !creatingCover) {
	                thisBrushOption.brushMode === 'single' && clearCovers(controller);
	                var brushOption = zrUtil.clone(thisBrushOption);
	                brushOption.panelId = panel === true ? null : panel.__brushPanelId;
	                creatingCover = controller._creatingCover = createCover(controller, brushOption);
	                controller._covers.push(creatingCover);
	            }
	            if (creatingCover) {
	                var coverRenderer = coverRenderers[controller._brushType];
	                var coverBrushOption = creatingCover.__brushOption;
	                coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));
	                if (isEnd) {
	                    endCreating(controller, creatingCover);
	                    coverRenderer.updateCommon(controller, creatingCover);
	                }
	                updateCoverShape(controller, creatingCover);
	                eventParams = { isEnd: isEnd };
	            }
	        } else if (isEnd && thisBrushOption.brushMode === 'single' && thisBrushOption.removeOnClick) {
	            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	            // But a single click do not clear covers, because user may have casual
	            // clicks (for example, click on other component and do not expect covers
	            // disappear).
	            // Only some cover removed, trigger action, but not every click trigger action.
	            if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {
	                eventParams = {
	                    isEnd: isEnd,
	                    removeOnClick: true
	                };
	            }
	        }
	        return eventParams;
	    }
	    var mouseHandlers = {
	            mousedown: function (e) {
	                if (this._dragging) {
	                    // In case some browser do not support globalOut,
	                    // and release mose out side the browser.
	                    handleDragEnd.call(this, e);
	                } else if (!e.target || !e.target.draggable) {
	                    preventDefault(e);
	                    var x = e.offsetX;
	                    var y = e.offsetY;
	                    this._creatingCover = null;
	                    var panel = this._creatingPanel = getPanelByPoint(this, x, y);
	                    if (panel) {
	                        this._dragging = true;
	                        this._track = [this.group.transformCoordToLocal(x, y)];
	                    }
	                }
	            },
	            mousemove: function (e) {
	                // set Cursor
	                resetCursor(this, e);
	                if (this._dragging) {
	                    preventDefault(e);
	                    var eventParams = updateCoverByMouse(this, e, false);
	                    eventParams && trigger(this, eventParams);
	                }
	            },
	            mouseup: handleDragEnd
	        };
	    function handleDragEnd(e) {
	        if (this._dragging) {
	            preventDefault(e);
	            var eventParams = updateCoverByMouse(this, e, true);
	            this._dragging = false;
	            this._track = [];
	            this._creatingCover = null;
	            // trigger event shoule be at final, after procedure will be nested.
	            eventParams && trigger(this, eventParams);
	        }
	    }
	    /**
	     * key: brushType
	     * @type {Object}
	     */
	    var coverRenderers = {
	            lineX: getLineRenderer(0),
	            lineY: getLineRenderer(1),
	            rect: {
	                createCover: function (controller, brushOption) {
	                    return createBaseRectCover(curry(driftRect, function (range) {
	                        return range;
	                    }, function (range) {
	                        return range;
	                    }), controller, brushOption, [
	                        'w',
	                        'e',
	                        'n',
	                        's',
	                        'se',
	                        'sw',
	                        'ne',
	                        'nw'
	                    ]);
	                },
	                getCreatingRange: function (localTrack) {
	                    var ends = getTrackEnds(localTrack);
	                    return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	                },
	                updateCoverShape: function (controller, cover, localRange, brushOption) {
	                    updateBaseRect(controller, cover, localRange, brushOption);
	                },
	                updateCommon: updateCommon,
	                contain: mainShapeContain
	            },
	            polygon: {
	                createCover: function (controller, brushOption) {
	                    var cover = new graphic.Group();
	                    // Do not use graphic.Polygon because graphic.Polyline do not close the
	                    // border of the shape when drawing, which is a better experience for user.
	                    cover.add(new graphic.Polyline({
	                        name: 'main',
	                        style: makeStyle(brushOption),
	                        silent: true
	                    }));
	                    return cover;
	                },
	                getCreatingRange: function (localTrack) {
	                    return localTrack;
	                },
	                endCreating: function (controller, cover) {
	                    cover.remove(cover.childAt(0));
	                    // Use graphic.Polygon close the shape.
	                    cover.add(new graphic.Polygon({
	                        name: 'main',
	                        draggable: true,
	                        drift: curry(driftPolygon, controller, cover),
	                        ondragend: curry(trigger, controller, { isEnd: true })
	                    }));
	                },
	                updateCoverShape: function (controller, cover, localRange, brushOption) {
	                    cover.childAt(0).setShape({ points: clipByPanel(controller, cover, localRange) });
	                },
	                updateCommon: updateCommon,
	                contain: mainShapeContain
	            }
	        };
	    function getLineRenderer(xyIndex) {
	        return {
	            createCover: function (controller, brushOption) {
	                return createBaseRectCover(curry(driftRect, function (range) {
	                    var rectRange = [
	                            range,
	                            [
	                                0,
	                                100
	                            ]
	                        ];
	                    xyIndex && rectRange.reverse();
	                    return rectRange;
	                }, function (rectRange) {
	                    return rectRange[xyIndex];
	                }), controller, brushOption, [
	                    [
	                        'w',
	                        'e'
	                    ],
	                    [
	                        'n',
	                        's'
	                    ]
	                ][xyIndex]);
	            },
	            getCreatingRange: function (localTrack) {
	                var ends = getTrackEnds(localTrack);
	                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);
	                return [
	                    min,
	                    max
	                ];
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                var brushWidth = brushOption.brushStyle.width;
	                var otherExtent;
	                // If brushWidth not specified, fit the panel.
	                if (brushWidth == null) {
	                    var panel = getPanelByCover(controller, cover);
	                    var base = 0;
	                    if (panel !== true) {
	                        var rect = panel.getBoundingRect();
	                        brushWidth = xyIndex ? rect.width : rect.height;
	                        base = xyIndex ? rect.x : rect.y;
	                    }
	                    // FIXME
	                    // do not support global panel yet.
	                    otherExtent = [
	                        base,
	                        base + (brushWidth || 0)
	                    ];
	                } else {
	                    otherExtent = [
	                        -brushWidth / 2,
	                        brushWidth / 2
	                    ];
	                }
	                var rectRange = [
	                        localRange,
	                        otherExtent
	                    ];
	                xyIndex && rectRange.reverse();
	                updateBaseRect(controller, cover, rectRange, brushOption);
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        };
	    }
	    return BrushController;
	});
	define('echarts/chart/helper/LinePath', ['require', '../../util/graphic', 'zrender/core/vector'], function (require) {
	    var graphic = require('../../util/graphic');
	    var vec2 = require('zrender/core/vector');
	    var straightLineProto = graphic.Line.prototype;
	    var bezierCurveProto = graphic.BezierCurve.prototype;
	    function isLine(shape) {
	        return shape.cpx1 == null || shape.cpy1 == null;
	    }
	    return graphic.extendShape({
	        type: 'ec-line',
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            percent: 1,
	            cpx1: null,
	            cpy1: null
	        },
	        buildPath: function (ctx, shape) {
	            (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	        },
	        pointAt: function (t) {
	            return isLine(this.shape) ? straightLineProto.pointAt.call(this, t) : bezierCurveProto.pointAt.call(this, t);
	        },
	        tangentAt: function (t) {
	            var shape = this.shape;
	            var p = isLine(shape) ? [
	                    shape.x2 - shape.x1,
	                    shape.y2 - shape.y1
	                ] : bezierCurveProto.tangentAt.call(this, t);
	            return vec2.normalize(p, p);
	        }
	    });
	});
	define('echarts/component/helper/interactionMutex', ['require', '../../echarts'], function (require) {
	    var ATTR = ' _ec_interaction_mutex';
	    var interactionMutex = {
	            take: function (zr, resourceKey, userKey) {
	                var store = getStore(zr);
	                store[resourceKey] = userKey;
	            },
	            release: function (zr, resourceKey, userKey) {
	                var store = getStore(zr);
	                var uKey = store[resourceKey];
	                if (uKey === userKey) {
	                    store[resourceKey] = null;
	                }
	            },
	            isTaken: function (zr, resourceKey) {
	                return !!getStore(zr)[resourceKey];
	            }
	        };
	    function getStore(zr) {
	        return zr[ATTR] || (zr[ATTR] = {});
	    }
	    /**
	     * payload: {
	     *     type: 'takeGlobalCursor',
	     *     key: 'dataZoomSelect', or 'brush', or ...,
	     *         If no userKey, release global cursor.
	     * }
	     */
	    require('../../echarts').registerAction({
	        type: 'takeGlobalCursor',
	        event: 'globalCursorTaken',
	        update: 'update'
	    }, function () {
	    });
	    return interactionMutex;
	});
	define('echarts/component/dataZoom/DataZoomModel', ['require', 'zrender/core/util', 'zrender/core/env', '../../echarts', '../../util/model', './AxisProxy'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var env = require('zrender/core/env');
	    var echarts = require('../../echarts');
	    var modelUtil = require('../../util/model');
	    var AxisProxy = require('./AxisProxy');
	    var each = zrUtil.each;
	    var eachAxisDim = modelUtil.eachAxisDim;
	    var DataZoomModel = echarts.extendComponentModel({
	            type: 'dataZoom',
	            dependencies: [
	                'xAxis',
	                'yAxis',
	                'zAxis',
	                'radiusAxis',
	                'angleAxis',
	                'series'
	            ],
	            defaultOption: {
	                zlevel: 0,
	                z: 4,
	                orient: null,
	                xAxisIndex: null,
	                yAxisIndex: null,
	                angleAxisIndex: null,
	                radiusAxisIndex: null,
	                filterMode: 'filter',
	                throttle: null,
	                start: 0,
	                end: 100,
	                startValue: null,
	                endValue: null
	            },
	            init: function (option, parentModel, ecModel) {
	                /**
	             * key like x_0, y_1
	             * @private
	             * @type {Object}
	             */
	                this._dataIntervalByAxis = {};
	                /**
	             * @private
	             */
	                this._dataInfo = {};
	                /**
	             * key like x_0, y_1
	             * @private
	             */
	                this._axisProxies = {};
	                /**
	             * @readOnly
	             */
	                this.textStyleModel;
	                /**
	             * @private
	             */
	                this._autoThrottle = true;
	                var rawOption = retrieveRaw(option);
	                this.mergeDefaultAndTheme(option, ecModel);
	                this.doInit(rawOption);
	            },
	            mergeOption: function (newOption) {
	                var rawOption = retrieveRaw(newOption);
	                //FIX #2591
	                zrUtil.merge(this.option, newOption, true);
	                this.doInit(rawOption);
	            },
	            doInit: function (rawOption) {
	                var thisOption = this.option;
	                // Disable realtime view update if canvas is not supported.
	                if (!env.canvasSupported) {
	                    thisOption.realtime = false;
	                }
	                this._setDefaultThrottle(rawOption);
	                processRangeProp('start', 'startValue', rawOption, thisOption);
	                processRangeProp('end', 'endValue', rawOption, thisOption);
	                this.textStyleModel = this.getModel('textStyle');
	                this._resetTarget();
	                this._giveAxisProxies();
	            },
	            _giveAxisProxies: function () {
	                var axisProxies = this._axisProxies;
	                this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	                    var axisModel = this.dependentModels[dimNames.axis][axisIndex];
	                    // If exists, share axisProxy with other dataZoomModels.
	                    var axisProxy = axisModel.__dzAxisProxy || (axisModel.__dzAxisProxy = new AxisProxy(dimNames.name, axisIndex, this, ecModel));
	                    // FIXME
	                    // dispose __dzAxisProxy
	                    axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	                }, this);
	            },
	            _resetTarget: function () {
	                var thisOption = this.option;
	                var autoMode = this._judgeAutoMode();
	                eachAxisDim(function (dimNames) {
	                    var axisIndexName = dimNames.axisIndex;
	                    thisOption[axisIndexName] = modelUtil.normalizeToArray(thisOption[axisIndexName]);
	                }, this);
	                if (autoMode === 'axisIndex') {
	                    this._autoSetAxisIndex();
	                } else if (autoMode === 'orient') {
	                    this._autoSetOrient();
	                }
	            },
	            _judgeAutoMode: function () {
	                // Auto set only works for setOption at the first time.
	                // The following is user's reponsibility. So using merged
	                // option is OK.
	                var thisOption = this.option;
	                var hasIndexSpecified = false;
	                eachAxisDim(function (dimNames) {
	                    // When user set axisIndex as a empty array, we think that user specify axisIndex
	                    // but do not want use auto mode. Because empty array may be encountered when
	                    // some error occured.
	                    if (thisOption[dimNames.axisIndex] != null) {
	                        hasIndexSpecified = true;
	                    }
	                }, this);
	                var orient = thisOption.orient;
	                if (orient == null && hasIndexSpecified) {
	                    return 'orient';
	                } else if (!hasIndexSpecified) {
	                    if (orient == null) {
	                        thisOption.orient = 'horizontal';
	                    }
	                    return 'axisIndex';
	                }
	            },
	            _autoSetAxisIndex: function () {
	                var autoAxisIndex = true;
	                var orient = this.get('orient', true);
	                var thisOption = this.option;
	                if (autoAxisIndex) {
	                    // Find axis that parallel to dataZoom as default.
	                    var dimNames = orient === 'vertical' ? {
	                            dim: 'y',
	                            axisIndex: 'yAxisIndex',
	                            axis: 'yAxis'
	                        } : {
	                            dim: 'x',
	                            axisIndex: 'xAxisIndex',
	                            axis: 'xAxis'
	                        };
	                    if (this.dependentModels[dimNames.axis].length) {
	                        thisOption[dimNames.axisIndex] = [0];
	                        autoAxisIndex = false;
	                    }
	                }
	                if (autoAxisIndex) {
	                    // Find the first category axis as default. (consider polar)
	                    eachAxisDim(function (dimNames) {
	                        if (!autoAxisIndex) {
	                            return;
	                        }
	                        var axisIndices = [];
	                        var axisModels = this.dependentModels[dimNames.axis];
	                        if (axisModels.length && !axisIndices.length) {
	                            for (var i = 0, len = axisModels.length; i < len; i++) {
	                                if (axisModels[i].get('type') === 'category') {
	                                    axisIndices.push(i);
	                                }
	                            }
	                        }
	                        thisOption[dimNames.axisIndex] = axisIndices;
	                        if (axisIndices.length) {
	                            autoAxisIndex = false;
	                        }
	                    }, this);
	                }
	                if (autoAxisIndex) {
	                    // FIXME
	                    // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	                    // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
	                    // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	                    // dataZoom component auto adopts series that reference to
	                    // both xAxis and yAxis which type is 'value'.
	                    this.ecModel.eachSeries(function (seriesModel) {
	                        if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	                            eachAxisDim(function (dimNames) {
	                                var axisIndices = thisOption[dimNames.axisIndex];
	                                var axisIndex = seriesModel.get(dimNames.axisIndex);
	                                if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	                                    axisIndices.push(axisIndex);
	                                }
	                            });
	                        }
	                    }, this);
	                }
	            },
	            _autoSetOrient: function () {
	                var dim;
	                // Find the first axis
	                this.eachTargetAxis(function (dimNames) {
	                    !dim && (dim = dimNames.name);
	                }, this);
	                this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	            },
	            _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
	                // FIXME
	                // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	                // 例如series.type === scatter时。
	                var is = true;
	                eachAxisDim(function (dimNames) {
	                    var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	                    var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];
	                    if (!axisModel || axisModel.get('type') !== axisType) {
	                        is = false;
	                    }
	                }, this);
	                return is;
	            },
	            _setDefaultThrottle: function (rawOption) {
	                // When first time user set throttle, auto throttle ends.
	                if (rawOption.hasOwnProperty('throttle')) {
	                    this._autoThrottle = false;
	                }
	                if (this._autoThrottle) {
	                    var globalOption = this.ecModel.option;
	                    this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
	                }
	            },
	            getFirstTargetAxisModel: function () {
	                var firstAxisModel;
	                eachAxisDim(function (dimNames) {
	                    if (firstAxisModel == null) {
	                        var indices = this.get(dimNames.axisIndex);
	                        if (indices.length) {
	                            firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	                        }
	                    }
	                }, this);
	                return firstAxisModel;
	            },
	            eachTargetAxis: function (callback, context) {
	                var ecModel = this.ecModel;
	                eachAxisDim(function (dimNames) {
	                    each(this.get(dimNames.axisIndex), function (axisIndex) {
	                        callback.call(context, dimNames, axisIndex, this, ecModel);
	                    }, this);
	                }, this);
	            },
	            getAxisProxy: function (dimName, axisIndex) {
	                return this._axisProxies[dimName + '_' + axisIndex];
	            },
	            setRawRange: function (opt) {
	                each([
	                    'start',
	                    'end',
	                    'startValue',
	                    'endValue'
	                ], function (name) {
	                    // If any of those prop is null/undefined, we should alos set
	                    // them, because only one pair between start/end and
	                    // startValue/endValue can work.
	                    this.option[name] = opt[name];
	                }, this);
	            },
	            getPercentRange: function () {
	                var axisProxy = this.findRepresentativeAxisProxy();
	                if (axisProxy) {
	                    return axisProxy.getDataPercentWindow();
	                }
	            },
	            getValueRange: function (axisDimName, axisIndex) {
	                if (axisDimName == null && axisIndex == null) {
	                    var axisProxy = this.findRepresentativeAxisProxy();
	                    if (axisProxy) {
	                        return axisProxy.getDataValueWindow();
	                    }
	                } else {
	                    return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	                }
	            },
	            findRepresentativeAxisProxy: function () {
	                // Find the first hosted axisProxy
	                var axisProxies = this._axisProxies;
	                for (var key in axisProxies) {
	                    if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	                        return axisProxies[key];
	                    }
	                }
	                // If no hosted axis find not hosted axisProxy.
	                // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	                // and the option.start or option.end settings are different. The percentRange
	                // should follow axisProxy.
	                // (We encounter this problem in toolbox data zoom.)
	                for (var key in axisProxies) {
	                    if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	                        return axisProxies[key];
	                    }
	                }
	            }
	        });
	    function retrieveRaw(option) {
	        var ret = {};
	        each([
	            'start',
	            'end',
	            'startValue',
	            'endValue',
	            'throttle'
	        ], function (name) {
	            option.hasOwnProperty(name) && (ret[name] = option[name]);
	        });
	        return ret;
	    }
	    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
	        // start/end has higher priority over startValue/endValue,
	        // but we should make chart.setOption({endValue: 1000}) effective,
	        // rather than chart.setOption({endValue: 1000, end: null}).
	        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
	            thisOption[percentProp] = null;
	        }    // Otherwise do nothing and use the merge result.
	    }
	    return DataZoomModel;
	});
	define('echarts/component/dataZoom/dataZoomProcessor', ['require', '../../echarts'], function (require) {
	    var echarts = require('../../echarts');
	    echarts.registerProcessor(function (ecModel, api) {
	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // We calculate window and reset axis here but not in model
	            // init stage and not after action dispatch handler, because
	            // reset should be called after seriesData.restoreData.
	            dataZoomModel.eachTargetAxis(resetSingleAxis);
	            // Caution: data zoom filtering is order sensitive when using
	            // percent range and no min/max/scale set on axis.
	            // For example, we have dataZoom definition:
	            // [
	            //      {xAxisIndex: 0, start: 30, end: 70},
	            //      {yAxisIndex: 0, start: 20, end: 80}
	            // ]
	            // In this case, [20, 80] of y-dataZoom should be based on data
	            // that have filtered by x-dataZoom using range of [30, 70],
	            // but should not be based on full raw data. Thus sliding
	            // x-dataZoom will change both ranges of xAxis and yAxis,
	            // while sliding y-dataZoom will only change the range of yAxis.
	            // So we should filter x-axis after reset x-axis immediately,
	            // and then reset y-axis and filter y-axis.
	            dataZoomModel.eachTargetAxis(filterSingleAxis);
	        });
	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // Fullfill all of the range props so that user
	            // is able to get them from chart.getOption().
	            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	            var percentRange = axisProxy.getDataPercentWindow();
	            var valueRange = axisProxy.getDataValueWindow();
	            dataZoomModel.setRawRange({
	                start: percentRange[0],
	                end: percentRange[1],
	                startValue: valueRange[0],
	                endValue: valueRange[1]
	            });
	        });
	    });
	    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	    }
	    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	    }
	});
	define('echarts/component/dataZoom/DataZoomView', ['require', '../../view/Component'], function (require) {
	    var ComponentView = require('../../view/Component');
	    return ComponentView.extend({
	        type: 'dataZoom',
	        render: function (dataZoomModel, ecModel, api, payload) {
	            this.dataZoomModel = dataZoomModel;
	            this.ecModel = ecModel;
	            this.api = api;
	        },
	        getTargetInfo: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var ecModel = this.ecModel;
	            var cartesians = [];
	            var polars = [];
	            var axisModels = [];
	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
	                if (axisModel) {
	                    axisModels.push(axisModel);
	                    var gridIndex = axisModel.get('gridIndex');
	                    var polarIndex = axisModel.get('polarIndex');
	                    if (gridIndex != null) {
	                        var coordModel = ecModel.getComponent('grid', gridIndex);
	                        save(coordModel, axisModel, cartesians, gridIndex);
	                    } else if (polarIndex != null) {
	                        var coordModel = ecModel.getComponent('polar', polarIndex);
	                        save(coordModel, axisModel, polars, polarIndex);
	                    }
	                }
	            }, this);
	            function save(coordModel, axisModel, store, coordIndex) {
	                var item;
	                for (var i = 0; i < store.length; i++) {
	                    if (store[i].model === coordModel) {
	                        item = store[i];
	                        break;
	                    }
	                }
	                if (!item) {
	                    store.push(item = {
	                        model: coordModel,
	                        axisModels: [],
	                        coordIndex: coordIndex
	                    });
	                }
	                item.axisModels.push(axisModel);
	            }
	            return {
	                cartesians: cartesians,
	                polars: polars,
	                axisModels: axisModels
	            };
	        }
	    });
	});
	define('echarts/component/dataZoom/SelectZoomView', ['require', './DataZoomView'], function (require) {
	    return require('./DataZoomView').extend({ type: 'dataZoom.select' });
	});
	define('echarts/component/dataZoom/SelectZoomModel', ['require', './DataZoomModel'], function (require) {
	    var DataZoomModel = require('./DataZoomModel');
	    return DataZoomModel.extend({ type: 'dataZoom.select' });
	});
	define('echarts/component/dataZoom/typeDefaulter', ['require', '../../model/Component'], function (require) {
	    require('../../model/Component').registerSubTypeDefaulter('dataZoom', function (option) {
	        // Default 'slider' when no type specified.
	        return 'slider';
	    });
	});
	define('echarts/component/dataZoom/AxisProxy', ['require', 'zrender/core/util', '../../util/number'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var numberUtil = require('../../util/number');
	    var each = zrUtil.each;
	    var asc = numberUtil.asc;
	    /**
	     * Operate single axis.
	     * One axis can only operated by one axis operator.
	     * Different dataZoomModels may be defined to operate the same axis.
	     * (i.e. 'inside' data zoom and 'slider' data zoom components)
	     * So dataZoomModels share one axisProxy in that case.
	     *
	     * @class
	     */
	    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {
	        /**
	         * @private
	         * @type {string}
	         */
	        this._dimName = dimName;
	        /**
	         * @private
	         */
	        this._axisIndex = axisIndex;
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._valueWindow;
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._percentWindow;
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._dataExtent;
	        /**
	         * @readOnly
	         * @type {module: echarts/model/Global}
	         */
	        this.ecModel = ecModel;
	        /**
	         * @private
	         * @type {module: echarts/component/dataZoom/DataZoomModel}
	         */
	        this._dataZoomModel = dataZoomModel;
	    };
	    AxisProxy.prototype = {
	        constructor: AxisProxy,
	        hostedBy: function (dataZoomModel) {
	            return this._dataZoomModel === dataZoomModel;
	        },
	        getDataExtent: function () {
	            return this._dataExtent.slice();
	        },
	        getDataValueWindow: function () {
	            return this._valueWindow.slice();
	        },
	        getDataPercentWindow: function () {
	            return this._percentWindow.slice();
	        },
	        getTargetSeriesModels: function () {
	            var seriesModels = [];
	            this.ecModel.eachSeries(function (seriesModel) {
	                // Legacy problem: some one wrote xAxisIndex as [0] following the wrong way in example.
	                if (this._axisIndex === +seriesModel.get(this._dimName + 'AxisIndex')) {
	                    seriesModels.push(seriesModel);
	                }
	            }, this);
	            return seriesModels;
	        },
	        getAxisModel: function () {
	            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	        },
	        getOtherAxisModel: function () {
	            var axisDim = this._dimName;
	            var ecModel = this.ecModel;
	            var axisModel = this.getAxisModel();
	            var isCartesian = axisDim === 'x' || axisDim === 'y';
	            var otherAxisDim;
	            var coordSysIndexName;
	            if (isCartesian) {
	                coordSysIndexName = 'gridIndex';
	                otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	            } else {
	                coordSysIndexName = 'polarIndex';
	                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	            }
	            var foundOtherAxisModel;
	            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	                if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
	                    foundOtherAxisModel = otherAxisModel;
	                }
	            });
	            return foundOtherAxisModel;
	        },
	        reset: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	            // Culculate data window and data extent, and record them.
	            var dataExtent = this._dataExtent = calculateDataExtent(this._dimName, this.getTargetSeriesModels());
	            var dataWindow = calculateDataWindow(dataZoomModel.option, dataExtent, this);
	            this._valueWindow = dataWindow.valueWindow;
	            this._percentWindow = dataWindow.percentWindow;
	            // Update axis setting then.
	            setAxisModel(this);
	        },
	        restore: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	            this._valueWindow = this._percentWindow = null;
	            setAxisModel(this, true);
	        },
	        filterData: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	            var axisDim = this._dimName;
	            var seriesModels = this.getTargetSeriesModels();
	            var filterMode = dataZoomModel.get('filterMode');
	            var valueWindow = this._valueWindow;
	            // FIXME
	            // Toolbox may has dataZoom injected. And if there are stacked bar chart
	            // with NaN data, NaN will be filtered and stack will be wrong.
	            // So we need to force the mode to be set empty.
	            // In fect, it is not a big deal that do not support filterMode-'filter'
	            // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	            // selection" some day, which might need "adapt to data extent on the
	            // otherAxis", which is disabled by filterMode-'empty'.
	            var otherAxisModel = this.getOtherAxisModel();
	            if (dataZoomModel.get('$fromToolbox') && otherAxisModel && otherAxisModel.get('type') === 'category') {
	                filterMode = 'empty';
	            }
	            // Process series data
	            each(seriesModels, function (seriesModel) {
	                var seriesData = seriesModel.getData();
	                seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    if (filterMode === 'empty') {
	                        seriesModel.setData(seriesData.map(dim, function (value) {
	                            return !isInWindow(value) ? NaN : value;
	                        }));
	                    } else {
	                        seriesData.filterSelf(dim, isInWindow);
	                    }
	                });
	            });
	            function isInWindow(value) {
	                return value >= valueWindow[0] && value <= valueWindow[1];
	            }
	        }
	    };
	    function calculateDataExtent(axisDim, seriesModels) {
	        var dataExtent = [
	                Infinity,
	                -Infinity
	            ];
	        each(seriesModels, function (seriesModel) {
	            var seriesData = seriesModel.getData();
	            if (seriesData) {
	                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    var seriesExtent = seriesData.getDataExtent(dim);
	                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	                });
	            }
	        }, this);
	        return dataExtent;
	    }
	    function calculateDataWindow(opt, dataExtent, axisProxy) {
	        var axisModel = axisProxy.getAxisModel();
	        var scale = axisModel.axis.scale;
	        var percentExtent = [
	                0,
	                100
	            ];
	        var percentWindow = [
	                opt.start,
	                opt.end
	            ];
	        var valueWindow = [];
	        // In percent range is used and axis min/max/scale is set,
	        // window should be based on min/max/0, but should not be
	        // based on the extent of filtered data.
	        dataExtent = dataExtent.slice();
	        fixExtendByAxis(dataExtent, axisModel, scale);
	        each([
	            'startValue',
	            'endValue'
	        ], function (prop) {
	            valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	        });
	        // Normalize bound.
	        each([
	            0,
	            1
	        ], function (idx) {
	            var boundValue = valueWindow[idx];
	            var boundPercent = percentWindow[idx];
	            // start/end has higher priority over startValue/endValue,
	            // because start/end can be consistent among different type
	            // of axis but startValue/endValue not.
	            if (boundPercent != null || boundValue == null) {
	                if (boundPercent == null) {
	                    boundPercent = percentExtent[idx];
	                }
	                // Use scale.parse to math round for category or time axis.
	                boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent, true));
	            } else {
	                // boundPercent == null && boundValue != null
	                boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent, true);
	            }
	            // valueWindow[idx] = round(boundValue);
	            // percentWindow[idx] = round(boundPercent);
	            valueWindow[idx] = boundValue;
	            percentWindow[idx] = boundPercent;
	        });
	        return {
	            valueWindow: asc(valueWindow),
	            percentWindow: asc(percentWindow)
	        };
	    }
	    function fixExtendByAxis(dataExtent, axisModel, scale) {
	        each([
	            'min',
	            'max'
	        ], function (minMax, index) {
	            var axisMax = axisModel.get(minMax, true);
	            // Consider 'dataMin', 'dataMax'
	            if (axisMax != null && (axisMax + '').toLowerCase() !== 'data' + minMax) {
	                dataExtent[index] = scale.parse(axisMax);
	            }
	        });
	        if (!axisModel.get('scale', true)) {
	            dataExtent[0] > 0 && (dataExtent[0] = 0);
	            dataExtent[1] < 0 && (dataExtent[1] = 0);
	        }
	        return dataExtent;
	    }
	    function setAxisModel(axisProxy, isRestore) {
	        var axisModel = axisProxy.getAxisModel();
	        var percentWindow = axisProxy._percentWindow;
	        var valueWindow = axisProxy._valueWindow;
	        if (!percentWindow) {
	            return;
	        }
	        var isFull = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;
	        // [0, 500]: arbitrary value, guess axis extent.
	        var precision = !isRestore && numberUtil.getPixelPrecision(valueWindow, [
	                0,
	                500
	            ]);
	        // toFixed() digits argument must be between 0 and 20
	        var invalidPrecision = !isRestore && !(precision < 20 && precision >= 0);
	        var useOrigin = isRestore || isFull || invalidPrecision;
	        axisModel.setRange && axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
	    }
	    return AxisProxy;
	});
	define('echarts/component/dataZoom/dataZoomAction', ['require', 'zrender/core/util', '../../util/model', '../../echarts'], function (require) {
	    var zrUtil = require('zrender/core/util');
	    var modelUtil = require('../../util/model');
	    var echarts = require('../../echarts');
	    echarts.registerAction('dataZoom', function (payload, ecModel) {
	        var linkedNodesFinder = modelUtil.createLinkedNodesFinder(zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'), modelUtil.eachAxisDim, function (model, dimNames) {
	                return model.get(dimNames.axisIndex);
	            });
	        var effectedModels = [];
	        ecModel.eachComponent({
	            mainType: 'dataZoom',
	            query: payload
	        }, function (model, index) {
	            effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
	        });
	        zrUtil.each(effectedModels, function (dataZoomModel, index) {
	            dataZoomModel.setRawRange({
	                start: payload.start,
	                end: payload.end,
	                startValue: payload.startValue,
	                endValue: payload.endValue
	            });
	        });
	    });
	});
	define('zrender', ['zrender/zrender'], function (zrender) { return zrender;});
	define('echarts', ['echarts/echarts'], function (echarts) { return echarts;});
	var echarts = require('echarts');

	echarts.graphic = require('echarts/util/graphic');
	echarts.number = require('echarts/util/number');
	echarts.format = require('echarts/util/format');


	require('echarts/chart/bar');

	require('echarts/chart/line');

	require('echarts/chart/pie');


	require('echarts/component/grid');

	require('echarts/component/title');

	require('echarts/component/legend');

	require('echarts/component/tooltip');

	require('echarts/component/markLine');

	require('echarts/component/toolbox');



	require('zrender/vml/vml');


	return echarts;
	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(87)))

/***/ },

/***/ 87:
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }

/******/ });